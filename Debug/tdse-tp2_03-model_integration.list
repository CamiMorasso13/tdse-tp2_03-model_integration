
tdse-tp2_03-model_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  080042dc  080042dc  000052dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  00006098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080047a8  080047a8  000057a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047b0  080047b0  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047b0  080047b0  000057b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047b4  080047b4  000057b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  080047b8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000098  08004850  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08004850  000063b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008401  00000000  00000000  000060c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  0000e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00010320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056f  00000000  00000000  00010a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001861a  00000000  00000000  00010fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c4e2  00000000  00000000  000295f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000837da  00000000  00000000  00035adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b92b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000b92f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000bba34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080042c4 	.word	0x080042c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080042c4 	.word	0x080042c4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  #if (1 == LOGGER_CONFIG_USE_SEMIHOSTING)

  initialise_monitor_handles();
 8000160:	f002 fefa 	bl	8002f58 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa1a 	bl	800059c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Application Init */
  app_init();
 8000174:	f001 fa4c 	bl	8001610 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Application Update */
    app_update();
 8000178:	f001 fbc4 	bl	8001904 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f96a 	bl	8003466 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd38 	bl	8000c34 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8d9 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ffa5 	bl	8001138 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8c4 	bl	8000380 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f90c 	bl	8001454 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f89d 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000b4 	.word	0x200000b4
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b40      	ldr	r3, [pc, #256]	@ (800036c <MX_GPIO_Init+0x118>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a3f      	ldr	r2, [pc, #252]	@ (800036c <MX_GPIO_Init+0x118>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b3d      	ldr	r3, [pc, #244]	@ (800036c <MX_GPIO_Init+0x118>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b3a      	ldr	r3, [pc, #232]	@ (800036c <MX_GPIO_Init+0x118>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a39      	ldr	r2, [pc, #228]	@ (800036c <MX_GPIO_Init+0x118>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b37      	ldr	r3, [pc, #220]	@ (800036c <MX_GPIO_Init+0x118>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b34      	ldr	r3, [pc, #208]	@ (800036c <MX_GPIO_Init+0x118>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a33      	ldr	r2, [pc, #204]	@ (800036c <MX_GPIO_Init+0x118>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b31      	ldr	r3, [pc, #196]	@ (800036c <MX_GPIO_Init+0x118>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b2e      	ldr	r3, [pc, #184]	@ (800036c <MX_GPIO_Init+0x118>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a2d      	ldr	r2, [pc, #180]	@ (800036c <MX_GPIO_Init+0x118>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b2b      	ldr	r3, [pc, #172]	@ (800036c <MX_GPIO_Init+0x118>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4828      	ldr	r0, [pc, #160]	@ (8000370 <MX_GPIO_Init+0x11c>)
 80002ce:	f000 fc76 	bl	8000bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d8:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <MX_GPIO_Init+0x120>)
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4824      	ldr	r0, [pc, #144]	@ (8000378 <MX_GPIO_Init+0x124>)
 80002e8:	f000 face 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	481b      	ldr	r0, [pc, #108]	@ (8000370 <MX_GPIO_Init+0x11c>)
 8000304:	f000 fac0 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000308:	2380      	movs	r3, #128	@ 0x80
 800030a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000310:	2301      	movs	r3, #1
 8000312:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4817      	ldr	r0, [pc, #92]	@ (8000378 <MX_GPIO_Init+0x124>)
 800031c:	f000 fab4 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : D8_Pin */
  GPIO_InitStruct.Pin = D8_Pin;
 8000320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D8_GPIO_Port, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	480e      	ldr	r0, [pc, #56]	@ (8000370 <MX_GPIO_Init+0x11c>)
 8000336:	f000 faa7 	bl	8000888 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 800033a:	2340      	movs	r3, #64	@ 0x40
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000342:	2301      	movs	r3, #1
 8000344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480b      	ldr	r0, [pc, #44]	@ (800037c <MX_GPIO_Init+0x128>)
 800034e:	f000 fa9b 	bl	8000888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000352:	2200      	movs	r2, #0
 8000354:	2100      	movs	r1, #0
 8000356:	2028      	movs	r0, #40	@ 0x28
 8000358:	f000 fa59 	bl	800080e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800035c:	2028      	movs	r0, #40	@ 0x28
 800035e:	f000 fa72 	bl	8000846 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000362:	bf00      	nop
 8000364:	3720      	adds	r7, #32
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40010800 	.word	0x40010800
 8000374:	10110000 	.word	0x10110000
 8000378:	40011000 	.word	0x40011000
 800037c:	40010c00 	.word	0x40010c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <Error_Handler+0x8>

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	@ (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a15      	ldr	r2, [pc, #84]	@ (8000460 <HAL_UART_MspInit+0x70>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d123      	bne.n	8000458 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000410:	4b14      	ldr	r3, [pc, #80]	@ (8000464 <HAL_UART_MspInit+0x74>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4a13      	ldr	r2, [pc, #76]	@ (8000464 <HAL_UART_MspInit+0x74>)
 8000416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800041a:	61d3      	str	r3, [r2, #28]
 800041c:	4b11      	ldr	r3, [pc, #68]	@ (8000464 <HAL_UART_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b0e      	ldr	r3, [pc, #56]	@ (8000464 <HAL_UART_MspInit+0x74>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a0d      	ldr	r2, [pc, #52]	@ (8000464 <HAL_UART_MspInit+0x74>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b0b      	ldr	r3, [pc, #44]	@ (8000464 <HAL_UART_MspInit+0x74>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000440:	230c      	movs	r3, #12
 8000442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000444:	2302      	movs	r3, #2
 8000446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000448:	2302      	movs	r3, #2
 800044a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	4805      	ldr	r0, [pc, #20]	@ (8000468 <HAL_UART_MspInit+0x78>)
 8000454:	f000 fa18 	bl	8000888 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000458:	bf00      	nop
 800045a:	3720      	adds	r7, #32
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40004400 	.word	0x40004400
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f8b4 	bl	8000628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 80004c0:	f000 f9db 	bl	800087a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004d0:	f000 fb8e 	bl	8000bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004e0:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <_sbrk+0x5c>)
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <_sbrk+0x60>)
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ec:	4b13      	ldr	r3, [pc, #76]	@ (800053c <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d102      	bne.n	80004fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <_sbrk+0x64>)
 80004f6:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <_sbrk+0x68>)
 80004f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <_sbrk+0x64>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4413      	add	r3, r2
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	429a      	cmp	r2, r3
 8000506:	d207      	bcs.n	8000518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000508:	f002 fffc 	bl	8003504 <__errno>
 800050c:	4603      	mov	r3, r0
 800050e:	220c      	movs	r2, #12
 8000510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	e009      	b.n	800052c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000518:	4b08      	ldr	r3, [pc, #32]	@ (800053c <_sbrk+0x64>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051e:	4b07      	ldr	r3, [pc, #28]	@ (800053c <_sbrk+0x64>)
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	4a05      	ldr	r2, [pc, #20]	@ (800053c <_sbrk+0x64>)
 8000528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800052a:	68fb      	ldr	r3, [r7, #12]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3718      	adds	r7, #24
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20005000 	.word	0x20005000
 8000538:	00000400 	.word	0x00000400
 800053c:	200000fc 	.word	0x200000fc
 8000540:	200003b8 	.word	0x200003b8

08000544 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000550:	f7ff fff8 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000554:	480b      	ldr	r0, [pc, #44]	@ (8000584 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000556:	490c      	ldr	r1, [pc, #48]	@ (8000588 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000558:	4a0c      	ldr	r2, [pc, #48]	@ (800058c <LoopFillZerobss+0x16>)
  movs r3, #0
 800055a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800055c:	e002      	b.n	8000564 <LoopCopyDataInit>

0800055e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000562:	3304      	adds	r3, #4

08000564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000568:	d3f9      	bcc.n	800055e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056a:	4a09      	ldr	r2, [pc, #36]	@ (8000590 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800056c:	4c09      	ldr	r4, [pc, #36]	@ (8000594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000570:	e001      	b.n	8000576 <LoopFillZerobss>

08000572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000574:	3204      	adds	r2, #4

08000576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000578:	d3fb      	bcc.n	8000572 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800057a:	f002 ffc9 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800057e:	f7ff fded 	bl	800015c <main>
  bx lr
 8000582:	4770      	bx	lr
  ldr r0, =_sdata
 8000584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000588:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800058c:	080047b8 	.word	0x080047b8
  ldr r2, =_sbss
 8000590:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000594:	200003b4 	.word	0x200003b4

08000598 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000598:	e7fe      	b.n	8000598 <ADC1_2_IRQHandler>
	...

0800059c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <HAL_Init+0x28>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <HAL_Init+0x28>)
 80005a6:	f043 0310 	orr.w	r3, r3, #16
 80005aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ac:	2003      	movs	r0, #3
 80005ae:	f000 f923 	bl	80007f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b2:	200f      	movs	r0, #15
 80005b4:	f000 f808 	bl	80005c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b8:	f7ff fee8 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	4618      	mov	r0, r3
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40022000 	.word	0x40022000

080005c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_InitTick+0x54>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <HAL_InitTick+0x58>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4619      	mov	r1, r3
 80005da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005de:	fbb3 f3f1 	udiv	r3, r3, r1
 80005e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 f93b 	bl	8000862 <HAL_SYSTICK_Config>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e00e      	b.n	8000614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b0f      	cmp	r3, #15
 80005fa:	d80a      	bhi.n	8000612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005fc:	2200      	movs	r2, #0
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	f04f 30ff 	mov.w	r0, #4294967295
 8000604:	f000 f903 	bl	800080e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000608:	4a06      	ldr	r2, [pc, #24]	@ (8000624 <HAL_InitTick+0x5c>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e000      	b.n	8000614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000612:	2301      	movs	r3, #1
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000000 	.word	0x20000000
 8000620:	20000008 	.word	0x20000008
 8000624:	20000004 	.word	0x20000004

08000628 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <HAL_IncTick+0x1c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b05      	ldr	r3, [pc, #20]	@ (8000648 <HAL_IncTick+0x20>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4413      	add	r3, r2
 8000638:	4a03      	ldr	r2, [pc, #12]	@ (8000648 <HAL_IncTick+0x20>)
 800063a:	6013      	str	r3, [r2, #0]
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr
 8000644:	20000008 	.word	0x20000008
 8000648:	20000100 	.word	0x20000100

0800064c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b02      	ldr	r3, [pc, #8]	@ (800065c <HAL_GetTick+0x10>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	20000100 	.word	0x20000100

08000660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f003 0307 	and.w	r3, r3, #7
 800066e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000676:	68ba      	ldr	r2, [r7, #8]
 8000678:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000688:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800068c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000692:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	60d3      	str	r3, [r2, #12]
}
 8000698:	bf00      	nop
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <__NVIC_GetPriorityGrouping+0x18>)
 80006ae:	68db      	ldr	r3, [r3, #12]
 80006b0:	0a1b      	lsrs	r3, r3, #8
 80006b2:	f003 0307 	and.w	r3, r3, #7
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	db0b      	blt.n	80006ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	f003 021f 	and.w	r2, r3, #31
 80006dc:	4906      	ldr	r1, [pc, #24]	@ (80006f8 <__NVIC_EnableIRQ+0x34>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	095b      	lsrs	r3, r3, #5
 80006e4:	2001      	movs	r0, #1
 80006e6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100

080006fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070c:	2b00      	cmp	r3, #0
 800070e:	db0a      	blt.n	8000726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2da      	uxtb	r2, r3
 8000714:	490c      	ldr	r1, [pc, #48]	@ (8000748 <__NVIC_SetPriority+0x4c>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	440b      	add	r3, r1
 8000720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000724:	e00a      	b.n	800073c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	b2da      	uxtb	r2, r3
 800072a:	4908      	ldr	r1, [pc, #32]	@ (800074c <__NVIC_SetPriority+0x50>)
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	f003 030f 	and.w	r3, r3, #15
 8000732:	3b04      	subs	r3, #4
 8000734:	0112      	lsls	r2, r2, #4
 8000736:	b2d2      	uxtb	r2, r2
 8000738:	440b      	add	r3, r1
 800073a:	761a      	strb	r2, [r3, #24]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100
 800074c:	e000ed00 	.word	0xe000ed00

08000750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b480      	push	{r7}
 8000752:	b089      	sub	sp, #36	@ 0x24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	f1c3 0307 	rsb	r3, r3, #7
 800076a:	2b04      	cmp	r3, #4
 800076c:	bf28      	it	cs
 800076e:	2304      	movcs	r3, #4
 8000770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	3304      	adds	r3, #4
 8000776:	2b06      	cmp	r3, #6
 8000778:	d902      	bls.n	8000780 <NVIC_EncodePriority+0x30>
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3b03      	subs	r3, #3
 800077e:	e000      	b.n	8000782 <NVIC_EncodePriority+0x32>
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	f04f 32ff 	mov.w	r2, #4294967295
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	fa02 f303 	lsl.w	r3, r2, r3
 800078e:	43da      	mvns	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	401a      	ands	r2, r3
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000798:	f04f 31ff 	mov.w	r1, #4294967295
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	43d9      	mvns	r1, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a8:	4313      	orrs	r3, r2
         );
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3724      	adds	r7, #36	@ 0x24
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3b01      	subs	r3, #1
 80007c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007c4:	d301      	bcc.n	80007ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c6:	2301      	movs	r3, #1
 80007c8:	e00f      	b.n	80007ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ca:	4a0a      	ldr	r2, [pc, #40]	@ (80007f4 <SysTick_Config+0x40>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d2:	210f      	movs	r1, #15
 80007d4:	f04f 30ff 	mov.w	r0, #4294967295
 80007d8:	f7ff ff90 	bl	80006fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <SysTick_Config+0x40>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007e2:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <SysTick_Config+0x40>)
 80007e4:	2207      	movs	r2, #7
 80007e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	e000e010 	.word	0xe000e010

080007f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f7ff ff2d 	bl	8000660 <__NVIC_SetPriorityGrouping>
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
 800081a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000820:	f7ff ff42 	bl	80006a8 <__NVIC_GetPriorityGrouping>
 8000824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	68b9      	ldr	r1, [r7, #8]
 800082a:	6978      	ldr	r0, [r7, #20]
 800082c:	f7ff ff90 	bl	8000750 <NVIC_EncodePriority>
 8000830:	4602      	mov	r2, r0
 8000832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff5f 	bl	80006fc <__NVIC_SetPriority>
}
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	4603      	mov	r3, r0
 800084e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff35 	bl	80006c4 <__NVIC_EnableIRQ>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffa2 	bl	80007b4 <SysTick_Config>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800087e:	f001 f8c3 	bl	8001a08 <HAL_SYSTICK_Callback>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000888:	b480      	push	{r7}
 800088a:	b08b      	sub	sp, #44	@ 0x2c
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800089a:	e169      	b.n	8000b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800089c:	2201      	movs	r2, #1
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	4013      	ands	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008b0:	69ba      	ldr	r2, [r7, #24]
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	f040 8158 	bne.w	8000b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4a9a      	ldr	r2, [pc, #616]	@ (8000b28 <HAL_GPIO_Init+0x2a0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d05e      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008c4:	4a98      	ldr	r2, [pc, #608]	@ (8000b28 <HAL_GPIO_Init+0x2a0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d875      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008ca:	4a98      	ldr	r2, [pc, #608]	@ (8000b2c <HAL_GPIO_Init+0x2a4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d058      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008d0:	4a96      	ldr	r2, [pc, #600]	@ (8000b2c <HAL_GPIO_Init+0x2a4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d86f      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008d6:	4a96      	ldr	r2, [pc, #600]	@ (8000b30 <HAL_GPIO_Init+0x2a8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d052      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008dc:	4a94      	ldr	r2, [pc, #592]	@ (8000b30 <HAL_GPIO_Init+0x2a8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d869      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008e2:	4a94      	ldr	r2, [pc, #592]	@ (8000b34 <HAL_GPIO_Init+0x2ac>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d04c      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008e8:	4a92      	ldr	r2, [pc, #584]	@ (8000b34 <HAL_GPIO_Init+0x2ac>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d863      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008ee:	4a92      	ldr	r2, [pc, #584]	@ (8000b38 <HAL_GPIO_Init+0x2b0>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d046      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
 80008f4:	4a90      	ldr	r2, [pc, #576]	@ (8000b38 <HAL_GPIO_Init+0x2b0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d85d      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d82a      	bhi.n	8000954 <HAL_GPIO_Init+0xcc>
 80008fe:	2b12      	cmp	r3, #18
 8000900:	d859      	bhi.n	80009b6 <HAL_GPIO_Init+0x12e>
 8000902:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <HAL_GPIO_Init+0x80>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000983 	.word	0x08000983
 800090c:	0800095d 	.word	0x0800095d
 8000910:	0800096f 	.word	0x0800096f
 8000914:	080009b1 	.word	0x080009b1
 8000918:	080009b7 	.word	0x080009b7
 800091c:	080009b7 	.word	0x080009b7
 8000920:	080009b7 	.word	0x080009b7
 8000924:	080009b7 	.word	0x080009b7
 8000928:	080009b7 	.word	0x080009b7
 800092c:	080009b7 	.word	0x080009b7
 8000930:	080009b7 	.word	0x080009b7
 8000934:	080009b7 	.word	0x080009b7
 8000938:	080009b7 	.word	0x080009b7
 800093c:	080009b7 	.word	0x080009b7
 8000940:	080009b7 	.word	0x080009b7
 8000944:	080009b7 	.word	0x080009b7
 8000948:	080009b7 	.word	0x080009b7
 800094c:	08000965 	.word	0x08000965
 8000950:	08000979 	.word	0x08000979
 8000954:	4a79      	ldr	r2, [pc, #484]	@ (8000b3c <HAL_GPIO_Init+0x2b4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d013      	beq.n	8000982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800095a:	e02c      	b.n	80009b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	623b      	str	r3, [r7, #32]
          break;
 8000962:	e029      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	3304      	adds	r3, #4
 800096a:	623b      	str	r3, [r7, #32]
          break;
 800096c:	e024      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	3308      	adds	r3, #8
 8000974:	623b      	str	r3, [r7, #32]
          break;
 8000976:	e01f      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	330c      	adds	r3, #12
 800097e:	623b      	str	r3, [r7, #32]
          break;
 8000980:	e01a      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800098a:	2304      	movs	r3, #4
 800098c:	623b      	str	r3, [r7, #32]
          break;
 800098e:	e013      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d105      	bne.n	80009a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000998:	2308      	movs	r3, #8
 800099a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	69fa      	ldr	r2, [r7, #28]
 80009a0:	611a      	str	r2, [r3, #16]
          break;
 80009a2:	e009      	b.n	80009b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a4:	2308      	movs	r3, #8
 80009a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69fa      	ldr	r2, [r7, #28]
 80009ac:	615a      	str	r2, [r3, #20]
          break;
 80009ae:	e003      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
          break;
 80009b4:	e000      	b.n	80009b8 <HAL_GPIO_Init+0x130>
          break;
 80009b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	2bff      	cmp	r3, #255	@ 0xff
 80009bc:	d801      	bhi.n	80009c2 <HAL_GPIO_Init+0x13a>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	e001      	b.n	80009c6 <HAL_GPIO_Init+0x13e>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	3304      	adds	r3, #4
 80009c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	2bff      	cmp	r3, #255	@ 0xff
 80009cc:	d802      	bhi.n	80009d4 <HAL_GPIO_Init+0x14c>
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	e002      	b.n	80009da <HAL_GPIO_Init+0x152>
 80009d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d6:	3b08      	subs	r3, #8
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	210f      	movs	r1, #15
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	fa01 f303 	lsl.w	r3, r1, r3
 80009e8:	43db      	mvns	r3, r3
 80009ea:	401a      	ands	r2, r3
 80009ec:	6a39      	ldr	r1, [r7, #32]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	fa01 f303 	lsl.w	r3, r1, r3
 80009f4:	431a      	orrs	r2, r3
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 80b1 	beq.w	8000b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a08:	4b4d      	ldr	r3, [pc, #308]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a0e:	f043 0301 	orr.w	r3, r3, #1
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b4a      	ldr	r3, [pc, #296]	@ (8000b40 <HAL_GPIO_Init+0x2b8>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a20:	4a48      	ldr	r2, [pc, #288]	@ (8000b44 <HAL_GPIO_Init+0x2bc>)
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	089b      	lsrs	r3, r3, #2
 8000a26:	3302      	adds	r3, #2
 8000a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a30:	f003 0303 	and.w	r3, r3, #3
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	220f      	movs	r2, #15
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	4013      	ands	r3, r2
 8000a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a40      	ldr	r2, [pc, #256]	@ (8000b48 <HAL_GPIO_Init+0x2c0>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d013      	beq.n	8000a74 <HAL_GPIO_Init+0x1ec>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8000b4c <HAL_GPIO_Init+0x2c4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d00d      	beq.n	8000a70 <HAL_GPIO_Init+0x1e8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a3e      	ldr	r2, [pc, #248]	@ (8000b50 <HAL_GPIO_Init+0x2c8>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d007      	beq.n	8000a6c <HAL_GPIO_Init+0x1e4>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b54 <HAL_GPIO_Init+0x2cc>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d101      	bne.n	8000a68 <HAL_GPIO_Init+0x1e0>
 8000a64:	2303      	movs	r3, #3
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a68:	2304      	movs	r3, #4
 8000a6a:	e004      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a70:	2301      	movs	r3, #1
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0x1ee>
 8000a74:	2300      	movs	r3, #0
 8000a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a78:	f002 0203 	and.w	r2, r2, #3
 8000a7c:	0092      	lsls	r2, r2, #2
 8000a7e:	4093      	lsls	r3, r2
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a86:	492f      	ldr	r1, [pc, #188]	@ (8000b44 <HAL_GPIO_Init+0x2bc>)
 8000a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8a:	089b      	lsrs	r3, r3, #2
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	689a      	ldr	r2, [r3, #8]
 8000aa4:	492c      	ldr	r1, [pc, #176]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	608b      	str	r3, [r1, #8]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4928      	ldr	r1, [pc, #160]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000aca:	68da      	ldr	r2, [r3, #12]
 8000acc:	4922      	ldr	r1, [pc, #136]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	60cb      	str	r3, [r1, #12]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000ad6:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	68da      	ldr	r2, [r3, #12]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	491e      	ldr	r1, [pc, #120]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	4918      	ldr	r1, [pc, #96]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	604b      	str	r3, [r1, #4]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000afe:	4b16      	ldr	r3, [pc, #88]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	4914      	ldr	r1, [pc, #80]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d021      	beq.n	8000b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	490e      	ldr	r1, [pc, #56]	@ (8000b58 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	600b      	str	r3, [r1, #0]
 8000b24:	e021      	b.n	8000b6a <HAL_GPIO_Init+0x2e2>
 8000b26:	bf00      	nop
 8000b28:	10320000 	.word	0x10320000
 8000b2c:	10310000 	.word	0x10310000
 8000b30:	10220000 	.word	0x10220000
 8000b34:	10210000 	.word	0x10210000
 8000b38:	10120000 	.word	0x10120000
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010000 	.word	0x40010000
 8000b48:	40010800 	.word	0x40010800
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40011400 	.word	0x40011400
 8000b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	69bb      	ldr	r3, [r7, #24]
 8000b62:	43db      	mvns	r3, r3
 8000b64:	4909      	ldr	r1, [pc, #36]	@ (8000b8c <HAL_GPIO_Init+0x304>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b76:	fa22 f303 	lsr.w	r3, r2, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f47f ae8e 	bne.w	800089c <HAL_GPIO_Init+0x14>
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	372c      	adds	r7, #44	@ 0x2c
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr
 8000b8c:	40010400 	.word	0x40010400

08000b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e001      	b.n	8000bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b083      	sub	sp, #12
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	807b      	strh	r3, [r7, #2]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bce:	787b      	ldrb	r3, [r7, #1]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d003      	beq.n	8000bdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bd4:	887a      	ldrh	r2, [r7, #2]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bda:	e003      	b.n	8000be4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bdc:	887b      	ldrh	r3, [r7, #2]
 8000bde:	041a      	lsls	r2, r3, #16
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	611a      	str	r2, [r3, #16]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
	...

08000bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bfc:	695a      	ldr	r2, [r3, #20]
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	4013      	ands	r3, r2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d006      	beq.n	8000c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f806 	bl	8000c20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e272      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 8087 	beq.w	8000d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c54:	4b92      	ldr	r3, [pc, #584]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 030c 	and.w	r3, r3, #12
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	d00c      	beq.n	8000c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c60:	4b8f      	ldr	r3, [pc, #572]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f003 030c 	and.w	r3, r3, #12
 8000c68:	2b08      	cmp	r3, #8
 8000c6a:	d112      	bne.n	8000c92 <HAL_RCC_OscConfig+0x5e>
 8000c6c:	4b8c      	ldr	r3, [pc, #560]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c78:	d10b      	bne.n	8000c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7a:	4b89      	ldr	r3, [pc, #548]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d06c      	beq.n	8000d60 <HAL_RCC_OscConfig+0x12c>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d168      	bne.n	8000d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e24c      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c9a:	d106      	bne.n	8000caa <HAL_RCC_OscConfig+0x76>
 8000c9c:	4b80      	ldr	r3, [pc, #512]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a7f      	ldr	r2, [pc, #508]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e02e      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x98>
 8000cb2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cbc:	6013      	str	r3, [r2, #0]
 8000cbe:	4b78      	ldr	r3, [pc, #480]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a77      	ldr	r2, [pc, #476]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cc8:	6013      	str	r3, [r2, #0]
 8000cca:	e01d      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000cd4:	d10c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xbc>
 8000cd6:	4b72      	ldr	r3, [pc, #456]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a71      	ldr	r2, [pc, #452]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ce0:	6013      	str	r3, [r2, #0]
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a6e      	ldr	r2, [pc, #440]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e00b      	b.n	8000d08 <HAL_RCC_OscConfig+0xd4>
 8000cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a6a      	ldr	r2, [pc, #424]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b68      	ldr	r3, [pc, #416]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a67      	ldr	r2, [pc, #412]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d10:	f7ff fc9c 	bl	800064c <HAL_GetTick>
 8000d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	e008      	b.n	8000d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d18:	f7ff fc98 	bl	800064c <HAL_GetTick>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	2b64      	cmp	r3, #100	@ 0x64
 8000d24:	d901      	bls.n	8000d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e200      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d2a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f0      	beq.n	8000d18 <HAL_RCC_OscConfig+0xe4>
 8000d36:	e014      	b.n	8000d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc88 	bl	800064c <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d40:	f7ff fc84 	bl	800064c <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b64      	cmp	r3, #100	@ 0x64
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e1ec      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d52:	4b53      	ldr	r3, [pc, #332]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x10c>
 8000d5e:	e000      	b.n	8000d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d063      	beq.n	8000e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6e:	4b4c      	ldr	r3, [pc, #304]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 030c 	and.w	r3, r3, #12
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00b      	beq.n	8000d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d7a:	4b49      	ldr	r3, [pc, #292]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f003 030c 	and.w	r3, r3, #12
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d11c      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x18c>
 8000d86:	4b46      	ldr	r3, [pc, #280]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d116      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d92:	4b43      	ldr	r3, [pc, #268]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d005      	beq.n	8000daa <HAL_RCC_OscConfig+0x176>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d001      	beq.n	8000daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e1c0      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000daa:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4939      	ldr	r1, [pc, #228]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dbe:	e03a      	b.n	8000e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d020      	beq.n	8000e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc8:	4b36      	ldr	r3, [pc, #216]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fc3d 	bl	800064c <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fc39 	bl	800064c <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e1a1      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4927      	ldr	r1, [pc, #156]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	4313      	orrs	r3, r2
 8000e06:	600b      	str	r3, [r1, #0]
 8000e08:	e015      	b.n	8000e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <HAL_RCC_OscConfig+0x270>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e10:	f7ff fc1c 	bl	800064c <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e16:	e008      	b.n	8000e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e18:	f7ff fc18 	bl	800064c <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d901      	bls.n	8000e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e26:	2303      	movs	r3, #3
 8000e28:	e180      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d03a      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d019      	beq.n	8000e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_RCC_OscConfig+0x274>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e50:	f7ff fbfc 	bl	800064c <HAL_GetTick>
 8000e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e58:	f7ff fbf8 	bl	800064c <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e160      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea0 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 face 	bl	8001418 <RCC_Delay>
 8000e7c:	e01c      	b.n	8000eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <HAL_RCC_OscConfig+0x274>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fbe2 	bl	800064c <HAL_GetTick>
 8000e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e8a:	e00f      	b.n	8000eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e8c:	f7ff fbde 	bl	800064c <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d908      	bls.n	8000eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e146      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
 8000e9e:	bf00      	nop
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	42420000 	.word	0x42420000
 8000ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	4b92      	ldr	r3, [pc, #584]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1e9      	bne.n	8000e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 80a6 	beq.w	8001012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b8b      	ldr	r3, [pc, #556]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10d      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b88      	ldr	r3, [pc, #544]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	4a87      	ldr	r2, [pc, #540]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	61d3      	str	r3, [r2, #28]
 8000ee2:	4b85      	ldr	r3, [pc, #532]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	69db      	ldr	r3, [r3, #28]
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef2:	4b82      	ldr	r3, [pc, #520]	@ (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d118      	bne.n	8000f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000efe:	4b7f      	ldr	r3, [pc, #508]	@ (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a7e      	ldr	r2, [pc, #504]	@ (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb9f 	bl	800064c <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f12:	f7ff fb9b 	bl	800064c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b64      	cmp	r3, #100	@ 0x64
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e103      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	4b75      	ldr	r3, [pc, #468]	@ (80010fc <HAL_RCC_OscConfig+0x4c8>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d106      	bne.n	8000f46 <HAL_RCC_OscConfig+0x312>
 8000f38:	4b6f      	ldr	r3, [pc, #444]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	4a6e      	ldr	r2, [pc, #440]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6213      	str	r3, [r2, #32]
 8000f44:	e02d      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x334>
 8000f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	4a69      	ldr	r2, [pc, #420]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6213      	str	r3, [r2, #32]
 8000f5a:	4b67      	ldr	r3, [pc, #412]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	6a1b      	ldr	r3, [r3, #32]
 8000f5e:	4a66      	ldr	r2, [pc, #408]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6213      	str	r3, [r2, #32]
 8000f66:	e01c      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d10c      	bne.n	8000f8a <HAL_RCC_OscConfig+0x356>
 8000f70:	4b61      	ldr	r3, [pc, #388]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a60      	ldr	r2, [pc, #384]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6213      	str	r3, [r2, #32]
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	4a5d      	ldr	r2, [pc, #372]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6213      	str	r3, [r2, #32]
 8000f88:	e00b      	b.n	8000fa2 <HAL_RCC_OscConfig+0x36e>
 8000f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	6213      	str	r3, [r2, #32]
 8000f96:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	4a57      	ldr	r2, [pc, #348]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 0304 	bic.w	r3, r3, #4
 8000fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d015      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fb4f 	bl	800064c <HAL_GetTick>
 8000fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb0:	e00a      	b.n	8000fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fb2:	f7ff fb4b 	bl	800064c <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e0b1      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc8:	4b4b      	ldr	r3, [pc, #300]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0ee      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x37e>
 8000fd4:	e014      	b.n	8001000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fd6:	f7ff fb39 	bl	800064c <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fdc:	e00a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fde:	f7ff fb35 	bl	800064c <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e09b      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff4:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1ee      	bne.n	8000fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001000:	7dfb      	ldrb	r3, [r7, #23]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d105      	bne.n	8001012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001006:	4b3c      	ldr	r3, [pc, #240]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a3b      	ldr	r2, [pc, #236]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8087 	beq.w	800112a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f003 030c 	and.w	r3, r3, #12
 8001024:	2b08      	cmp	r3, #8
 8001026:	d061      	beq.n	80010ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69db      	ldr	r3, [r3, #28]
 800102c:	2b02      	cmp	r3, #2
 800102e:	d146      	bne.n	80010be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001030:	4b33      	ldr	r3, [pc, #204]	@ (8001100 <HAL_RCC_OscConfig+0x4cc>)
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001036:	f7ff fb09 	bl	800064c <HAL_GetTick>
 800103a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103c:	e008      	b.n	8001050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103e:	f7ff fb05 	bl	800064c <HAL_GetTick>
 8001042:	4602      	mov	r2, r0
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	1ad3      	subs	r3, r2, r3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d901      	bls.n	8001050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800104c:	2303      	movs	r3, #3
 800104e:	e06d      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1f0      	bne.n	800103e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001064:	d108      	bne.n	8001078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001066:	4b24      	ldr	r3, [pc, #144]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	4921      	ldr	r1, [pc, #132]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	4313      	orrs	r3, r2
 8001076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001078:	4b1f      	ldr	r3, [pc, #124]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a19      	ldr	r1, [r3, #32]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001088:	430b      	orrs	r3, r1
 800108a:	491b      	ldr	r1, [pc, #108]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	4313      	orrs	r3, r2
 800108e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_RCC_OscConfig+0x4cc>)
 8001092:	2201      	movs	r2, #1
 8001094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fad9 	bl	800064c <HAL_GetTick>
 800109a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800109c:	e008      	b.n	80010b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109e:	f7ff fad5 	bl	800064c <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e03d      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x46a>
 80010bc:	e035      	b.n	800112a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <HAL_RCC_OscConfig+0x4cc>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fac2 	bl	800064c <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010cc:	f7ff fabe 	bl	800064c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e026      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0x498>
 80010ea:	e01e      	b.n	800112a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e019      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40007000 	.word	0x40007000
 8001100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_RCC_OscConfig+0x500>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	429a      	cmp	r2, r3
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001122:	429a      	cmp	r2, r3
 8001124:	d001      	beq.n	800112a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40021000 	.word	0x40021000

08001138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0d0      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b6a      	ldr	r3, [pc, #424]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d910      	bls.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b67      	ldr	r3, [pc, #412]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 0207 	bic.w	r2, r3, #7
 8001162:	4965      	ldr	r1, [pc, #404]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	4313      	orrs	r3, r2
 8001168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116a:	4b63      	ldr	r3, [pc, #396]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d001      	beq.n	800117c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e0b8      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001194:	4b59      	ldr	r3, [pc, #356]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	4a58      	ldr	r2, [pc, #352]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800119e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011ac:	4b53      	ldr	r3, [pc, #332]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b8:	4b50      	ldr	r3, [pc, #320]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	494d      	ldr	r1, [pc, #308]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d040      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d107      	bne.n	80011ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	4b47      	ldr	r3, [pc, #284]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d115      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e07f      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b41      	ldr	r3, [pc, #260]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e073      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e06b      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b39      	ldr	r3, [pc, #228]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4936      	ldr	r1, [pc, #216]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001224:	4313      	orrs	r3, r2
 8001226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fa10 	bl	800064c <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fa0c 	bl	800064c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e053      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2d      	ldr	r3, [pc, #180]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d210      	bcs.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f023 0207 	bic.w	r2, r3, #7
 800126e:	4922      	ldr	r1, [pc, #136]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	d001      	beq.n	8001288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e032      	b.n	80012ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001294:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	4916      	ldr	r1, [pc, #88]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012a2:	4313      	orrs	r3, r2
 80012a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	490e      	ldr	r1, [pc, #56]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	4313      	orrs	r3, r2
 80012c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012c6:	f000 f821 	bl	800130c <HAL_RCC_GetSysClockFreq>
 80012ca:	4602      	mov	r2, r0
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	490a      	ldr	r1, [pc, #40]	@ (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012d8:	5ccb      	ldrb	r3, [r1, r3]
 80012da:	fa22 f303 	lsr.w	r3, r2, r3
 80012de:	4a09      	ldr	r2, [pc, #36]	@ (8001304 <HAL_RCC_ClockConfig+0x1cc>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012e2:	4b09      	ldr	r3, [pc, #36]	@ (8001308 <HAL_RCC_ClockConfig+0x1d0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f96e 	bl	80005c8 <HAL_InitTick>

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40021000 	.word	0x40021000
 8001300:	080046a0 	.word	0x080046a0
 8001304:	20000000 	.word	0x20000000
 8001308:	20000004 	.word	0x20000004

0800130c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b04      	cmp	r3, #4
 8001334:	d002      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x30>
 8001336:	2b08      	cmp	r3, #8
 8001338:	d003      	beq.n	8001342 <HAL_RCC_GetSysClockFreq+0x36>
 800133a:	e027      	b.n	800138c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800133e:	613b      	str	r3, [r7, #16]
      break;
 8001340:	e027      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a17      	ldr	r2, [pc, #92]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d010      	beq.n	800137c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800135a:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	0c5b      	lsrs	r3, r3, #17
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	4a11      	ldr	r2, [pc, #68]	@ (80013ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800136e:	fb03 f202 	mul.w	r2, r3, r2
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	fbb2 f3f3 	udiv	r3, r2, r3
 8001378:	617b      	str	r3, [r7, #20]
 800137a:	e004      	b.n	8001386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a0c      	ldr	r2, [pc, #48]	@ (80013b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001380:	fb02 f303 	mul.w	r3, r2, r3
 8001384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	613b      	str	r3, [r7, #16]
      break;
 800138a:	e002      	b.n	8001392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800138e:	613b      	str	r3, [r7, #16]
      break;
 8001390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001392:	693b      	ldr	r3, [r7, #16]
}
 8001394:	4618      	mov	r0, r3
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	007a1200 	.word	0x007a1200
 80013a8:	080046b8 	.word	0x080046b8
 80013ac:	080046c8 	.word	0x080046c8
 80013b0:	003d0900 	.word	0x003d0900

080013b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b8:	4b02      	ldr	r3, [pc, #8]	@ (80013c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	20000000 	.word	0x20000000

080013c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013cc:	f7ff fff2 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013d0:	4602      	mov	r2, r0
 80013d2:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	0a1b      	lsrs	r3, r3, #8
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	4903      	ldr	r1, [pc, #12]	@ (80013ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80013de:	5ccb      	ldrb	r3, [r1, r3]
 80013e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40021000 	.word	0x40021000
 80013ec:	080046b0 	.word	0x080046b0

080013f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_RCC_GetHCLKFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b05      	ldr	r3, [pc, #20]	@ (8001410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	0adb      	lsrs	r3, r3, #11
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	4903      	ldr	r1, [pc, #12]	@ (8001414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800140c:	4618      	mov	r0, r3
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	080046b0 	.word	0x080046b0

08001418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001420:	4b0a      	ldr	r3, [pc, #40]	@ (800144c <RCC_Delay+0x34>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <RCC_Delay+0x38>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0a5b      	lsrs	r3, r3, #9
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001434:	bf00      	nop
  }
  while (Delay --);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	60fa      	str	r2, [r7, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f9      	bne.n	8001434 <RCC_Delay+0x1c>
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000000 	.word	0x20000000
 8001450:	10624dd3 	.word	0x10624dd3

08001454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e042      	b.n	80014ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d106      	bne.n	8001480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7fe ffb8 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2224      	movs	r2, #36	@ 0x24
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f82b 	bl	80014f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	691a      	ldr	r2, [r3, #16]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80014ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80014bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80014cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2220      	movs	r2, #32
 80014e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691b      	ldr	r3, [r3, #16]
 8001502:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	4313      	orrs	r3, r2
 8001522:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800152e:	f023 030c 	bic.w	r3, r3, #12
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	430b      	orrs	r3, r1
 800153a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699a      	ldr	r2, [r3, #24]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <UART_SetConfig+0x114>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d103      	bne.n	8001564 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800155c:	f7ff ff48 	bl	80013f0 <HAL_RCC_GetPCLK2Freq>
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	e002      	b.n	800156a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001564:	f7ff ff30 	bl	80013c8 <HAL_RCC_GetPCLK1Freq>
 8001568:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	441a      	add	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	4a22      	ldr	r2, [pc, #136]	@ (800160c <UART_SetConfig+0x118>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	0119      	lsls	r1, r3, #4
 800158a:	68fa      	ldr	r2, [r7, #12]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	009a      	lsls	r2, r3, #2
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fbb2 f2f3 	udiv	r2, r2, r3
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <UART_SetConfig+0x118>)
 80015a2:	fba3 0302 	umull	r0, r3, r3, r2
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2064      	movs	r0, #100	@ 0x64
 80015aa:	fb00 f303 	mul.w	r3, r0, r3
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	3332      	adds	r3, #50	@ 0x32
 80015b4:	4a15      	ldr	r2, [pc, #84]	@ (800160c <UART_SetConfig+0x118>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80015c0:	4419      	add	r1, r3
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	009a      	lsls	r2, r3, #2
 80015cc:	441a      	add	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <UART_SetConfig+0x118>)
 80015da:	fba3 0302 	umull	r0, r3, r3, r2
 80015de:	095b      	lsrs	r3, r3, #5
 80015e0:	2064      	movs	r0, #100	@ 0x64
 80015e2:	fb00 f303 	mul.w	r3, r0, r3
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	3332      	adds	r3, #50	@ 0x32
 80015ec:	4a07      	ldr	r2, [pc, #28]	@ (800160c <UART_SetConfig+0x118>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	f003 020f 	and.w	r2, r3, #15
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	440a      	add	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013800 	.word	0x40013800
 800160c:	51eb851f 	.word	0x51eb851f

08001610 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b085      	sub	sp, #20
 8001614:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_INFO(" ");
 8001616:	b672      	cpsid	i
 8001618:	4b8e      	ldr	r3, [pc, #568]	@ (8001854 <app_init+0x244>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a8e      	ldr	r2, [pc, #568]	@ (8001858 <app_init+0x248>)
 800161e:	213f      	movs	r1, #63	@ 0x3f
 8001620:	4618      	mov	r0, r3
 8001622:	f001 fea7 	bl	8003374 <sniprintf>
 8001626:	4603      	mov	r3, r0
 8001628:	4a8c      	ldr	r2, [pc, #560]	@ (800185c <app_init+0x24c>)
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b89      	ldr	r3, [pc, #548]	@ (8001854 <app_init+0x244>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f000 fa0b 	bl	8001a4c <logger_log_print_>
 8001636:	b662      	cpsie	i
 8001638:	b672      	cpsid	i
 800163a:	4b86      	ldr	r3, [pc, #536]	@ (8001854 <app_init+0x244>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a88      	ldr	r2, [pc, #544]	@ (8001860 <app_init+0x250>)
 8001640:	213f      	movs	r1, #63	@ 0x3f
 8001642:	4618      	mov	r0, r3
 8001644:	f001 fe96 	bl	8003374 <sniprintf>
 8001648:	4603      	mov	r3, r0
 800164a:	4a84      	ldr	r2, [pc, #528]	@ (800185c <app_init+0x24c>)
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b81      	ldr	r3, [pc, #516]	@ (8001854 <app_init+0x244>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f9fa 	bl	8001a4c <logger_log_print_>
 8001658:	b662      	cpsie	i
 800165a:	b672      	cpsid	i
 800165c:	4b7d      	ldr	r3, [pc, #500]	@ (8001854 <app_init+0x244>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a80      	ldr	r2, [pc, #512]	@ (8001864 <app_init+0x254>)
 8001662:	213f      	movs	r1, #63	@ 0x3f
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fe85 	bl	8003374 <sniprintf>
 800166a:	4603      	mov	r3, r0
 800166c:	4a7b      	ldr	r2, [pc, #492]	@ (800185c <app_init+0x24c>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b78      	ldr	r3, [pc, #480]	@ (8001854 <app_init+0x244>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f9e9 	bl	8001a4c <logger_log_print_>
 800167a:	b662      	cpsie	i
	LOGGER_INFO("%s is running - Tick [mS] = %lu", GET_NAME(app_init), HAL_GetTick());
 800167c:	b672      	cpsid	i
 800167e:	4b75      	ldr	r3, [pc, #468]	@ (8001854 <app_init+0x244>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a75      	ldr	r2, [pc, #468]	@ (8001858 <app_init+0x248>)
 8001684:	213f      	movs	r1, #63	@ 0x3f
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fe74 	bl	8003374 <sniprintf>
 800168c:	4603      	mov	r3, r0
 800168e:	4a73      	ldr	r2, [pc, #460]	@ (800185c <app_init+0x24c>)
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b70      	ldr	r3, [pc, #448]	@ (8001854 <app_init+0x244>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f9d8 	bl	8001a4c <logger_log_print_>
 800169c:	b662      	cpsie	i
 800169e:	b672      	cpsid	i
 80016a0:	4b6c      	ldr	r3, [pc, #432]	@ (8001854 <app_init+0x244>)
 80016a2:	681c      	ldr	r4, [r3, #0]
 80016a4:	f7fe ffd2 	bl	800064c <HAL_GetTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	4b6e      	ldr	r3, [pc, #440]	@ (8001868 <app_init+0x258>)
 80016ae:	4a6f      	ldr	r2, [pc, #444]	@ (800186c <app_init+0x25c>)
 80016b0:	213f      	movs	r1, #63	@ 0x3f
 80016b2:	4620      	mov	r0, r4
 80016b4:	f001 fe5e 	bl	8003374 <sniprintf>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4a68      	ldr	r2, [pc, #416]	@ (800185c <app_init+0x24c>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <app_init+0x244>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f9c2 	bl	8001a4c <logger_log_print_>
 80016c8:	b662      	cpsie	i
 80016ca:	b672      	cpsid	i
 80016cc:	4b61      	ldr	r3, [pc, #388]	@ (8001854 <app_init+0x244>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a64      	ldr	r2, [pc, #400]	@ (8001864 <app_init+0x254>)
 80016d2:	213f      	movs	r1, #63	@ 0x3f
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fe4d 	bl	8003374 <sniprintf>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a5f      	ldr	r2, [pc, #380]	@ (800185c <app_init+0x24c>)
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4b5c      	ldr	r3, [pc, #368]	@ (8001854 <app_init+0x244>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 f9b1 	bl	8001a4c <logger_log_print_>
 80016ea:	b662      	cpsie	i

	LOGGER_INFO(p_sys);
 80016ec:	b672      	cpsid	i
 80016ee:	4b59      	ldr	r3, [pc, #356]	@ (8001854 <app_init+0x244>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a59      	ldr	r2, [pc, #356]	@ (8001858 <app_init+0x248>)
 80016f4:	213f      	movs	r1, #63	@ 0x3f
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fe3c 	bl	8003374 <sniprintf>
 80016fc:	4603      	mov	r3, r0
 80016fe:	4a57      	ldr	r2, [pc, #348]	@ (800185c <app_init+0x24c>)
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	4b54      	ldr	r3, [pc, #336]	@ (8001854 <app_init+0x244>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f9a0 	bl	8001a4c <logger_log_print_>
 800170c:	b662      	cpsie	i
 800170e:	b672      	cpsid	i
 8001710:	4b50      	ldr	r3, [pc, #320]	@ (8001854 <app_init+0x244>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a56      	ldr	r2, [pc, #344]	@ (8001870 <app_init+0x260>)
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	213f      	movs	r1, #63	@ 0x3f
 800171a:	4618      	mov	r0, r3
 800171c:	f001 fe2a 	bl	8003374 <sniprintf>
 8001720:	4603      	mov	r3, r0
 8001722:	4a4e      	ldr	r2, [pc, #312]	@ (800185c <app_init+0x24c>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	4b4b      	ldr	r3, [pc, #300]	@ (8001854 <app_init+0x244>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f98e 	bl	8001a4c <logger_log_print_>
 8001730:	b662      	cpsie	i
 8001732:	b672      	cpsid	i
 8001734:	4b47      	ldr	r3, [pc, #284]	@ (8001854 <app_init+0x244>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a4a      	ldr	r2, [pc, #296]	@ (8001864 <app_init+0x254>)
 800173a:	213f      	movs	r1, #63	@ 0x3f
 800173c:	4618      	mov	r0, r3
 800173e:	f001 fe19 	bl	8003374 <sniprintf>
 8001742:	4603      	mov	r3, r0
 8001744:	4a45      	ldr	r2, [pc, #276]	@ (800185c <app_init+0x24c>)
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b42      	ldr	r3, [pc, #264]	@ (8001854 <app_init+0x244>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f000 f97d 	bl	8001a4c <logger_log_print_>
 8001752:	b662      	cpsie	i
	LOGGER_INFO(p_app);
 8001754:	b672      	cpsid	i
 8001756:	4b3f      	ldr	r3, [pc, #252]	@ (8001854 <app_init+0x244>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a3f      	ldr	r2, [pc, #252]	@ (8001858 <app_init+0x248>)
 800175c:	213f      	movs	r1, #63	@ 0x3f
 800175e:	4618      	mov	r0, r3
 8001760:	f001 fe08 	bl	8003374 <sniprintf>
 8001764:	4603      	mov	r3, r0
 8001766:	4a3d      	ldr	r2, [pc, #244]	@ (800185c <app_init+0x24c>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b3a      	ldr	r3, [pc, #232]	@ (8001854 <app_init+0x244>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f96c 	bl	8001a4c <logger_log_print_>
 8001774:	b662      	cpsie	i
 8001776:	b672      	cpsid	i
 8001778:	4b36      	ldr	r3, [pc, #216]	@ (8001854 <app_init+0x244>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a3d      	ldr	r2, [pc, #244]	@ (8001874 <app_init+0x264>)
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	213f      	movs	r1, #63	@ 0x3f
 8001782:	4618      	mov	r0, r3
 8001784:	f001 fdf6 	bl	8003374 <sniprintf>
 8001788:	4603      	mov	r3, r0
 800178a:	4a34      	ldr	r2, [pc, #208]	@ (800185c <app_init+0x24c>)
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	4b31      	ldr	r3, [pc, #196]	@ (8001854 <app_init+0x244>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f95a 	bl	8001a4c <logger_log_print_>
 8001798:	b662      	cpsie	i
 800179a:	b672      	cpsid	i
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <app_init+0x244>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a30      	ldr	r2, [pc, #192]	@ (8001864 <app_init+0x254>)
 80017a2:	213f      	movs	r1, #63	@ 0x3f
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 fde5 	bl	8003374 <sniprintf>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <app_init+0x24c>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <app_init+0x244>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f949 	bl	8001a4c <logger_log_print_>
 80017ba:	b662      	cpsie	i

	/* Init & Print out: Application execution counter */
	g_app_cnt = G_APP_CNT_INI;
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <app_init+0x268>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	LOGGER_INFO(" %s = %lu", GET_NAME(g_app_cnt), g_app_cnt);
 80017c2:	b672      	cpsid	i
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <app_init+0x244>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <app_init+0x248>)
 80017ca:	213f      	movs	r1, #63	@ 0x3f
 80017cc:	4618      	mov	r0, r3
 80017ce:	f001 fdd1 	bl	8003374 <sniprintf>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <app_init+0x24c>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <app_init+0x244>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 f935 	bl	8001a4c <logger_log_print_>
 80017e2:	b662      	cpsie	i
 80017e4:	b672      	cpsid	i
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <app_init+0x244>)
 80017e8:	6818      	ldr	r0, [r3, #0]
 80017ea:	4b23      	ldr	r3, [pc, #140]	@ (8001878 <app_init+0x268>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <app_init+0x26c>)
 80017f2:	4a23      	ldr	r2, [pc, #140]	@ (8001880 <app_init+0x270>)
 80017f4:	213f      	movs	r1, #63	@ 0x3f
 80017f6:	f001 fdbd 	bl	8003374 <sniprintf>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a17      	ldr	r2, [pc, #92]	@ (800185c <app_init+0x24c>)
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <app_init+0x244>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f000 f921 	bl	8001a4c <logger_log_print_>
 800180a:	b662      	cpsie	i
 800180c:	b672      	cpsid	i
 800180e:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <app_init+0x244>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <app_init+0x254>)
 8001814:	213f      	movs	r1, #63	@ 0x3f
 8001816:	4618      	mov	r0, r3
 8001818:	f001 fdac 	bl	8003374 <sniprintf>
 800181c:	4603      	mov	r3, r0
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <app_init+0x24c>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <app_init+0x244>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f910 	bl	8001a4c <logger_log_print_>
 800182c:	b662      	cpsie	i
/*!< DWT Cycle Counter register */
/*!< CYCCNTENA bit in DWT_CONTROL register */
static inline void cycle_counter_init(void) __attribute__((always_inline));
static inline void cycle_counter_init(void)
{
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;/* enable DWT hardware */
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <app_init+0x274>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <app_init+0x274>)
 8001834:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001838:	60d3      	str	r3, [r2, #12]
	 DWT->CYCCNT = 0;								/* reset cycle counter */
 800183a:	4b13      	ldr	r3, [pc, #76]	@ (8001888 <app_init+0x278>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;			/* start counting */
 8001840:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <app_init+0x278>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <app_init+0x278>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop

	/* Init Cycle Counter */
	cycle_counter_init();

    /* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	e036      	b.n	80018c2 <app_init+0x2b2>
 8001854:	080046f0 	.word	0x080046f0
 8001858:	0800432c 	.word	0x0800432c
 800185c:	2000015c 	.word	0x2000015c
 8001860:	08004334 	.word	0x08004334
 8001864:	08004338 	.word	0x08004338
 8001868:	0800433c 	.word	0x0800433c
 800186c:	08004348 	.word	0x08004348
 8001870:	2000000c 	.word	0x2000000c
 8001874:	20000010 	.word	0x20000010
 8001878:	20000104 	.word	0x20000104
 800187c:	08004368 	.word	0x08004368
 8001880:	08004374 	.word	0x08004374
 8001884:	e000edf0 	.word	0xe000edf0
 8001888:	e0001000 	.word	0xe0001000
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 800188c:	4917      	ldr	r1, [pc, #92]	@ (80018ec <app_init+0x2dc>)
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	6819      	ldr	r1, [r3, #0]
 800189c:	4813      	ldr	r0, [pc, #76]	@ (80018ec <app_init+0x2dc>)
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4403      	add	r3, r0
 80018aa:	3308      	adds	r3, #8
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <app_init+0x2e0>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2100      	movs	r1, #0
 80018b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3301      	adds	r3, #1
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d9e1      	bls.n	800188c <app_init+0x27c>
	}

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 80018c8:	b672      	cpsid	i
	/* Init Tick Counter */
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <app_init+0x2e4>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 80018d0:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <app_init+0x2e8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	g_task_system_tick_cnt = G_APP_TICK_CNT_INI;
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <app_init+0x2ec>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
	g_task_actuator_tick_cnt = G_APP_TICK_CNT_INI;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <app_init+0x2f0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts */
 80018e2:	b662      	cpsie	i
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	080046cc 	.word	0x080046cc
 80018f0:	20000110 	.word	0x20000110
 80018f4:	2000010c 	.word	0x2000010c
 80018f8:	2000018c 	.word	0x2000018c
 80018fc:	2000019c 	.word	0x2000019c
 8001900:	20000164 	.word	0x20000164

08001904 <app_update>:

void app_update(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
	uint32_t index;
	bool b_time_update_required = false;
 800190a:	2300      	movs	r3, #0
 800190c:	72fb      	strb	r3, [r7, #11]
	uint32_t cycle_counter_time_us;

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 800190e:	b672      	cpsid	i
    if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <app_update+0xe4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <app_update+0x22>
    {
		/* Update Tick Counter */
    	g_app_tick_cnt--;
 8001918:	4b33      	ldr	r3, [pc, #204]	@ (80019e8 <app_update+0xe4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3b01      	subs	r3, #1
 800191e:	4a32      	ldr	r2, [pc, #200]	@ (80019e8 <app_update+0xe4>)
 8001920:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001922:	2301      	movs	r3, #1
 8001924:	72fb      	strb	r3, [r7, #11]
    }
    __asm("CPSIE i");	/* enable interrupts */
 8001926:	b662      	cpsie	i

	/* Check if it's time to run tasks */
    while (b_time_update_required)
 8001928:	e055      	b.n	80019d6 <app_update+0xd2>
    {
    	/* Update App Counter */
    	g_app_cnt++;
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <app_update+0xe8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	4a2e      	ldr	r2, [pc, #184]	@ (80019ec <app_update+0xe8>)
 8001932:	6013      	str	r3, [r2, #0]
    	g_app_runtime_us = 0;
 8001934:	4b2e      	ldr	r3, [pc, #184]	@ (80019f0 <app_update+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	e037      	b.n	80019b0 <app_update+0xac>
/* reset cycle counter */
/*!< DWT Cycle Counter register */
static inline void cycle_counter_reset(void) __attribute__((always_inline));
static inline void cycle_counter_reset(void)
{
	DWT->CYCCNT = 0;
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <app_update+0xf0>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
}
 8001946:	bf00      	nop
		{
			cycle_counter_reset();

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001948:	492b      	ldr	r1, [pc, #172]	@ (80019f8 <app_update+0xf4>)
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3304      	adds	r3, #4
 8001958:	6819      	ldr	r1, [r3, #0]
 800195a:	4827      	ldr	r0, [pc, #156]	@ (80019f8 <app_update+0xf4>)
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	4403      	add	r3, r0
 8001968:	3308      	adds	r3, #8
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	4788      	blx	r1
}

static inline uint32_t cycle_counter_get_time_us(void) __attribute__((always_inline));
static inline uint32_t cycle_counter_get_time_us(void)
{
	return (DWT->CYCCNT / (SystemCoreClock / 1000000));
 8001970:	4b20      	ldr	r3, [pc, #128]	@ (80019f4 <app_update+0xf0>)
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4b21      	ldr	r3, [pc, #132]	@ (80019fc <app_update+0xf8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4921      	ldr	r1, [pc, #132]	@ (8001a00 <app_update+0xfc>)
 800197a:	fba1 1303 	umull	r1, r3, r1, r3
 800197e:	0c9b      	lsrs	r3, r3, #18
 8001980:	fbb2 f3f3 	udiv	r3, r2, r3

			cycle_counter_time_us = cycle_counter_get_time_us();
 8001984:	607b      	str	r3, [r7, #4]

			/* Update variables */
			g_app_runtime_us += cycle_counter_time_us;
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <app_update+0xec>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a18      	ldr	r2, [pc, #96]	@ (80019f0 <app_update+0xec>)
 8001990:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001992:	4a1c      	ldr	r2, [pc, #112]	@ (8001a04 <app_update+0x100>)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d904      	bls.n	80019aa <app_update+0xa6>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80019a0:	4918      	ldr	r1, [pc, #96]	@ (8001a04 <app_update+0x100>)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (index = 0; TASK_QTY > index; index++)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3301      	adds	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d9c4      	bls.n	8001940 <app_update+0x3c>
			}
		}

		/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 80019b6:	b672      	cpsid	i
		if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <app_update+0xe4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <app_update+0xcc>
		{
			/* Update Tick Counter */
			g_app_tick_cnt--;
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <app_update+0xe4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <app_update+0xe4>)
 80019c8:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80019ca:	2301      	movs	r3, #1
 80019cc:	72fb      	strb	r3, [r7, #11]
 80019ce:	e001      	b.n	80019d4 <app_update+0xd0>
		}
		else
		{
			b_time_update_required = false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	72fb      	strb	r3, [r7, #11]
		}
		__asm("CPSIE i");	/* enable interrupts */
 80019d4:	b662      	cpsie	i
    while (b_time_update_required)
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1a6      	bne.n	800192a <app_update+0x26>
	}
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2000010c 	.word	0x2000010c
 80019ec:	20000104 	.word	0x20000104
 80019f0:	20000108 	.word	0x20000108
 80019f4:	e0001000 	.word	0xe0001000
 80019f8:	080046cc 	.word	0x080046cc
 80019fc:	20000000 	.word	0x20000000
 8001a00:	431bde83 	.word	0x431bde83
 8001a04:	20000110 	.word	0x20000110

08001a08 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
	/* Update Tick Counter */
	g_app_tick_cnt++;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <HAL_SYSTICK_Callback+0x34>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a0a      	ldr	r2, [pc, #40]	@ (8001a3c <HAL_SYSTICK_Callback+0x34>)
 8001a14:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	@ (8001a40 <HAL_SYSTICK_Callback+0x38>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <HAL_SYSTICK_Callback+0x38>)
 8001a1e:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_SYSTICK_Callback+0x3c>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <HAL_SYSTICK_Callback+0x3c>)
 8001a28:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_SYSTICK_Callback+0x40>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_SYSTICK_Callback+0x40>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000010c 	.word	0x2000010c
 8001a40:	2000018c 	.word	0x2000018c
 8001a44:	2000019c 	.word	0x2000019c
 8001a48:	20000164 	.word	0x20000164

08001a4c <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f001 fc7b 	bl	8003350 <iprintf>
	fflush(stdout);
 8001a5a:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <logger_log_print_+0x24>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fb9f 	bl	80031a4 <fflush>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000048 	.word	0x20000048

08001a74 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08e      	sub	sp, #56	@ 0x38
 8001a78:	af08      	add	r7, sp, #32
 8001a7a:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 8001a7c:	b672      	cpsid	i
 8001a7e:	4ba2      	ldr	r3, [pc, #648]	@ (8001d08 <task_actuator_init+0x294>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4aa2      	ldr	r2, [pc, #648]	@ (8001d0c <task_actuator_init+0x298>)
 8001a84:	213f      	movs	r1, #63	@ 0x3f
 8001a86:	4618      	mov	r0, r3
 8001a88:	f001 fc74 	bl	8003374 <sniprintf>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4aa0      	ldr	r2, [pc, #640]	@ (8001d10 <task_actuator_init+0x29c>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b9d      	ldr	r3, [pc, #628]	@ (8001d08 <task_actuator_init+0x294>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ffd8 	bl	8001a4c <logger_log_print_>
 8001a9c:	b662      	cpsie	i
 8001a9e:	b672      	cpsid	i
 8001aa0:	4b99      	ldr	r3, [pc, #612]	@ (8001d08 <task_actuator_init+0x294>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a9b      	ldr	r2, [pc, #620]	@ (8001d14 <task_actuator_init+0x2a0>)
 8001aa6:	213f      	movs	r1, #63	@ 0x3f
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f001 fc63 	bl	8003374 <sniprintf>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4a97      	ldr	r2, [pc, #604]	@ (8001d10 <task_actuator_init+0x29c>)
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b94      	ldr	r3, [pc, #592]	@ (8001d08 <task_actuator_init+0x294>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ffc7 	bl	8001a4c <logger_log_print_>
 8001abe:	b662      	cpsie	i
 8001ac0:	b672      	cpsid	i
 8001ac2:	4b91      	ldr	r3, [pc, #580]	@ (8001d08 <task_actuator_init+0x294>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a94      	ldr	r2, [pc, #592]	@ (8001d18 <task_actuator_init+0x2a4>)
 8001ac8:	213f      	movs	r1, #63	@ 0x3f
 8001aca:	4618      	mov	r0, r3
 8001acc:	f001 fc52 	bl	8003374 <sniprintf>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d10 <task_actuator_init+0x29c>)
 8001ad4:	6013      	str	r3, [r2, #0]
 8001ad6:	4b8c      	ldr	r3, [pc, #560]	@ (8001d08 <task_actuator_init+0x294>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ffb6 	bl	8001a4c <logger_log_print_>
 8001ae0:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_actuator_init), p_task_actuator);
 8001ae2:	b672      	cpsid	i
 8001ae4:	4b88      	ldr	r3, [pc, #544]	@ (8001d08 <task_actuator_init+0x294>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a88      	ldr	r2, [pc, #544]	@ (8001d0c <task_actuator_init+0x298>)
 8001aea:	213f      	movs	r1, #63	@ 0x3f
 8001aec:	4618      	mov	r0, r3
 8001aee:	f001 fc41 	bl	8003374 <sniprintf>
 8001af2:	4603      	mov	r3, r0
 8001af4:	4a86      	ldr	r2, [pc, #536]	@ (8001d10 <task_actuator_init+0x29c>)
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	4b83      	ldr	r3, [pc, #524]	@ (8001d08 <task_actuator_init+0x294>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ffa5 	bl	8001a4c <logger_log_print_>
 8001b02:	b662      	cpsie	i
 8001b04:	b672      	cpsid	i
 8001b06:	4b80      	ldr	r3, [pc, #512]	@ (8001d08 <task_actuator_init+0x294>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	4b84      	ldr	r3, [pc, #528]	@ (8001d1c <task_actuator_init+0x2a8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4b83      	ldr	r3, [pc, #524]	@ (8001d20 <task_actuator_init+0x2ac>)
 8001b12:	4a84      	ldr	r2, [pc, #528]	@ (8001d24 <task_actuator_init+0x2b0>)
 8001b14:	213f      	movs	r1, #63	@ 0x3f
 8001b16:	f001 fc2d 	bl	8003374 <sniprintf>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a7c      	ldr	r2, [pc, #496]	@ (8001d10 <task_actuator_init+0x29c>)
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b79      	ldr	r3, [pc, #484]	@ (8001d08 <task_actuator_init+0x294>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff91 	bl	8001a4c <logger_log_print_>
 8001b2a:	b662      	cpsie	i
 8001b2c:	b672      	cpsid	i
 8001b2e:	4b76      	ldr	r3, [pc, #472]	@ (8001d08 <task_actuator_init+0x294>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a79      	ldr	r2, [pc, #484]	@ (8001d18 <task_actuator_init+0x2a4>)
 8001b34:	213f      	movs	r1, #63	@ 0x3f
 8001b36:	4618      	mov	r0, r3
 8001b38:	f001 fc1c 	bl	8003374 <sniprintf>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a74      	ldr	r2, [pc, #464]	@ (8001d10 <task_actuator_init+0x29c>)
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	4b71      	ldr	r3, [pc, #452]	@ (8001d08 <task_actuator_init+0x294>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff80 	bl	8001a4c <logger_log_print_>
 8001b4c:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_actuator), p_task_actuator_);
 8001b4e:	b672      	cpsid	i
 8001b50:	4b6d      	ldr	r3, [pc, #436]	@ (8001d08 <task_actuator_init+0x294>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a6d      	ldr	r2, [pc, #436]	@ (8001d0c <task_actuator_init+0x298>)
 8001b56:	213f      	movs	r1, #63	@ 0x3f
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fc0b 	bl	8003374 <sniprintf>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4a6b      	ldr	r2, [pc, #428]	@ (8001d10 <task_actuator_init+0x29c>)
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b68      	ldr	r3, [pc, #416]	@ (8001d08 <task_actuator_init+0x294>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff6f 	bl	8001a4c <logger_log_print_>
 8001b6e:	b662      	cpsie	i
 8001b70:	b672      	cpsid	i
 8001b72:	4b65      	ldr	r3, [pc, #404]	@ (8001d08 <task_actuator_init+0x294>)
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	4b6c      	ldr	r3, [pc, #432]	@ (8001d28 <task_actuator_init+0x2b4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001d2c <task_actuator_init+0x2b8>)
 8001b7e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d30 <task_actuator_init+0x2bc>)
 8001b80:	213f      	movs	r1, #63	@ 0x3f
 8001b82:	f001 fbf7 	bl	8003374 <sniprintf>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4a61      	ldr	r2, [pc, #388]	@ (8001d10 <task_actuator_init+0x29c>)
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d08 <task_actuator_init+0x294>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5b 	bl	8001a4c <logger_log_print_>
 8001b96:	b662      	cpsie	i
 8001b98:	b672      	cpsid	i
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d08 <task_actuator_init+0x294>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d18 <task_actuator_init+0x2a4>)
 8001ba0:	213f      	movs	r1, #63	@ 0x3f
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 fbe6 	bl	8003374 <sniprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <task_actuator_init+0x29c>)
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b56      	ldr	r3, [pc, #344]	@ (8001d08 <task_actuator_init+0x294>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff4a 	bl	8001a4c <logger_log_print_>
 8001bb8:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8001bba:	4b5e      	ldr	r3, [pc, #376]	@ (8001d34 <task_actuator_init+0x2c0>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8001bc0:	b672      	cpsid	i
 8001bc2:	4b51      	ldr	r3, [pc, #324]	@ (8001d08 <task_actuator_init+0x294>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a51      	ldr	r2, [pc, #324]	@ (8001d0c <task_actuator_init+0x298>)
 8001bc8:	213f      	movs	r1, #63	@ 0x3f
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f001 fbd2 	bl	8003374 <sniprintf>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	4a4f      	ldr	r2, [pc, #316]	@ (8001d10 <task_actuator_init+0x29c>)
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001d08 <task_actuator_init+0x294>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff36 	bl	8001a4c <logger_log_print_>
 8001be0:	b662      	cpsie	i
 8001be2:	b672      	cpsid	i
 8001be4:	4b48      	ldr	r3, [pc, #288]	@ (8001d08 <task_actuator_init+0x294>)
 8001be6:	6818      	ldr	r0, [r3, #0]
 8001be8:	4b52      	ldr	r3, [pc, #328]	@ (8001d34 <task_actuator_init+0x2c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4b52      	ldr	r3, [pc, #328]	@ (8001d38 <task_actuator_init+0x2c4>)
 8001bf0:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <task_actuator_init+0x2c8>)
 8001bf2:	213f      	movs	r1, #63	@ 0x3f
 8001bf4:	f001 fbbe 	bl	8003374 <sniprintf>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4a45      	ldr	r2, [pc, #276]	@ (8001d10 <task_actuator_init+0x29c>)
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b42      	ldr	r3, [pc, #264]	@ (8001d08 <task_actuator_init+0x294>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff ff22 	bl	8001a4c <logger_log_print_>
 8001c08:	b662      	cpsie	i
 8001c0a:	b672      	cpsid	i
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <task_actuator_init+0x294>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a41      	ldr	r2, [pc, #260]	@ (8001d18 <task_actuator_init+0x2a4>)
 8001c12:	213f      	movs	r1, #63	@ 0x3f
 8001c14:	4618      	mov	r0, r3
 8001c16:	f001 fbad 	bl	8003374 <sniprintf>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d10 <task_actuator_init+0x29c>)
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b39      	ldr	r3, [pc, #228]	@ (8001d08 <task_actuator_init+0x294>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff11 	bl	8001a4c <logger_log_print_>
 8001c2a:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e0c3      	b.n	8001dba <task_actuator_init+0x346>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4a40      	ldr	r2, [pc, #256]	@ (8001d40 <task_actuator_init+0x2cc>)
 8001c3e:	4413      	add	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4a3f      	ldr	r2, [pc, #252]	@ (8001d44 <task_actuator_init+0x2d0>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]

		/* Init & Print out: Index & Task execution FSM */
		state = ST_LED_XX_OFF;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	72fb      	strb	r3, [r7, #11]
		p_task_actuator_dta->state = state;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	7afa      	ldrb	r2, [r7, #11]
 8001c54:	711a      	strb	r2, [r3, #4]

		event = EV_LED_XX_OFF;
 8001c56:	2300      	movs	r3, #0
 8001c58:	72bb      	strb	r3, [r7, #10]
		p_task_actuator_dta->event = event;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	7aba      	ldrb	r2, [r7, #10]
 8001c5e:	715a      	strb	r2, [r3, #5]

		b_event = false;
 8001c60:	2300      	movs	r3, #0
 8001c62:	727b      	strb	r3, [r7, #9]
		p_task_actuator_dta->flag = b_event;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	7a7a      	ldrb	r2, [r7, #9]
 8001c68:	719a      	strb	r2, [r3, #6]

		LOGGER_INFO(" ");
 8001c6a:	b672      	cpsid	i
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <task_actuator_init+0x294>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a26      	ldr	r2, [pc, #152]	@ (8001d0c <task_actuator_init+0x298>)
 8001c72:	213f      	movs	r1, #63	@ 0x3f
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fb7d 	bl	8003374 <sniprintf>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4a24      	ldr	r2, [pc, #144]	@ (8001d10 <task_actuator_init+0x29c>)
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b21      	ldr	r3, [pc, #132]	@ (8001d08 <task_actuator_init+0x294>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fee1 	bl	8001a4c <logger_log_print_>
 8001c8a:	b662      	cpsie	i
 8001c8c:	b672      	cpsid	i
 8001c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d08 <task_actuator_init+0x294>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <task_actuator_init+0x2a0>)
 8001c94:	213f      	movs	r1, #63	@ 0x3f
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 fb6c 	bl	8003374 <sniprintf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d10 <task_actuator_init+0x29c>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b19      	ldr	r3, [pc, #100]	@ (8001d08 <task_actuator_init+0x294>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fed0 	bl	8001a4c <logger_log_print_>
 8001cac:	b662      	cpsie	i
 8001cae:	b672      	cpsid	i
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <task_actuator_init+0x294>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <task_actuator_init+0x2a4>)
 8001cb6:	213f      	movs	r1, #63	@ 0x3f
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fb5b 	bl	8003374 <sniprintf>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a13      	ldr	r2, [pc, #76]	@ (8001d10 <task_actuator_init+0x29c>)
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <task_actuator_init+0x294>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff febf 	bl	8001a4c <logger_log_print_>
 8001cce:	b662      	cpsie	i
		LOGGER_INFO("   %s = %lu   %s = %lu   %s = %lu   %s = %s",
 8001cd0:	b672      	cpsid	i
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <task_actuator_init+0x294>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001d0c <task_actuator_init+0x298>)
 8001cd8:	213f      	movs	r1, #63	@ 0x3f
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 fb4a 	bl	8003374 <sniprintf>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a0b      	ldr	r2, [pc, #44]	@ (8001d10 <task_actuator_init+0x29c>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <task_actuator_init+0x294>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff feae 	bl	8001a4c <logger_log_print_>
 8001cf0:	b662      	cpsie	i
 8001cf2:	b672      	cpsid	i
 8001cf4:	4b04      	ldr	r3, [pc, #16]	@ (8001d08 <task_actuator_init+0x294>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
 8001cfa:	7aba      	ldrb	r2, [r7, #10]
 8001cfc:	7a79      	ldrb	r1, [r7, #9]
 8001cfe:	2900      	cmp	r1, #0
 8001d00:	d024      	beq.n	8001d4c <task_actuator_init+0x2d8>
 8001d02:	4911      	ldr	r1, [pc, #68]	@ (8001d48 <task_actuator_init+0x2d4>)
 8001d04:	e023      	b.n	8001d4e <task_actuator_init+0x2da>
 8001d06:	bf00      	nop
 8001d08:	080046f0 	.word	0x080046f0
 8001d0c:	080043c8 	.word	0x080043c8
 8001d10:	2000015c 	.word	0x2000015c
 8001d14:	080043d0 	.word	0x080043d0
 8001d18:	080043d4 	.word	0x080043d4
 8001d1c:	2000001c 	.word	0x2000001c
 8001d20:	080043d8 	.word	0x080043d8
 8001d24:	080043ec 	.word	0x080043ec
 8001d28:	20000020 	.word	0x20000020
 8001d2c:	08004404 	.word	0x08004404
 8001d30:	08004414 	.word	0x08004414
 8001d34:	20000160 	.word	0x20000160
 8001d38:	08004424 	.word	0x08004424
 8001d3c:	08004438 	.word	0x08004438
 8001d40:	080046f4 	.word	0x080046f4
 8001d44:	20000014 	.word	0x20000014
 8001d48:	08004444 	.word	0x08004444
 8001d4c:	491f      	ldr	r1, [pc, #124]	@ (8001dcc <task_actuator_init+0x358>)
 8001d4e:	9106      	str	r1, [sp, #24]
 8001d50:	491f      	ldr	r1, [pc, #124]	@ (8001dd0 <task_actuator_init+0x35c>)
 8001d52:	9105      	str	r1, [sp, #20]
 8001d54:	9204      	str	r2, [sp, #16]
 8001d56:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <task_actuator_init+0x360>)
 8001d58:	9203      	str	r2, [sp, #12]
 8001d5a:	9302      	str	r3, [sp, #8]
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <task_actuator_init+0x364>)
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4b1d      	ldr	r3, [pc, #116]	@ (8001ddc <task_actuator_init+0x368>)
 8001d66:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <task_actuator_init+0x36c>)
 8001d68:	213f      	movs	r1, #63	@ 0x3f
 8001d6a:	f001 fb03 	bl	8003374 <sniprintf>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <task_actuator_init+0x370>)
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <task_actuator_init+0x374>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe67 	bl	8001a4c <logger_log_print_>
 8001d7e:	b662      	cpsie	i
 8001d80:	b672      	cpsid	i
 8001d82:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <task_actuator_init+0x374>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a19      	ldr	r2, [pc, #100]	@ (8001dec <task_actuator_init+0x378>)
 8001d88:	213f      	movs	r1, #63	@ 0x3f
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 faf2 	bl	8003374 <sniprintf>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <task_actuator_init+0x370>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <task_actuator_init+0x374>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fe56 	bl	8001a4c <logger_log_print_>
 8001da0:	b662      	cpsie	i
					 GET_NAME(index), index,
					 GET_NAME(state), (uint32_t)state,
					 GET_NAME(event), (uint32_t)event,
					 GET_NAME(b_event), (b_event ? "true" : "false"));

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	6858      	ldr	r0, [r3, #4]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	8919      	ldrh	r1, [r3, #8]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	7adb      	ldrb	r3, [r3, #11]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f7fe ff05 	bl	8000bbe <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f43f af38 	beq.w	8001c32 <task_actuator_init+0x1be>
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800444c 	.word	0x0800444c
 8001dd0:	08004488 	.word	0x08004488
 8001dd4:	08004490 	.word	0x08004490
 8001dd8:	08004498 	.word	0x08004498
 8001ddc:	08004454 	.word	0x08004454
 8001de0:	0800445c 	.word	0x0800445c
 8001de4:	2000015c 	.word	0x2000015c
 8001de8:	080046f0 	.word	0x080046f0
 8001dec:	080043d4 	.word	0x080043d4

08001df0 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts*/
 8001dfc:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001dfe:	4b16      	ldr	r3, [pc, #88]	@ (8001e58 <task_actuator_update+0x68>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <task_actuator_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_actuator_tick_cnt--;
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <task_actuator_update+0x68>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	4a12      	ldr	r2, [pc, #72]	@ (8001e58 <task_actuator_update+0x68>)
 8001e0e:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 8001e14:	b662      	cpsie	i

    while (b_time_update_required)
 8001e16:	e016      	b.n	8001e46 <task_actuator_update+0x56>
    {
		/* Update Task Counter */
		g_task_actuator_cnt++;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <task_actuator_update+0x6c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <task_actuator_update+0x6c>)
 8001e20:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_actuator_statechart();
 8001e22:	f000 f81d 	bl	8001e60 <task_actuator_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 8001e26:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <task_actuator_update+0x68>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <task_actuator_update+0x50>
		{
			/* Update Tick Counter */
			g_task_actuator_tick_cnt--;
 8001e30:	4b09      	ldr	r3, [pc, #36]	@ (8001e58 <task_actuator_update+0x68>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	3b01      	subs	r3, #1
 8001e36:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <task_actuator_update+0x68>)
 8001e38:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	73fb      	strb	r3, [r7, #15]
 8001e3e:	e001      	b.n	8001e44 <task_actuator_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 8001e44:	b662      	cpsie	i
    while (b_time_update_required)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e5      	bne.n	8001e18 <task_actuator_update+0x28>
    }
}
 8001e4c:	bf00      	nop
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000164 	.word	0x20000164
 8001e5c:	20000160 	.word	0x20000160

08001e60 <task_actuator_statechart>:

void task_actuator_statechart(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e062      	b.n	8001f32 <task_actuator_statechart+0xd2>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <task_actuator_statechart+0xe4>)
 8001e78:	4413      	add	r3, r2
 8001e7a:	60bb      	str	r3, [r7, #8]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <task_actuator_statechart+0xe8>)
 8001e82:	4413      	add	r3, r2
 8001e84:	607b      	str	r3, [r7, #4]

		switch (p_task_actuator_dta->state)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	791b      	ldrb	r3, [r3, #4]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d83c      	bhi.n	8001f08 <task_actuator_statechart+0xa8>
 8001e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e94 <task_actuator_statechart+0x34>)
 8001e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e94:	08001ea9 	.word	0x08001ea9
 8001e98:	08001ed9 	.word	0x08001ed9
 8001e9c:	08001f23 	.word	0x08001f23
 8001ea0:	08001f23 	.word	0x08001f23
 8001ea4:	08001f23 	.word	0x08001f23
		{
			case ST_LED_XX_OFF:

				if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	799b      	ldrb	r3, [r3, #6]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d03a      	beq.n	8001f26 <task_actuator_statechart+0xc6>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	795b      	ldrb	r3, [r3, #5]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d136      	bne.n	8001f26 <task_actuator_statechart+0xc6>
				{
					p_task_actuator_dta->flag = false;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	719a      	strb	r2, [r3, #6]
					HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6858      	ldr	r0, [r3, #4]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	8919      	ldrh	r1, [r3, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	7a9b      	ldrb	r3, [r3, #10]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f7fe fe77 	bl	8000bbe <HAL_GPIO_WritePin>
					p_task_actuator_dta->state = ST_LED_XX_ON;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	711a      	strb	r2, [r3, #4]
				}

				break;
 8001ed6:	e026      	b.n	8001f26 <task_actuator_statechart+0xc6>

			case ST_LED_XX_ON:

				if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	799b      	ldrb	r3, [r3, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d024      	beq.n	8001f2a <task_actuator_statechart+0xca>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	795b      	ldrb	r3, [r3, #5]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d120      	bne.n	8001f2a <task_actuator_statechart+0xca>
				{
					p_task_actuator_dta->flag = false;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	719a      	strb	r2, [r3, #6]
					HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6858      	ldr	r0, [r3, #4]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	8919      	ldrh	r1, [r3, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	7adb      	ldrb	r3, [r3, #11]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f7fe fe5f 	bl	8000bbe <HAL_GPIO_WritePin>
					p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	711a      	strb	r2, [r3, #4]
				}

				break;
 8001f06:	e010      	b.n	8001f2a <task_actuator_statechart+0xca>

				break;

			default:

				p_task_actuator_dta->tick  = DEL_LED_XX_MIN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
				p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	711a      	strb	r2, [r3, #4]
				p_task_actuator_dta->event = EV_LED_XX_OFF;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	715a      	strb	r2, [r3, #5]
				p_task_actuator_dta->flag = false;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	719a      	strb	r2, [r3, #6]

				break;
 8001f20:	e004      	b.n	8001f2c <task_actuator_statechart+0xcc>
				break;
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <task_actuator_statechart+0xcc>
				break;
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <task_actuator_statechart+0xcc>
				break;
 8001f2a:	bf00      	nop
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d099      	beq.n	8001e6c <task_actuator_statechart+0xc>
		}
	}
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	080046f4 	.word	0x080046f4
 8001f48:	20000014 	.word	0x20000014

08001f4c <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	460a      	mov	r2, r1
 8001f56:	71fb      	strb	r3, [r7, #7]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4a06      	ldr	r2, [pc, #24]	@ (8001f7c <put_event_task_actuator+0x30>)
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	79fa      	ldrb	r2, [r7, #7]
 8001f6a:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	719a      	strb	r2, [r3, #6]
}
 8001f72:	bf00      	nop
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000014 	.word	0x20000014

08001f80 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af06      	add	r7, sp, #24
 8001f86:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 8001f88:	b672      	cpsid	i
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <task_sensor_init+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <task_sensor_init+0x1c4>)
 8001f90:	213f      	movs	r1, #63	@ 0x3f
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f9ee 	bl	8003374 <sniprintf>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8002148 <task_sensor_init+0x1c8>)
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b68      	ldr	r3, [pc, #416]	@ (8002140 <task_sensor_init+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fd52 	bl	8001a4c <logger_log_print_>
 8001fa8:	b662      	cpsie	i
 8001faa:	b672      	cpsid	i
 8001fac:	4b64      	ldr	r3, [pc, #400]	@ (8002140 <task_sensor_init+0x1c0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a66      	ldr	r2, [pc, #408]	@ (800214c <task_sensor_init+0x1cc>)
 8001fb2:	213f      	movs	r1, #63	@ 0x3f
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f001 f9dd 	bl	8003374 <sniprintf>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4a62      	ldr	r2, [pc, #392]	@ (8002148 <task_sensor_init+0x1c8>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b5f      	ldr	r3, [pc, #380]	@ (8002140 <task_sensor_init+0x1c0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fd41 	bl	8001a4c <logger_log_print_>
 8001fca:	b662      	cpsie	i
 8001fcc:	b672      	cpsid	i
 8001fce:	4b5c      	ldr	r3, [pc, #368]	@ (8002140 <task_sensor_init+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8002150 <task_sensor_init+0x1d0>)
 8001fd4:	213f      	movs	r1, #63	@ 0x3f
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f001 f9cc 	bl	8003374 <sniprintf>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4a5a      	ldr	r2, [pc, #360]	@ (8002148 <task_sensor_init+0x1c8>)
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	4b57      	ldr	r3, [pc, #348]	@ (8002140 <task_sensor_init+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fd30 	bl	8001a4c <logger_log_print_>
 8001fec:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_sensor_init), p_task_sensor);
 8001fee:	b672      	cpsid	i
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <task_sensor_init+0x1c0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a53      	ldr	r2, [pc, #332]	@ (8002144 <task_sensor_init+0x1c4>)
 8001ff6:	213f      	movs	r1, #63	@ 0x3f
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f001 f9bb 	bl	8003374 <sniprintf>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4a51      	ldr	r2, [pc, #324]	@ (8002148 <task_sensor_init+0x1c8>)
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <task_sensor_init+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fd1f 	bl	8001a4c <logger_log_print_>
 800200e:	b662      	cpsie	i
 8002010:	b672      	cpsid	i
 8002012:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <task_sensor_init+0x1c0>)
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	4b4f      	ldr	r3, [pc, #316]	@ (8002154 <task_sensor_init+0x1d4>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4b4e      	ldr	r3, [pc, #312]	@ (8002158 <task_sensor_init+0x1d8>)
 800201e:	4a4f      	ldr	r2, [pc, #316]	@ (800215c <task_sensor_init+0x1dc>)
 8002020:	213f      	movs	r1, #63	@ 0x3f
 8002022:	f001 f9a7 	bl	8003374 <sniprintf>
 8002026:	4603      	mov	r3, r0
 8002028:	4a47      	ldr	r2, [pc, #284]	@ (8002148 <task_sensor_init+0x1c8>)
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <task_sensor_init+0x1c0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fd0b 	bl	8001a4c <logger_log_print_>
 8002036:	b662      	cpsie	i
 8002038:	b672      	cpsid	i
 800203a:	4b41      	ldr	r3, [pc, #260]	@ (8002140 <task_sensor_init+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a44      	ldr	r2, [pc, #272]	@ (8002150 <task_sensor_init+0x1d0>)
 8002040:	213f      	movs	r1, #63	@ 0x3f
 8002042:	4618      	mov	r0, r3
 8002044:	f001 f996 	bl	8003374 <sniprintf>
 8002048:	4603      	mov	r3, r0
 800204a:	4a3f      	ldr	r2, [pc, #252]	@ (8002148 <task_sensor_init+0x1c8>)
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <task_sensor_init+0x1c0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fcfa 	bl	8001a4c <logger_log_print_>
 8002058:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_sensor), p_task_sensor_);
 800205a:	b672      	cpsid	i
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <task_sensor_init+0x1c0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <task_sensor_init+0x1c4>)
 8002062:	213f      	movs	r1, #63	@ 0x3f
 8002064:	4618      	mov	r0, r3
 8002066:	f001 f985 	bl	8003374 <sniprintf>
 800206a:	4603      	mov	r3, r0
 800206c:	4a36      	ldr	r2, [pc, #216]	@ (8002148 <task_sensor_init+0x1c8>)
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <task_sensor_init+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fce9 	bl	8001a4c <logger_log_print_>
 800207a:	b662      	cpsie	i
 800207c:	b672      	cpsid	i
 800207e:	4b30      	ldr	r3, [pc, #192]	@ (8002140 <task_sensor_init+0x1c0>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	4b37      	ldr	r3, [pc, #220]	@ (8002160 <task_sensor_init+0x1e0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	4b36      	ldr	r3, [pc, #216]	@ (8002164 <task_sensor_init+0x1e4>)
 800208a:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <task_sensor_init+0x1e8>)
 800208c:	213f      	movs	r1, #63	@ 0x3f
 800208e:	f001 f971 	bl	8003374 <sniprintf>
 8002092:	4603      	mov	r3, r0
 8002094:	4a2c      	ldr	r2, [pc, #176]	@ (8002148 <task_sensor_init+0x1c8>)
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <task_sensor_init+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff fcd5 	bl	8001a4c <logger_log_print_>
 80020a2:	b662      	cpsie	i
 80020a4:	b672      	cpsid	i
 80020a6:	4b26      	ldr	r3, [pc, #152]	@ (8002140 <task_sensor_init+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a29      	ldr	r2, [pc, #164]	@ (8002150 <task_sensor_init+0x1d0>)
 80020ac:	213f      	movs	r1, #63	@ 0x3f
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f960 	bl	8003374 <sniprintf>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a24      	ldr	r2, [pc, #144]	@ (8002148 <task_sensor_init+0x1c8>)
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b21      	ldr	r3, [pc, #132]	@ (8002140 <task_sensor_init+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fcc4 	bl	8001a4c <logger_log_print_>
 80020c4:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 80020c6:	4b29      	ldr	r3, [pc, #164]	@ (800216c <task_sensor_init+0x1ec>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 80020cc:	b672      	cpsid	i
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <task_sensor_init+0x1c0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <task_sensor_init+0x1c4>)
 80020d4:	213f      	movs	r1, #63	@ 0x3f
 80020d6:	4618      	mov	r0, r3
 80020d8:	f001 f94c 	bl	8003374 <sniprintf>
 80020dc:	4603      	mov	r3, r0
 80020de:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <task_sensor_init+0x1c8>)
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	4b17      	ldr	r3, [pc, #92]	@ (8002140 <task_sensor_init+0x1c0>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fcb0 	bl	8001a4c <logger_log_print_>
 80020ec:	b662      	cpsie	i
 80020ee:	b672      	cpsid	i
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <task_sensor_init+0x1c0>)
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <task_sensor_init+0x1ec>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002170 <task_sensor_init+0x1f0>)
 80020fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <task_sensor_init+0x1f4>)
 80020fe:	213f      	movs	r1, #63	@ 0x3f
 8002100:	f001 f938 	bl	8003374 <sniprintf>
 8002104:	4603      	mov	r3, r0
 8002106:	4a10      	ldr	r2, [pc, #64]	@ (8002148 <task_sensor_init+0x1c8>)
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <task_sensor_init+0x1c0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fc9c 	bl	8001a4c <logger_log_print_>
 8002114:	b662      	cpsie	i
 8002116:	b672      	cpsid	i
 8002118:	4b09      	ldr	r3, [pc, #36]	@ (8002140 <task_sensor_init+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0c      	ldr	r2, [pc, #48]	@ (8002150 <task_sensor_init+0x1d0>)
 800211e:	213f      	movs	r1, #63	@ 0x3f
 8002120:	4618      	mov	r0, r3
 8002122:	f001 f927 	bl	8003374 <sniprintf>
 8002126:	4603      	mov	r3, r0
 8002128:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <task_sensor_init+0x1c8>)
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <task_sensor_init+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fc8b 	bl	8001a4c <logger_log_print_>
 8002136:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e09e      	b.n	800227c <task_sensor_init+0x2fc>
 800213e:	bf00      	nop
 8002140:	080046f0 	.word	0x080046f0
 8002144:	080044e4 	.word	0x080044e4
 8002148:	2000015c 	.word	0x2000015c
 800214c:	080044ec 	.word	0x080044ec
 8002150:	080044f0 	.word	0x080044f0
 8002154:	20000024 	.word	0x20000024
 8002158:	080044f4 	.word	0x080044f4
 800215c:	08004508 	.word	0x08004508
 8002160:	20000028 	.word	0x20000028
 8002164:	08004520 	.word	0x08004520
 8002168:	0800452c 	.word	0x0800452c
 800216c:	20000188 	.word	0x20000188
 8002170:	0800453c 	.word	0x0800453c
 8002174:	08004550 	.word	0x08004550
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4a44      	ldr	r2, [pc, #272]	@ (8002290 <task_sensor_init+0x310>)
 800217e:	4413      	add	r3, r2
 8002180:	613b      	str	r3, [r7, #16]

		/* Init & Print out: Index & Task execution FSM */
		state = ST_BTN_XX_UP;
 8002182:	2300      	movs	r3, #0
 8002184:	73fb      	strb	r3, [r7, #15]
		p_task_sensor_dta->state = state;
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	711a      	strb	r2, [r3, #4]

		event = EV_BTN_XX_UP;
 800218c:	2300      	movs	r3, #0
 800218e:	73bb      	strb	r3, [r7, #14]
		p_task_sensor_dta->event = event;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	7bba      	ldrb	r2, [r7, #14]
 8002194:	715a      	strb	r2, [r3, #5]

		LOGGER_INFO(" ");
 8002196:	b672      	cpsid	i
 8002198:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <task_sensor_init+0x314>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3e      	ldr	r2, [pc, #248]	@ (8002298 <task_sensor_init+0x318>)
 800219e:	213f      	movs	r1, #63	@ 0x3f
 80021a0:	4618      	mov	r0, r3
 80021a2:	f001 f8e7 	bl	8003374 <sniprintf>
 80021a6:	4603      	mov	r3, r0
 80021a8:	4a3c      	ldr	r2, [pc, #240]	@ (800229c <task_sensor_init+0x31c>)
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <task_sensor_init+0x314>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fc4b 	bl	8001a4c <logger_log_print_>
 80021b6:	b662      	cpsie	i
 80021b8:	b672      	cpsid	i
 80021ba:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <task_sensor_init+0x314>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a38      	ldr	r2, [pc, #224]	@ (80022a0 <task_sensor_init+0x320>)
 80021c0:	213f      	movs	r1, #63	@ 0x3f
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 f8d6 	bl	8003374 <sniprintf>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4a34      	ldr	r2, [pc, #208]	@ (800229c <task_sensor_init+0x31c>)
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <task_sensor_init+0x314>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff fc3a 	bl	8001a4c <logger_log_print_>
 80021d8:	b662      	cpsie	i
 80021da:	b672      	cpsid	i
 80021dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002294 <task_sensor_init+0x314>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a30      	ldr	r2, [pc, #192]	@ (80022a4 <task_sensor_init+0x324>)
 80021e2:	213f      	movs	r1, #63	@ 0x3f
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 f8c5 	bl	8003374 <sniprintf>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <task_sensor_init+0x31c>)
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <task_sensor_init+0x314>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fc29 	bl	8001a4c <logger_log_print_>
 80021fa:	b662      	cpsie	i
		LOGGER_INFO("   %s = %lu   %s = %lu   %s = %lu",
 80021fc:	b672      	cpsid	i
 80021fe:	4b25      	ldr	r3, [pc, #148]	@ (8002294 <task_sensor_init+0x314>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <task_sensor_init+0x318>)
 8002204:	213f      	movs	r1, #63	@ 0x3f
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f8b4 	bl	8003374 <sniprintf>
 800220c:	4603      	mov	r3, r0
 800220e:	4a23      	ldr	r2, [pc, #140]	@ (800229c <task_sensor_init+0x31c>)
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	4b20      	ldr	r3, [pc, #128]	@ (8002294 <task_sensor_init+0x314>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fc18 	bl	8001a4c <logger_log_print_>
 800221c:	b662      	cpsie	i
 800221e:	b672      	cpsid	i
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <task_sensor_init+0x314>)
 8002222:	6818      	ldr	r0, [r3, #0]
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	7bba      	ldrb	r2, [r7, #14]
 8002228:	9204      	str	r2, [sp, #16]
 800222a:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <task_sensor_init+0x328>)
 800222c:	9203      	str	r2, [sp, #12]
 800222e:	9302      	str	r3, [sp, #8]
 8002230:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <task_sensor_init+0x32c>)
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <task_sensor_init+0x330>)
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <task_sensor_init+0x334>)
 800223c:	213f      	movs	r1, #63	@ 0x3f
 800223e:	f001 f899 	bl	8003374 <sniprintf>
 8002242:	4603      	mov	r3, r0
 8002244:	4a15      	ldr	r2, [pc, #84]	@ (800229c <task_sensor_init+0x31c>)
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <task_sensor_init+0x314>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fbfd 	bl	8001a4c <logger_log_print_>
 8002252:	b662      	cpsie	i
 8002254:	b672      	cpsid	i
 8002256:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <task_sensor_init+0x314>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <task_sensor_init+0x324>)
 800225c:	213f      	movs	r1, #63	@ 0x3f
 800225e:	4618      	mov	r0, r3
 8002260:	f001 f888 	bl	8003374 <sniprintf>
 8002264:	4603      	mov	r3, r0
 8002266:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <task_sensor_init+0x31c>)
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <task_sensor_init+0x314>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fbec 	bl	8001a4c <logger_log_print_>
 8002274:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b03      	cmp	r3, #3
 8002280:	f67f af7a 	bls.w	8002178 <task_sensor_init+0x1f8>
				    GET_NAME(index), index,
					GET_NAME(state), (uint32_t)state,
					GET_NAME(event), (uint32_t)event);
	}
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000168 	.word	0x20000168
 8002294:	080046f0 	.word	0x080046f0
 8002298:	080044e4 	.word	0x080044e4
 800229c:	2000015c 	.word	0x2000015c
 80022a0:	080044ec 	.word	0x080044ec
 80022a4:	080044f0 	.word	0x080044f0
 80022a8:	08004588 	.word	0x08004588
 80022ac:	08004590 	.word	0x08004590
 80022b0:	0800455c 	.word	0x0800455c
 80022b4:	08004564 	.word	0x08004564

080022b8 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 80022c4:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80022c6:	4b16      	ldr	r3, [pc, #88]	@ (8002320 <task_sensor_update+0x68>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d006      	beq.n	80022dc <task_sensor_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_sensor_tick_cnt--;
 80022ce:	4b14      	ldr	r3, [pc, #80]	@ (8002320 <task_sensor_update+0x68>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <task_sensor_update+0x68>)
 80022d6:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 80022dc:	b662      	cpsie	i

    while (b_time_update_required)
 80022de:	e016      	b.n	800230e <task_sensor_update+0x56>
    {
		/* Update Task Counter */
		g_task_sensor_cnt++;
 80022e0:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <task_sensor_update+0x6c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	3301      	adds	r3, #1
 80022e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <task_sensor_update+0x6c>)
 80022e8:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_sensor_statechart();
 80022ea:	f000 f81d 	bl	8002328 <task_sensor_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 80022ee:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <task_sensor_update+0x68>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <task_sensor_update+0x50>
		{
			/* Update Tick Counter */
			g_task_sensor_tick_cnt--;
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <task_sensor_update+0x68>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <task_sensor_update+0x68>)
 8002300:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e001      	b.n	800230c <task_sensor_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 8002308:	2300      	movs	r3, #0
 800230a:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 800230c:	b662      	cpsie	i
    while (b_time_update_required)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e5      	bne.n	80022e0 <task_sensor_update+0x28>
    }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000018c 	.word	0x2000018c
 8002324:	20000188 	.word	0x20000188

08002328 <task_sensor_statechart>:

void task_sensor_statechart(void)
{
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800232e:	2300      	movs	r3, #0
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e0a3      	b.n	800247c <task_sensor_statechart+0x154>
	{
		/* Update Task Sensor Configuration & Data Pointer */
		p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4a54      	ldr	r2, [pc, #336]	@ (8002490 <task_sensor_statechart+0x168>)
 8002340:	4413      	add	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <task_sensor_statechart+0x16c>)
 800234a:	4413      	add	r3, r2
 800234c:	607b      	str	r3, [r7, #4]

		if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	7a9c      	ldrb	r4, [r3, #10]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	891b      	ldrh	r3, [r3, #8]
 800235a:	4619      	mov	r1, r3
 800235c:	4610      	mov	r0, r2
 800235e:	f7fe fc17 	bl	8000b90 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	429c      	cmp	r4, r3
 8002366:	d103      	bne.n	8002370 <task_sensor_statechart+0x48>
		{
			p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	715a      	strb	r2, [r3, #5]
 800236e:	e002      	b.n	8002376 <task_sensor_statechart+0x4e>
		}
		else
		{
			p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_sensor_dta->state)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	791b      	ldrb	r3, [r3, #4]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d86a      	bhi.n	8002454 <task_sensor_statechart+0x12c>
 800237e:	a201      	add	r2, pc, #4	@ (adr r2, 8002384 <task_sensor_statechart+0x5c>)
 8002380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002384:	08002395 	.word	0x08002395
 8002388:	080023ab 	.word	0x080023ab
 800238c:	080023f5 	.word	0x080023f5
 8002390:	0800240b 	.word	0x0800240b
		{
			case ST_BTN_XX_UP:

				if (p_task_sensor_dta->event == EV_BTN_XX_DOWN)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	795b      	ldrb	r3, [r3, #5]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d165      	bne.n	8002468 <task_sensor_statechart+0x140>
				{
					p_task_sensor_dta->tick = DEL_BTN_XX_MAX;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2232      	movs	r2, #50	@ 0x32
 80023a0:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	711a      	strb	r2, [r3, #4]
				}
				break;
 80023a8:	e05e      	b.n	8002468 <task_sensor_statechart+0x140>

			case ST_BTN_XX_FALLING:

				if(p_task_sensor_dta->tick > DEL_BTN_XX_MIN)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <task_sensor_statechart+0x94>
					p_task_sensor_dta->tick --;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	1e5a      	subs	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	601a      	str	r2, [r3, #0]

				if((p_task_sensor_dta->event == EV_BTN_XX_UP) && (p_task_sensor_dta->tick == DEL_BTN_XX_MIN))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	795b      	ldrb	r3, [r3, #5]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d106      	bne.n	80023d2 <task_sensor_statechart+0xaa>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d102      	bne.n	80023d2 <task_sensor_statechart+0xaa>
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	711a      	strb	r2, [r3, #4]

				if((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick == DEL_BTN_XX_MIN))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	795b      	ldrb	r3, [r3, #5]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d148      	bne.n	800246c <task_sensor_statechart+0x144>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d144      	bne.n	800246c <task_sensor_statechart+0x144>
				{
					put_event_task_system(p_task_sensor_cfg->signal_down);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	7c5b      	ldrb	r3, [r3, #17]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fb3e 	bl	8002a68 <put_event_task_system>
					p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	711a      	strb	r2, [r3, #4]
				}
				break;
 80023f2:	e03b      	b.n	800246c <task_sensor_statechart+0x144>

			case ST_BTN_XX_DOWN:

				if (p_task_sensor_dta->event == EV_BTN_XX_UP)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	795b      	ldrb	r3, [r3, #5]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d139      	bne.n	8002470 <task_sensor_statechart+0x148>
				{
					p_task_sensor_dta->tick = DEL_BTN_XX_MAX;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2232      	movs	r2, #50	@ 0x32
 8002400:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	711a      	strb	r2, [r3, #4]
				}

				break;
 8002408:	e032      	b.n	8002470 <task_sensor_statechart+0x148>

			case ST_BTN_XX_RISING:

				if(p_task_sensor_dta->tick > DEL_BTN_XX_MIN)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <task_sensor_statechart+0xf4>
					p_task_sensor_dta->tick --;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1e5a      	subs	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]

				if((p_task_sensor_dta->event == EV_BTN_XX_DOWN) && (p_task_sensor_dta->tick == DEL_BTN_XX_MIN))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	795b      	ldrb	r3, [r3, #5]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <task_sensor_statechart+0x10a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <task_sensor_statechart+0x10a>
									p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	711a      	strb	r2, [r3, #4]

				if(p_task_sensor_dta->event == EV_BTN_XX_UP && p_task_sensor_dta->tick == DEL_BTN_XX_MIN)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	795b      	ldrb	r3, [r3, #5]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11c      	bne.n	8002474 <task_sensor_statechart+0x14c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <task_sensor_statechart+0x14c>
				{
					put_event_task_system(p_task_sensor_cfg->signal_up);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	7c1b      	ldrb	r3, [r3, #16]
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fb0e 	bl	8002a68 <put_event_task_system>
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	711a      	strb	r2, [r3, #4]
				}

				break;
 8002452:	e00f      	b.n	8002474 <task_sensor_statechart+0x14c>

			default:

				p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	601a      	str	r2, [r3, #0]
				p_task_sensor_dta->state = ST_BTN_XX_UP;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	711a      	strb	r2, [r3, #4]
				p_task_sensor_dta->event = EV_BTN_XX_UP;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	715a      	strb	r2, [r3, #5]

				break;
 8002466:	e006      	b.n	8002476 <task_sensor_statechart+0x14e>
				break;
 8002468:	bf00      	nop
 800246a:	e004      	b.n	8002476 <task_sensor_statechart+0x14e>
				break;
 800246c:	bf00      	nop
 800246e:	e002      	b.n	8002476 <task_sensor_statechart+0x14e>
				break;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <task_sensor_statechart+0x14e>
				break;
 8002474:	bf00      	nop
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	3301      	adds	r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b03      	cmp	r3, #3
 8002480:	f67f af58 	bls.w	8002334 <task_sensor_statechart+0xc>
		}
	}
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	bd90      	pop	{r4, r7, pc}
 800248e:	bf00      	nop
 8002490:	08004708 	.word	0x08004708
 8002494:	20000168 	.word	0x20000168

08002498 <task_system_init>:
uint32_t g_task_system_cnt;
volatile uint32_t g_task_system_tick_cnt;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	@ 0x28
 800249c:	af06      	add	r7, sp, #24
 800249e:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 80024a0:	b672      	cpsid	i
 80024a2:	4b9c      	ldr	r3, [pc, #624]	@ (8002714 <task_system_init+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a9c      	ldr	r2, [pc, #624]	@ (8002718 <task_system_init+0x280>)
 80024a8:	213f      	movs	r1, #63	@ 0x3f
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 ff62 	bl	8003374 <sniprintf>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a9a      	ldr	r2, [pc, #616]	@ (800271c <task_system_init+0x284>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	4b97      	ldr	r3, [pc, #604]	@ (8002714 <task_system_init+0x27c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fac6 	bl	8001a4c <logger_log_print_>
 80024c0:	b662      	cpsie	i
 80024c2:	b672      	cpsid	i
 80024c4:	4b93      	ldr	r3, [pc, #588]	@ (8002714 <task_system_init+0x27c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a95      	ldr	r2, [pc, #596]	@ (8002720 <task_system_init+0x288>)
 80024ca:	213f      	movs	r1, #63	@ 0x3f
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 ff51 	bl	8003374 <sniprintf>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a91      	ldr	r2, [pc, #580]	@ (800271c <task_system_init+0x284>)
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002714 <task_system_init+0x27c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fab5 	bl	8001a4c <logger_log_print_>
 80024e2:	b662      	cpsie	i
 80024e4:	b672      	cpsid	i
 80024e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002714 <task_system_init+0x27c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a8e      	ldr	r2, [pc, #568]	@ (8002724 <task_system_init+0x28c>)
 80024ec:	213f      	movs	r1, #63	@ 0x3f
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 ff40 	bl	8003374 <sniprintf>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4a89      	ldr	r2, [pc, #548]	@ (800271c <task_system_init+0x284>)
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b86      	ldr	r3, [pc, #536]	@ (8002714 <task_system_init+0x27c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff faa4 	bl	8001a4c <logger_log_print_>
 8002504:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_system_init), p_task_system);
 8002506:	b672      	cpsid	i
 8002508:	4b82      	ldr	r3, [pc, #520]	@ (8002714 <task_system_init+0x27c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a82      	ldr	r2, [pc, #520]	@ (8002718 <task_system_init+0x280>)
 800250e:	213f      	movs	r1, #63	@ 0x3f
 8002510:	4618      	mov	r0, r3
 8002512:	f000 ff2f 	bl	8003374 <sniprintf>
 8002516:	4603      	mov	r3, r0
 8002518:	4a80      	ldr	r2, [pc, #512]	@ (800271c <task_system_init+0x284>)
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	4b7d      	ldr	r3, [pc, #500]	@ (8002714 <task_system_init+0x27c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fa93 	bl	8001a4c <logger_log_print_>
 8002526:	b662      	cpsie	i
 8002528:	b672      	cpsid	i
 800252a:	4b7a      	ldr	r3, [pc, #488]	@ (8002714 <task_system_init+0x27c>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	4b7e      	ldr	r3, [pc, #504]	@ (8002728 <task_system_init+0x290>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4b7d      	ldr	r3, [pc, #500]	@ (800272c <task_system_init+0x294>)
 8002536:	4a7e      	ldr	r2, [pc, #504]	@ (8002730 <task_system_init+0x298>)
 8002538:	213f      	movs	r1, #63	@ 0x3f
 800253a:	f000 ff1b 	bl	8003374 <sniprintf>
 800253e:	4603      	mov	r3, r0
 8002540:	4a76      	ldr	r2, [pc, #472]	@ (800271c <task_system_init+0x284>)
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b73      	ldr	r3, [pc, #460]	@ (8002714 <task_system_init+0x27c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fa7f 	bl	8001a4c <logger_log_print_>
 800254e:	b662      	cpsie	i
 8002550:	b672      	cpsid	i
 8002552:	4b70      	ldr	r3, [pc, #448]	@ (8002714 <task_system_init+0x27c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a73      	ldr	r2, [pc, #460]	@ (8002724 <task_system_init+0x28c>)
 8002558:	213f      	movs	r1, #63	@ 0x3f
 800255a:	4618      	mov	r0, r3
 800255c:	f000 ff0a 	bl	8003374 <sniprintf>
 8002560:	4603      	mov	r3, r0
 8002562:	4a6e      	ldr	r2, [pc, #440]	@ (800271c <task_system_init+0x284>)
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6b      	ldr	r3, [pc, #428]	@ (8002714 <task_system_init+0x27c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fa6e 	bl	8001a4c <logger_log_print_>
 8002570:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_system), p_task_system_);
 8002572:	b672      	cpsid	i
 8002574:	4b67      	ldr	r3, [pc, #412]	@ (8002714 <task_system_init+0x27c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a67      	ldr	r2, [pc, #412]	@ (8002718 <task_system_init+0x280>)
 800257a:	213f      	movs	r1, #63	@ 0x3f
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fef9 	bl	8003374 <sniprintf>
 8002582:	4603      	mov	r3, r0
 8002584:	4a65      	ldr	r2, [pc, #404]	@ (800271c <task_system_init+0x284>)
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b62      	ldr	r3, [pc, #392]	@ (8002714 <task_system_init+0x27c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fa5d 	bl	8001a4c <logger_log_print_>
 8002592:	b662      	cpsie	i
 8002594:	b672      	cpsid	i
 8002596:	4b5f      	ldr	r3, [pc, #380]	@ (8002714 <task_system_init+0x27c>)
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <task_system_init+0x29c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	4b65      	ldr	r3, [pc, #404]	@ (8002738 <task_system_init+0x2a0>)
 80025a2:	4a66      	ldr	r2, [pc, #408]	@ (800273c <task_system_init+0x2a4>)
 80025a4:	213f      	movs	r1, #63	@ 0x3f
 80025a6:	f000 fee5 	bl	8003374 <sniprintf>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4a5b      	ldr	r2, [pc, #364]	@ (800271c <task_system_init+0x284>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b58      	ldr	r3, [pc, #352]	@ (8002714 <task_system_init+0x27c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fa49 	bl	8001a4c <logger_log_print_>
 80025ba:	b662      	cpsie	i
 80025bc:	b672      	cpsid	i
 80025be:	4b55      	ldr	r3, [pc, #340]	@ (8002714 <task_system_init+0x27c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a58      	ldr	r2, [pc, #352]	@ (8002724 <task_system_init+0x28c>)
 80025c4:	213f      	movs	r1, #63	@ 0x3f
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fed4 	bl	8003374 <sniprintf>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a53      	ldr	r2, [pc, #332]	@ (800271c <task_system_init+0x284>)
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b50      	ldr	r3, [pc, #320]	@ (8002714 <task_system_init+0x27c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fa38 	bl	8001a4c <logger_log_print_>
 80025dc:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 80025de:	4b58      	ldr	r3, [pc, #352]	@ (8002740 <task_system_init+0x2a8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 80025e4:	b672      	cpsid	i
 80025e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002714 <task_system_init+0x27c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002718 <task_system_init+0x280>)
 80025ec:	213f      	movs	r1, #63	@ 0x3f
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fec0 	bl	8003374 <sniprintf>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a49      	ldr	r2, [pc, #292]	@ (800271c <task_system_init+0x284>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <task_system_init+0x27c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fa24 	bl	8001a4c <logger_log_print_>
 8002604:	b662      	cpsie	i
 8002606:	b672      	cpsid	i
 8002608:	4b42      	ldr	r3, [pc, #264]	@ (8002714 <task_system_init+0x27c>)
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	4b4c      	ldr	r3, [pc, #304]	@ (8002740 <task_system_init+0x2a8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	4b4c      	ldr	r3, [pc, #304]	@ (8002744 <task_system_init+0x2ac>)
 8002614:	4a4c      	ldr	r2, [pc, #304]	@ (8002748 <task_system_init+0x2b0>)
 8002616:	213f      	movs	r1, #63	@ 0x3f
 8002618:	f000 feac 	bl	8003374 <sniprintf>
 800261c:	4603      	mov	r3, r0
 800261e:	4a3f      	ldr	r2, [pc, #252]	@ (800271c <task_system_init+0x284>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b3c      	ldr	r3, [pc, #240]	@ (8002714 <task_system_init+0x27c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fa10 	bl	8001a4c <logger_log_print_>
 800262c:	b662      	cpsie	i
 800262e:	b672      	cpsid	i
 8002630:	4b38      	ldr	r3, [pc, #224]	@ (8002714 <task_system_init+0x27c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3b      	ldr	r2, [pc, #236]	@ (8002724 <task_system_init+0x28c>)
 8002636:	213f      	movs	r1, #63	@ 0x3f
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fe9b 	bl	8003374 <sniprintf>
 800263e:	4603      	mov	r3, r0
 8002640:	4a36      	ldr	r2, [pc, #216]	@ (800271c <task_system_init+0x284>)
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b33      	ldr	r3, [pc, #204]	@ (8002714 <task_system_init+0x27c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f9ff 	bl	8001a4c <logger_log_print_>
 800264e:	b662      	cpsie	i

	init_queue_event_task_system();
 8002650:	f000 f9e6 	bl	8002a20 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 8002654:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <task_system_init+0x2b4>)
 8002656:	60fb      	str	r3, [r7, #12]

	/* Init & Print out: Task execution FSM */
	state = ST_SYS_IDLE;
 8002658:	2300      	movs	r3, #0
 800265a:	72fb      	strb	r3, [r7, #11]
	p_task_system_dta->state = state;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	7afa      	ldrb	r2, [r7, #11]
 8002660:	711a      	strb	r2, [r3, #4]

	event = EV_SYS_IDLE;
 8002662:	2300      	movs	r3, #0
 8002664:	72bb      	strb	r3, [r7, #10]
	p_task_system_dta->event = event;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	7aba      	ldrb	r2, [r7, #10]
 800266a:	715a      	strb	r2, [r3, #5]

	b_event = false;
 800266c:	2300      	movs	r3, #0
 800266e:	727b      	strb	r3, [r7, #9]
	p_task_system_dta->flag = b_event;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	7a7a      	ldrb	r2, [r7, #9]
 8002674:	719a      	strb	r2, [r3, #6]

	LOGGER_INFO(" ");
 8002676:	b672      	cpsid	i
 8002678:	4b26      	ldr	r3, [pc, #152]	@ (8002714 <task_system_init+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a26      	ldr	r2, [pc, #152]	@ (8002718 <task_system_init+0x280>)
 800267e:	213f      	movs	r1, #63	@ 0x3f
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fe77 	bl	8003374 <sniprintf>
 8002686:	4603      	mov	r3, r0
 8002688:	4a24      	ldr	r2, [pc, #144]	@ (800271c <task_system_init+0x284>)
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <task_system_init+0x27c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f9db 	bl	8001a4c <logger_log_print_>
 8002696:	b662      	cpsie	i
 8002698:	b672      	cpsid	i
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <task_system_init+0x27c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a20      	ldr	r2, [pc, #128]	@ (8002720 <task_system_init+0x288>)
 80026a0:	213f      	movs	r1, #63	@ 0x3f
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fe66 	bl	8003374 <sniprintf>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a1c      	ldr	r2, [pc, #112]	@ (800271c <task_system_init+0x284>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <task_system_init+0x27c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff f9ca 	bl	8001a4c <logger_log_print_>
 80026b8:	b662      	cpsie	i
 80026ba:	b672      	cpsid	i
 80026bc:	4b15      	ldr	r3, [pc, #84]	@ (8002714 <task_system_init+0x27c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a18      	ldr	r2, [pc, #96]	@ (8002724 <task_system_init+0x28c>)
 80026c2:	213f      	movs	r1, #63	@ 0x3f
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fe55 	bl	8003374 <sniprintf>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a13      	ldr	r2, [pc, #76]	@ (800271c <task_system_init+0x284>)
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <task_system_init+0x27c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff f9b9 	bl	8001a4c <logger_log_print_>
 80026da:	b662      	cpsie	i
	LOGGER_INFO("   %s = %lu   %s = %lu   %s = %s",
 80026dc:	b672      	cpsid	i
 80026de:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <task_system_init+0x27c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <task_system_init+0x280>)
 80026e4:	213f      	movs	r1, #63	@ 0x3f
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fe44 	bl	8003374 <sniprintf>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a0b      	ldr	r2, [pc, #44]	@ (800271c <task_system_init+0x284>)
 80026f0:	6013      	str	r3, [r2, #0]
 80026f2:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <task_system_init+0x27c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff f9a8 	bl	8001a4c <logger_log_print_>
 80026fc:	b662      	cpsie	i
 80026fe:	b672      	cpsid	i
 8002700:	4b04      	ldr	r3, [pc, #16]	@ (8002714 <task_system_init+0x27c>)
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	7aba      	ldrb	r2, [r7, #10]
 8002708:	7a79      	ldrb	r1, [r7, #9]
 800270a:	2900      	cmp	r1, #0
 800270c:	d022      	beq.n	8002754 <task_system_init+0x2bc>
 800270e:	4910      	ldr	r1, [pc, #64]	@ (8002750 <task_system_init+0x2b8>)
 8002710:	e021      	b.n	8002756 <task_system_init+0x2be>
 8002712:	bf00      	nop
 8002714:	080046f0 	.word	0x080046f0
 8002718:	080045dc 	.word	0x080045dc
 800271c:	2000015c 	.word	0x2000015c
 8002720:	080045e4 	.word	0x080045e4
 8002724:	080045e8 	.word	0x080045e8
 8002728:	2000002c 	.word	0x2000002c
 800272c:	080045ec 	.word	0x080045ec
 8002730:	08004600 	.word	0x08004600
 8002734:	20000030 	.word	0x20000030
 8002738:	08004618 	.word	0x08004618
 800273c:	08004624 	.word	0x08004624
 8002740:	20000198 	.word	0x20000198
 8002744:	08004634 	.word	0x08004634
 8002748:	08004648 	.word	0x08004648
 800274c:	20000190 	.word	0x20000190
 8002750:	08004654 	.word	0x08004654
 8002754:	4915      	ldr	r1, [pc, #84]	@ (80027ac <task_system_init+0x314>)
 8002756:	9104      	str	r1, [sp, #16]
 8002758:	4915      	ldr	r1, [pc, #84]	@ (80027b0 <task_system_init+0x318>)
 800275a:	9103      	str	r1, [sp, #12]
 800275c:	9202      	str	r2, [sp, #8]
 800275e:	4a15      	ldr	r2, [pc, #84]	@ (80027b4 <task_system_init+0x31c>)
 8002760:	9201      	str	r2, [sp, #4]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4b14      	ldr	r3, [pc, #80]	@ (80027b8 <task_system_init+0x320>)
 8002766:	4a15      	ldr	r2, [pc, #84]	@ (80027bc <task_system_init+0x324>)
 8002768:	213f      	movs	r1, #63	@ 0x3f
 800276a:	f000 fe03 	bl	8003374 <sniprintf>
 800276e:	4603      	mov	r3, r0
 8002770:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <task_system_init+0x328>)
 8002772:	6013      	str	r3, [r2, #0]
 8002774:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <task_system_init+0x32c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff f967 	bl	8001a4c <logger_log_print_>
 800277e:	b662      	cpsie	i
 8002780:	b672      	cpsid	i
 8002782:	4b10      	ldr	r3, [pc, #64]	@ (80027c4 <task_system_init+0x32c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a10      	ldr	r2, [pc, #64]	@ (80027c8 <task_system_init+0x330>)
 8002788:	213f      	movs	r1, #63	@ 0x3f
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fdf2 	bl	8003374 <sniprintf>
 8002790:	4603      	mov	r3, r0
 8002792:	4a0b      	ldr	r2, [pc, #44]	@ (80027c0 <task_system_init+0x328>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <task_system_init+0x32c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f956 	bl	8001a4c <logger_log_print_>
 80027a0:	b662      	cpsie	i
				 GET_NAME(state), (uint32_t)state,
				 GET_NAME(event), (uint32_t)event,
				 GET_NAME(b_event), (b_event ? "true" : "false"));
}
 80027a2:	bf00      	nop
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	0800465c 	.word	0x0800465c
 80027b0:	08004690 	.word	0x08004690
 80027b4:	08004698 	.word	0x08004698
 80027b8:	08004664 	.word	0x08004664
 80027bc:	0800466c 	.word	0x0800466c
 80027c0:	2000015c 	.word	0x2000015c
 80027c4:	080046f0 	.word	0x080046f0
 80027c8:	080045e8 	.word	0x080045e8

080027cc <task_system_update>:

void task_system_update(void *parameters)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 80027d4:	2300      	movs	r3, #0
 80027d6:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 80027d8:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 80027da:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <task_system_update+0x68>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d006      	beq.n	80027f0 <task_system_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_system_tick_cnt--;
 80027e2:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <task_system_update+0x68>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4a12      	ldr	r2, [pc, #72]	@ (8002834 <task_system_update+0x68>)
 80027ea:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 80027f0:	b662      	cpsie	i

    while (b_time_update_required)
 80027f2:	e016      	b.n	8002822 <task_system_update+0x56>
    {
		/* Update Task Counter */
		g_task_system_cnt++;
 80027f4:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <task_system_update+0x6c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002838 <task_system_update+0x6c>)
 80027fc:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_system_statechart();
 80027fe:	f000 f81d 	bl	800283c <task_system_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 8002802:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <task_system_update+0x68>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <task_system_update+0x50>
		{
			/* Update Tick Counter */
			g_task_system_tick_cnt--;
 800280c:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <task_system_update+0x68>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3b01      	subs	r3, #1
 8002812:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <task_system_update+0x68>)
 8002814:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002816:	2301      	movs	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	e001      	b.n	8002820 <task_system_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 8002820:	b662      	cpsie	i
    while (b_time_update_required)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <task_system_update+0x28>
    }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2000019c 	.word	0x2000019c
 8002838:	20000198 	.word	0x20000198

0800283c <task_system_statechart>:

void task_system_statechart(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
	task_system_dta_t *p_task_system_dta;

	/* Update Task System Data Pointer */
	p_task_system_dta = &task_system_dta;
 8002842:	4b76      	ldr	r3, [pc, #472]	@ (8002a1c <task_system_statechart+0x1e0>)
 8002844:	607b      	str	r3, [r7, #4]

	if (true == any_event_task_system())
 8002846:	f000 f957 	bl	8002af8 <any_event_task_system>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <task_system_statechart+0x26>
	{
		p_task_system_dta->flag = true;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	719a      	strb	r2, [r3, #6]
		p_task_system_dta->event = get_event_task_system();
 8002856:	f000 f929 	bl	8002aac <get_event_task_system>
 800285a:	4603      	mov	r3, r0
 800285c:	461a      	mov	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	715a      	strb	r2, [r3, #5]
	}

	switch (p_task_system_dta->state)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	2b06      	cmp	r3, #6
 8002868:	f200 80b9 	bhi.w	80029de <task_system_statechart+0x1a2>
 800286c:	a201      	add	r2, pc, #4	@ (adr r2, 8002874 <task_system_statechart+0x38>)
 800286e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002872:	bf00      	nop
 8002874:	08002891 	.word	0x08002891
 8002878:	080028bb 	.word	0x080028bb
 800287c:	08002911 	.word	0x08002911
 8002880:	08002943 	.word	0x08002943
 8002884:	08002961 	.word	0x08002961
 8002888:	0800297f 	.word	0x0800297f
 800288c:	080029ad 	.word	0x080029ad
	{
		case ST_SYS_IDLE:

			if ((true == p_task_system_dta->flag) && (EV_SYS_LOOP_DET == p_task_system_dta->event))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	799b      	ldrb	r3, [r3, #6]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80af 	beq.w	80029f8 <task_system_statechart+0x1bc>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	795b      	ldrb	r3, [r3, #5]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80aa 	bne.w	80029f8 <task_system_statechart+0x1bc>
			{
				p_task_system_dta->flag = false;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_ON, ID_LED_A);
 80028aa:	2100      	movs	r1, #0
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff fb4d 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_ACTIVE_01;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
			}
			break;
 80028b8:	e09e      	b.n	80029f8 <task_system_statechart+0x1bc>

		case ST_SYS_ACTIVE_01:

			if ((true == p_task_system_dta->flag) && (EV_SYS_MANUAL_BTN == p_task_system_dta->event))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	799b      	ldrb	r3, [r3, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d011      	beq.n	80028e6 <task_system_statechart+0xaa>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	795b      	ldrb	r3, [r3, #5]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d10d      	bne.n	80028e6 <task_system_statechart+0xaa>
			{
				p_task_system_dta->flag = false;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_01_BLINK, ID_LED_01);
 80028d0:	2101      	movs	r1, #1
 80028d2:	2007      	movs	r0, #7
 80028d4:	f7ff fb3a 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->tick = DEL_SYS_MAX;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80028de:	601a      	str	r2, [r3, #0]
				p_task_system_dta->state = ST_SYS_ACTIVE_02;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	711a      	strb	r2, [r3, #4]
			}

			if ((true == p_task_system_dta->flag) && (EV_SYS_IDLE == p_task_system_dta->event))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	799b      	ldrb	r3, [r3, #6]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 8086 	beq.w	80029fc <task_system_statechart+0x1c0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	795b      	ldrb	r3, [r3, #5]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f040 8081 	bne.w	80029fc <task_system_statechart+0x1c0>
			{
				p_task_system_dta->flag = false;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff fb22 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_IDLE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	711a      	strb	r2, [r3, #4]
			}
			break;
 800290e:	e075      	b.n	80029fc <task_system_statechart+0x1c0>

		case ST_SYS_ACTIVE_02:
			if(p_task_system_dta->tick > DEL_SYS_MIN)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <task_system_statechart+0xe6>
				p_task_system_dta->tick --;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	1e5a      	subs	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	601a      	str	r2, [r3, #0]

			if(p_task_system_dta->tick == DEL_SYS_MIN)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d16a      	bne.n	8002a00 <task_system_statechart+0x1c4>
			{
				put_event_task_actuator(EV_LED_01_ON, ID_LED_01);
 800292a:	2101      	movs	r1, #1
 800292c:	2008      	movs	r0, #8
 800292e:	f7ff fb0d 	bl	8001f4c <put_event_task_actuator>
				put_event_task_actuator(EV_LED_02_ON, ID_LED_02);
 8002932:	2102      	movs	r1, #2
 8002934:	200b      	movs	r0, #11
 8002936:	f7ff fb09 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_ACTIVE_03;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2203      	movs	r2, #3
 800293e:	711a      	strb	r2, [r3, #4]
			}
			break;
 8002940:	e05e      	b.n	8002a00 <task_system_statechart+0x1c4>

		case ST_SYS_ACTIVE_03:
			if ((true == p_task_system_dta->flag) && (EV_SYS_NOT_LOOP_DET == p_task_system_dta->event))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	799b      	ldrb	r3, [r3, #6]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d05c      	beq.n	8002a04 <task_system_statechart+0x1c8>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	795b      	ldrb	r3, [r3, #5]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d158      	bne.n	8002a04 <task_system_statechart+0x1c8>
			{
				p_task_system_dta->flag = false;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	719a      	strb	r2, [r3, #6]
				p_task_system_dta->state = ST_SYS_ACTIVE_04;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2204      	movs	r2, #4
 800295c:	711a      	strb	r2, [r3, #4]
			}
			break;
 800295e:	e051      	b.n	8002a04 <task_system_statechart+0x1c8>

		case ST_SYS_ACTIVE_04:
			if ((true == p_task_system_dta->flag) && (EV_SYS_IR_PHO_CELL == p_task_system_dta->event))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	799b      	ldrb	r3, [r3, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d04f      	beq.n	8002a08 <task_system_statechart+0x1cc>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	795b      	ldrb	r3, [r3, #5]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d14b      	bne.n	8002a08 <task_system_statechart+0x1cc>
			{
				p_task_system_dta->flag = false;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	719a      	strb	r2, [r3, #6]
				p_task_system_dta->state = ST_SYS_ACTIVE_05;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2205      	movs	r2, #5
 800297a:	711a      	strb	r2, [r3, #4]
			}
			break;
 800297c:	e044      	b.n	8002a08 <task_system_statechart+0x1cc>

		case ST_SYS_ACTIVE_05:
			if ((true == p_task_system_dta->flag) && (EV_SYS_NOT_IR_PHO_CELL == p_task_system_dta->event))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	799b      	ldrb	r3, [r3, #6]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d042      	beq.n	8002a0c <task_system_statechart+0x1d0>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	795b      	ldrb	r3, [r3, #5]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d13e      	bne.n	8002a0c <task_system_statechart+0x1d0>
			{
				p_task_system_dta->flag = false;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	719a      	strb	r2, [r3, #6]
				p_task_system_dta->tick = DEL_SYS_MAX;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800299a:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_01_BLINK, ID_LED_01);
 800299c:	2101      	movs	r1, #1
 800299e:	2007      	movs	r0, #7
 80029a0:	f7ff fad4 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_ACTIVE_06;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2206      	movs	r2, #6
 80029a8:	711a      	strb	r2, [r3, #4]
			}
			break;
 80029aa:	e02f      	b.n	8002a0c <task_system_statechart+0x1d0>

		case ST_SYS_ACTIVE_06:
			if(p_task_system_dta->tick > DEL_SYS_MIN)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <task_system_statechart+0x182>
				p_task_system_dta->tick --;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	1e5a      	subs	r2, r3, #1
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]

			if(p_task_system_dta->tick == DEL_SYS_MIN)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d124      	bne.n	8002a10 <task_system_statechart+0x1d4>
			{
				put_event_task_actuator(EV_LED_01_OFF, ID_LED_01);
 80029c6:	2101      	movs	r1, #1
 80029c8:	2009      	movs	r0, #9
 80029ca:	f7ff fabf 	bl	8001f4c <put_event_task_actuator>
				put_event_task_actuator(EV_LED_02_OFF, ID_LED_02);
 80029ce:	2102      	movs	r1, #2
 80029d0:	200c      	movs	r0, #12
 80029d2:	f7ff fabb 	bl	8001f4c <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_IDLE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	711a      	strb	r2, [r3, #4]
			}
			break;
 80029dc:	e018      	b.n	8002a10 <task_system_statechart+0x1d4>

		default:

			p_task_system_dta->tick  = DEL_SYS_MIN;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
			p_task_system_dta->state = ST_SYS_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	711a      	strb	r2, [r3, #4]
			p_task_system_dta->event = EV_SYS_IDLE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	715a      	strb	r2, [r3, #5]
			p_task_system_dta->flag = false;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	719a      	strb	r2, [r3, #6]

			break;
 80029f6:	e00c      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 80029f8:	bf00      	nop
 80029fa:	e00a      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 80029fc:	bf00      	nop
 80029fe:	e008      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 8002a00:	bf00      	nop
 8002a02:	e006      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 8002a04:	bf00      	nop
 8002a06:	e004      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 8002a08:	bf00      	nop
 8002a0a:	e002      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 8002a0c:	bf00      	nop
 8002a0e:	e000      	b.n	8002a12 <task_system_statechart+0x1d6>
			break;
 8002a10:	bf00      	nop
	}
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000190 	.word	0x20000190

08002a20 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8002a26:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <init_queue_event_task_system+0x44>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <init_queue_event_task_system+0x44>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	@ (8002a64 <init_queue_event_task_system+0x44>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002a38:	2300      	movs	r3, #0
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	e008      	b.n	8002a50 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <init_queue_event_task_system+0x44>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	330c      	adds	r3, #12
 8002a46:	22ff      	movs	r2, #255	@ 0xff
 8002a48:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d9f3      	bls.n	8002a3e <init_queue_event_task_system+0x1e>
}
 8002a56:	bf00      	nop
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	200001a0 	.word	0x200001a0

08002a68 <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002a72:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a7a:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	4909      	ldr	r1, [pc, #36]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a84:	600a      	str	r2, [r1, #0]
 8002a86:	4a08      	ldr	r2, [pc, #32]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a88:	4413      	add	r3, r2
 8002a8a:	79fa      	ldrb	r2, [r7, #7]
 8002a8c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d102      	bne.n	8002a9c <put_event_task_system+0x34>
		queue_task_a.head = 0;
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <put_event_task_system+0x40>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	200001a0 	.word	0x200001a0

08002aac <get_event_task_system>:

task_system_ev_t get_event_task_system(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	@ (8002af4 <get_event_task_system+0x48>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8002af4 <get_event_task_system+0x48>)
 8002aba:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002abc:	4b0d      	ldr	r3, [pc, #52]	@ (8002af4 <get_event_task_system+0x48>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8002af4 <get_event_task_system+0x48>)
 8002ac2:	4413      	add	r3, r2
 8002ac4:	7b1b      	ldrb	r3, [r3, #12]
 8002ac6:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <get_event_task_system+0x48>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	4909      	ldr	r1, [pc, #36]	@ (8002af4 <get_event_task_system+0x48>)
 8002ad0:	604a      	str	r2, [r1, #4]
 8002ad2:	4a08      	ldr	r2, [pc, #32]	@ (8002af4 <get_event_task_system+0x48>)
 8002ad4:	4413      	add	r3, r2
 8002ad6:	22ff      	movs	r2, #255	@ 0xff
 8002ad8:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <get_event_task_system+0x48>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d102      	bne.n	8002ae8 <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 8002ae2:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <get_event_task_system+0x48>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]

	return event;
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	200001a0 	.word	0x200001a0

08002af8 <any_event_task_system>:

bool any_event_task_system(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <any_event_task_system+0x20>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <any_event_task_system+0x20>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	200001a0 	.word	0x200001a0

08002b1c <findslot>:
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <findslot+0x2c>)
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	4604      	mov	r4, r0
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	b118      	cbz	r0, 8002b2e <findslot+0x12>
 8002b26:	6a03      	ldr	r3, [r0, #32]
 8002b28:	b90b      	cbnz	r3, 8002b2e <findslot+0x12>
 8002b2a:	f000 fbdb 	bl	80032e4 <__sinit>
 8002b2e:	2c13      	cmp	r4, #19
 8002b30:	d807      	bhi.n	8002b42 <findslot+0x26>
 8002b32:	4806      	ldr	r0, [pc, #24]	@ (8002b4c <findslot+0x30>)
 8002b34:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002b38:	3201      	adds	r2, #1
 8002b3a:	d002      	beq.n	8002b42 <findslot+0x26>
 8002b3c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	2000      	movs	r0, #0
 8002b44:	e7fc      	b.n	8002b40 <findslot+0x24>
 8002b46:	bf00      	nop
 8002b48:	20000048 	.word	0x20000048
 8002b4c:	200001c8 	.word	0x200001c8

08002b50 <error>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	4604      	mov	r4, r0
 8002b54:	f000 fcd6 	bl	8003504 <__errno>
 8002b58:	2613      	movs	r6, #19
 8002b5a:	4605      	mov	r5, r0
 8002b5c:	2700      	movs	r7, #0
 8002b5e:	4630      	mov	r0, r6
 8002b60:	4639      	mov	r1, r7
 8002b62:	beab      	bkpt	0x00ab
 8002b64:	4606      	mov	r6, r0
 8002b66:	4620      	mov	r0, r4
 8002b68:	602e      	str	r6, [r5, #0]
 8002b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b6c <checkerror>:
 8002b6c:	1c43      	adds	r3, r0, #1
 8002b6e:	d101      	bne.n	8002b74 <checkerror+0x8>
 8002b70:	f7ff bfee 	b.w	8002b50 <error>
 8002b74:	4770      	bx	lr

08002b76 <_swiread>:
 8002b76:	b530      	push	{r4, r5, lr}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	2406      	movs	r4, #6
 8002b7c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b80:	9203      	str	r2, [sp, #12]
 8002b82:	ad01      	add	r5, sp, #4
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	beab      	bkpt	0x00ab
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ffed 	bl	8002b6c <checkerror>
 8002b92:	b005      	add	sp, #20
 8002b94:	bd30      	pop	{r4, r5, pc}

08002b96 <_read>:
 8002b96:	b570      	push	{r4, r5, r6, lr}
 8002b98:	460e      	mov	r6, r1
 8002b9a:	4614      	mov	r4, r2
 8002b9c:	f7ff ffbe 	bl	8002b1c <findslot>
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b930      	cbnz	r0, 8002bb2 <_read+0x1c>
 8002ba4:	f000 fcae 	bl	8003504 <__errno>
 8002ba8:	2309      	movs	r3, #9
 8002baa:	6003      	str	r3, [r0, #0]
 8002bac:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb0:	bd70      	pop	{r4, r5, r6, pc}
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	4631      	mov	r1, r6
 8002bb6:	6800      	ldr	r0, [r0, #0]
 8002bb8:	f7ff ffdd 	bl	8002b76 <_swiread>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d0f5      	beq.n	8002bac <_read+0x16>
 8002bc0:	686b      	ldr	r3, [r5, #4]
 8002bc2:	1a20      	subs	r0, r4, r0
 8002bc4:	4403      	add	r3, r0
 8002bc6:	606b      	str	r3, [r5, #4]
 8002bc8:	e7f2      	b.n	8002bb0 <_read+0x1a>

08002bca <_swilseek>:
 8002bca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bcc:	460c      	mov	r4, r1
 8002bce:	4616      	mov	r6, r2
 8002bd0:	f7ff ffa4 	bl	8002b1c <findslot>
 8002bd4:	4605      	mov	r5, r0
 8002bd6:	b940      	cbnz	r0, 8002bea <_swilseek+0x20>
 8002bd8:	f000 fc94 	bl	8003504 <__errno>
 8002bdc:	2309      	movs	r3, #9
 8002bde:	6003      	str	r3, [r0, #0]
 8002be0:	f04f 34ff 	mov.w	r4, #4294967295
 8002be4:	4620      	mov	r0, r4
 8002be6:	b003      	add	sp, #12
 8002be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bea:	2e02      	cmp	r6, #2
 8002bec:	d903      	bls.n	8002bf6 <_swilseek+0x2c>
 8002bee:	f000 fc89 	bl	8003504 <__errno>
 8002bf2:	2316      	movs	r3, #22
 8002bf4:	e7f3      	b.n	8002bde <_swilseek+0x14>
 8002bf6:	2e01      	cmp	r6, #1
 8002bf8:	d112      	bne.n	8002c20 <_swilseek+0x56>
 8002bfa:	6843      	ldr	r3, [r0, #4]
 8002bfc:	18e4      	adds	r4, r4, r3
 8002bfe:	d4f6      	bmi.n	8002bee <_swilseek+0x24>
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	260a      	movs	r6, #10
 8002c04:	466f      	mov	r7, sp
 8002c06:	e9cd 3400 	strd	r3, r4, [sp]
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	4639      	mov	r1, r7
 8002c0e:	beab      	bkpt	0x00ab
 8002c10:	4606      	mov	r6, r0
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7ff ffaa 	bl	8002b6c <checkerror>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	dbe1      	blt.n	8002be0 <_swilseek+0x16>
 8002c1c:	606c      	str	r4, [r5, #4]
 8002c1e:	e7e1      	b.n	8002be4 <_swilseek+0x1a>
 8002c20:	2e02      	cmp	r6, #2
 8002c22:	6803      	ldr	r3, [r0, #0]
 8002c24:	d1ec      	bne.n	8002c00 <_swilseek+0x36>
 8002c26:	260c      	movs	r6, #12
 8002c28:	466f      	mov	r7, sp
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	4630      	mov	r0, r6
 8002c2e:	4639      	mov	r1, r7
 8002c30:	beab      	bkpt	0x00ab
 8002c32:	4606      	mov	r6, r0
 8002c34:	4630      	mov	r0, r6
 8002c36:	f7ff ff99 	bl	8002b6c <checkerror>
 8002c3a:	1c43      	adds	r3, r0, #1
 8002c3c:	d0d0      	beq.n	8002be0 <_swilseek+0x16>
 8002c3e:	4404      	add	r4, r0
 8002c40:	e7de      	b.n	8002c00 <_swilseek+0x36>

08002c42 <_lseek>:
 8002c42:	f7ff bfc2 	b.w	8002bca <_swilseek>

08002c46 <_swiwrite>:
 8002c46:	b530      	push	{r4, r5, lr}
 8002c48:	b085      	sub	sp, #20
 8002c4a:	2405      	movs	r4, #5
 8002c4c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c50:	9203      	str	r2, [sp, #12]
 8002c52:	ad01      	add	r5, sp, #4
 8002c54:	4620      	mov	r0, r4
 8002c56:	4629      	mov	r1, r5
 8002c58:	beab      	bkpt	0x00ab
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	4620      	mov	r0, r4
 8002c5e:	f7ff ff85 	bl	8002b6c <checkerror>
 8002c62:	b005      	add	sp, #20
 8002c64:	bd30      	pop	{r4, r5, pc}

08002c66 <_write>:
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	460e      	mov	r6, r1
 8002c6a:	4615      	mov	r5, r2
 8002c6c:	f7ff ff56 	bl	8002b1c <findslot>
 8002c70:	4604      	mov	r4, r0
 8002c72:	b930      	cbnz	r0, 8002c82 <_write+0x1c>
 8002c74:	f000 fc46 	bl	8003504 <__errno>
 8002c78:	2309      	movs	r3, #9
 8002c7a:	6003      	str	r3, [r0, #0]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	bd70      	pop	{r4, r5, r6, pc}
 8002c82:	462a      	mov	r2, r5
 8002c84:	4631      	mov	r1, r6
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	f7ff ffdd 	bl	8002c46 <_swiwrite>
 8002c8c:	1e03      	subs	r3, r0, #0
 8002c8e:	dbf5      	blt.n	8002c7c <_write+0x16>
 8002c90:	6862      	ldr	r2, [r4, #4]
 8002c92:	1ae8      	subs	r0, r5, r3
 8002c94:	4402      	add	r2, r0
 8002c96:	42ab      	cmp	r3, r5
 8002c98:	6062      	str	r2, [r4, #4]
 8002c9a:	d1f1      	bne.n	8002c80 <_write+0x1a>
 8002c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	f7ff bf55 	b.w	8002b50 <error>

08002ca6 <_swiclose>:
 8002ca6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ca8:	2402      	movs	r4, #2
 8002caa:	9001      	str	r0, [sp, #4]
 8002cac:	ad01      	add	r5, sp, #4
 8002cae:	4620      	mov	r0, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	beab      	bkpt	0x00ab
 8002cb4:	4604      	mov	r4, r0
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff ff58 	bl	8002b6c <checkerror>
 8002cbc:	b003      	add	sp, #12
 8002cbe:	bd30      	pop	{r4, r5, pc}

08002cc0 <_close>:
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	4605      	mov	r5, r0
 8002cc4:	f7ff ff2a 	bl	8002b1c <findslot>
 8002cc8:	4604      	mov	r4, r0
 8002cca:	b930      	cbnz	r0, 8002cda <_close+0x1a>
 8002ccc:	f000 fc1a 	bl	8003504 <__errno>
 8002cd0:	2309      	movs	r3, #9
 8002cd2:	6003      	str	r3, [r0, #0]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
 8002cda:	3d01      	subs	r5, #1
 8002cdc:	2d01      	cmp	r5, #1
 8002cde:	d809      	bhi.n	8002cf4 <_close+0x34>
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <_close+0x48>)
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d104      	bne.n	8002cf4 <_close+0x34>
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	6003      	str	r3, [r0, #0]
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e7f1      	b.n	8002cd8 <_close+0x18>
 8002cf4:	6820      	ldr	r0, [r4, #0]
 8002cf6:	f7ff ffd6 	bl	8002ca6 <_swiclose>
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d1ec      	bne.n	8002cd8 <_close+0x18>
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	6023      	str	r3, [r4, #0]
 8002d04:	e7e8      	b.n	8002cd8 <_close+0x18>
 8002d06:	bf00      	nop
 8002d08:	200001c8 	.word	0x200001c8

08002d0c <_swistat>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	460c      	mov	r4, r1
 8002d10:	f7ff ff04 	bl	8002b1c <findslot>
 8002d14:	4605      	mov	r5, r0
 8002d16:	b930      	cbnz	r0, 8002d26 <_swistat+0x1a>
 8002d18:	f000 fbf4 	bl	8003504 <__errno>
 8002d1c:	2309      	movs	r3, #9
 8002d1e:	6003      	str	r3, [r0, #0]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	6863      	ldr	r3, [r4, #4]
 8002d28:	260c      	movs	r6, #12
 8002d2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d2e:	6063      	str	r3, [r4, #4]
 8002d30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d34:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002d36:	4630      	mov	r0, r6
 8002d38:	4629      	mov	r1, r5
 8002d3a:	beab      	bkpt	0x00ab
 8002d3c:	4605      	mov	r5, r0
 8002d3e:	4628      	mov	r0, r5
 8002d40:	f7ff ff14 	bl	8002b6c <checkerror>
 8002d44:	1c43      	adds	r3, r0, #1
 8002d46:	d0eb      	beq.n	8002d20 <_swistat+0x14>
 8002d48:	6120      	str	r0, [r4, #16]
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e7ea      	b.n	8002d24 <_swistat+0x18>

08002d4e <_fstat>:
 8002d4e:	460b      	mov	r3, r1
 8002d50:	b510      	push	{r4, lr}
 8002d52:	2100      	movs	r1, #0
 8002d54:	4604      	mov	r4, r0
 8002d56:	2258      	movs	r2, #88	@ 0x58
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fb84 	bl	8003466 <memset>
 8002d5e:	4601      	mov	r1, r0
 8002d60:	4620      	mov	r0, r4
 8002d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d66:	f7ff bfd1 	b.w	8002d0c <_swistat>

08002d6a <_stat>:
 8002d6a:	b538      	push	{r3, r4, r5, lr}
 8002d6c:	460d      	mov	r5, r1
 8002d6e:	4604      	mov	r4, r0
 8002d70:	2258      	movs	r2, #88	@ 0x58
 8002d72:	2100      	movs	r1, #0
 8002d74:	4628      	mov	r0, r5
 8002d76:	f000 fb76 	bl	8003466 <memset>
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f000 f811 	bl	8002da4 <_swiopen>
 8002d82:	1c43      	adds	r3, r0, #1
 8002d84:	4604      	mov	r4, r0
 8002d86:	d00b      	beq.n	8002da0 <_stat+0x36>
 8002d88:	686b      	ldr	r3, [r5, #4]
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002d90:	606b      	str	r3, [r5, #4]
 8002d92:	f7ff ffbb 	bl	8002d0c <_swistat>
 8002d96:	4605      	mov	r5, r0
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff ff91 	bl	8002cc0 <_close>
 8002d9e:	462c      	mov	r4, r5
 8002da0:	4620      	mov	r0, r4
 8002da2:	bd38      	pop	{r3, r4, r5, pc}

08002da4 <_swiopen>:
 8002da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da8:	4607      	mov	r7, r0
 8002daa:	460e      	mov	r6, r1
 8002dac:	2400      	movs	r4, #0
 8002dae:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8002e54 <_swiopen+0xb0>
 8002db2:	b096      	sub	sp, #88	@ 0x58
 8002db4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002db8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d032      	beq.n	8002e26 <_swiopen+0x82>
 8002dc0:	3401      	adds	r4, #1
 8002dc2:	2c14      	cmp	r4, #20
 8002dc4:	d1f6      	bne.n	8002db4 <_swiopen+0x10>
 8002dc6:	f000 fb9d 	bl	8003504 <__errno>
 8002dca:	2318      	movs	r3, #24
 8002dcc:	e03a      	b.n	8002e44 <_swiopen+0xa0>
 8002dce:	f240 6301 	movw	r3, #1537	@ 0x601
 8002dd2:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002dd6:	07b2      	lsls	r2, r6, #30
 8002dd8:	bf48      	it	mi
 8002dda:	f045 0502 	orrmi.w	r5, r5, #2
 8002dde:	421e      	tst	r6, r3
 8002de0:	bf18      	it	ne
 8002de2:	f045 0504 	orrne.w	r5, r5, #4
 8002de6:	0733      	lsls	r3, r6, #28
 8002de8:	bf48      	it	mi
 8002dea:	f025 0504 	bicmi.w	r5, r5, #4
 8002dee:	4638      	mov	r0, r7
 8002df0:	bf48      	it	mi
 8002df2:	f045 0508 	orrmi.w	r5, r5, #8
 8002df6:	9700      	str	r7, [sp, #0]
 8002df8:	f7fd f9a8 	bl	800014c <strlen>
 8002dfc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002e00:	2501      	movs	r5, #1
 8002e02:	4628      	mov	r0, r5
 8002e04:	4651      	mov	r1, sl
 8002e06:	beab      	bkpt	0x00ab
 8002e08:	4605      	mov	r5, r0
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	db06      	blt.n	8002e1c <_swiopen+0x78>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	44c8      	add	r8, r9
 8002e12:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8002e16:	f8c8 3004 	str.w	r3, [r8, #4]
 8002e1a:	e016      	b.n	8002e4a <_swiopen+0xa6>
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f7ff fe97 	bl	8002b50 <error>
 8002e22:	4604      	mov	r4, r0
 8002e24:	e011      	b.n	8002e4a <_swiopen+0xa6>
 8002e26:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002e2a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002e2e:	46ea      	mov	sl, sp
 8002e30:	d1cd      	bne.n	8002dce <_swiopen+0x2a>
 8002e32:	4651      	mov	r1, sl
 8002e34:	4638      	mov	r0, r7
 8002e36:	f7ff ff98 	bl	8002d6a <_stat>
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d0c7      	beq.n	8002dce <_swiopen+0x2a>
 8002e3e:	f000 fb61 	bl	8003504 <__errno>
 8002e42:	2311      	movs	r3, #17
 8002e44:	f04f 34ff 	mov.w	r4, #4294967295
 8002e48:	6003      	str	r3, [r0, #0]
 8002e4a:	4620      	mov	r0, r4
 8002e4c:	b016      	add	sp, #88	@ 0x58
 8002e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e52:	bf00      	nop
 8002e54:	200001c8 	.word	0x200001c8

08002e58 <_get_semihosting_exts>:
 8002e58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	460f      	mov	r7, r1
 8002e60:	4829      	ldr	r0, [pc, #164]	@ (8002f08 <_get_semihosting_exts+0xb0>)
 8002e62:	2100      	movs	r1, #0
 8002e64:	4615      	mov	r5, r2
 8002e66:	f7ff ff9d 	bl	8002da4 <_swiopen>
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	462a      	mov	r2, r5
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4630      	mov	r0, r6
 8002e72:	f000 faf8 	bl	8003466 <memset>
 8002e76:	1c63      	adds	r3, r4, #1
 8002e78:	d014      	beq.n	8002ea4 <_get_semihosting_exts+0x4c>
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff fe4e 	bl	8002b1c <findslot>
 8002e80:	f04f 080c 	mov.w	r8, #12
 8002e84:	4681      	mov	r9, r0
 8002e86:	4640      	mov	r0, r8
 8002e88:	4649      	mov	r1, r9
 8002e8a:	beab      	bkpt	0x00ab
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	4640      	mov	r0, r8
 8002e90:	f7ff fe6c 	bl	8002b6c <checkerror>
 8002e94:	2803      	cmp	r0, #3
 8002e96:	dd02      	ble.n	8002e9e <_get_semihosting_exts+0x46>
 8002e98:	1ec3      	subs	r3, r0, #3
 8002e9a:	42ab      	cmp	r3, r5
 8002e9c:	dc07      	bgt.n	8002eae <_get_semihosting_exts+0x56>
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff ff0e 	bl	8002cc0 <_close>
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	b003      	add	sp, #12
 8002eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	eb0d 0102 	add.w	r1, sp, r2
 8002eb6:	f7ff fe6e 	bl	8002b96 <_read>
 8002eba:	2803      	cmp	r0, #3
 8002ebc:	ddef      	ble.n	8002e9e <_get_semihosting_exts+0x46>
 8002ebe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ec2:	2b53      	cmp	r3, #83	@ 0x53
 8002ec4:	d1eb      	bne.n	8002e9e <_get_semihosting_exts+0x46>
 8002ec6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002eca:	2b48      	cmp	r3, #72	@ 0x48
 8002ecc:	d1e7      	bne.n	8002e9e <_get_semihosting_exts+0x46>
 8002ece:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002ed2:	2b46      	cmp	r3, #70	@ 0x46
 8002ed4:	d1e3      	bne.n	8002e9e <_get_semihosting_exts+0x46>
 8002ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002eda:	2b42      	cmp	r3, #66	@ 0x42
 8002edc:	d1df      	bne.n	8002e9e <_get_semihosting_exts+0x46>
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4639      	mov	r1, r7
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff fe71 	bl	8002bca <_swilseek>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	dbd8      	blt.n	8002e9e <_get_semihosting_exts+0x46>
 8002eec:	462a      	mov	r2, r5
 8002eee:	4631      	mov	r1, r6
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff fe50 	bl	8002b96 <_read>
 8002ef6:	4605      	mov	r5, r0
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7ff fee1 	bl	8002cc0 <_close>
 8002efe:	4628      	mov	r0, r5
 8002f00:	f7ff fe34 	bl	8002b6c <checkerror>
 8002f04:	e7d0      	b.n	8002ea8 <_get_semihosting_exts+0x50>
 8002f06:	bf00      	nop
 8002f08:	08004758 	.word	0x08004758

08002f0c <initialise_semihosting_exts>:
 8002f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f0e:	2100      	movs	r1, #0
 8002f10:	2201      	movs	r2, #1
 8002f12:	4d09      	ldr	r5, [pc, #36]	@ (8002f38 <initialise_semihosting_exts+0x2c>)
 8002f14:	4c09      	ldr	r4, [pc, #36]	@ (8002f3c <initialise_semihosting_exts+0x30>)
 8002f16:	a801      	add	r0, sp, #4
 8002f18:	6029      	str	r1, [r5, #0]
 8002f1a:	6022      	str	r2, [r4, #0]
 8002f1c:	f7ff ff9c 	bl	8002e58 <_get_semihosting_exts>
 8002f20:	2800      	cmp	r0, #0
 8002f22:	dd07      	ble.n	8002f34 <initialise_semihosting_exts+0x28>
 8002f24:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002f28:	f003 0201 	and.w	r2, r3, #1
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	602a      	str	r2, [r5, #0]
 8002f32:	6023      	str	r3, [r4, #0]
 8002f34:	b003      	add	sp, #12
 8002f36:	bd30      	pop	{r4, r5, pc}
 8002f38:	20000038 	.word	0x20000038
 8002f3c:	20000034 	.word	0x20000034

08002f40 <_has_ext_stdout_stderr>:
 8002f40:	b510      	push	{r4, lr}
 8002f42:	4c04      	ldr	r4, [pc, #16]	@ (8002f54 <_has_ext_stdout_stderr+0x14>)
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	da01      	bge.n	8002f4e <_has_ext_stdout_stderr+0xe>
 8002f4a:	f7ff ffdf 	bl	8002f0c <initialise_semihosting_exts>
 8002f4e:	6820      	ldr	r0, [r4, #0]
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	bf00      	nop
 8002f54:	20000034 	.word	0x20000034

08002f58 <initialise_monitor_handles>:
 8002f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	2400      	movs	r4, #0
 8002f60:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8003004 <initialise_monitor_handles+0xac>
 8002f64:	b085      	sub	sp, #20
 8002f66:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f6a:	af01      	add	r7, sp, #4
 8002f6c:	9303      	str	r3, [sp, #12]
 8002f6e:	2501      	movs	r5, #1
 8002f70:	9402      	str	r4, [sp, #8]
 8002f72:	4628      	mov	r0, r5
 8002f74:	4639      	mov	r1, r7
 8002f76:	beab      	bkpt	0x00ab
 8002f78:	4605      	mov	r5, r0
 8002f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003008 <initialise_monitor_handles+0xb0>
 8002f82:	4623      	mov	r3, r4
 8002f84:	4c21      	ldr	r4, [pc, #132]	@ (800300c <initialise_monitor_handles+0xb4>)
 8002f86:	f8c8 5000 	str.w	r5, [r8]
 8002f8a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	2b14      	cmp	r3, #20
 8002f92:	d1fa      	bne.n	8002f8a <initialise_monitor_handles+0x32>
 8002f94:	f7ff ffd4 	bl	8002f40 <_has_ext_stdout_stderr>
 8002f98:	4d1d      	ldr	r5, [pc, #116]	@ (8003010 <initialise_monitor_handles+0xb8>)
 8002f9a:	b1d0      	cbz	r0, 8002fd2 <initialise_monitor_handles+0x7a>
 8002f9c:	f04f 0a03 	mov.w	sl, #3
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	f8cd 9004 	str.w	r9, [sp, #4]
 8002fa6:	2601      	movs	r6, #1
 8002fa8:	f8cd a00c 	str.w	sl, [sp, #12]
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	4630      	mov	r0, r6
 8002fb0:	4639      	mov	r1, r7
 8002fb2:	beab      	bkpt	0x00ab
 8002fb4:	4683      	mov	fp, r0
 8002fb6:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <initialise_monitor_handles+0xbc>)
 8002fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8002fbc:	f8c3 b000 	str.w	fp, [r3]
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	f8cd a00c 	str.w	sl, [sp, #12]
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	4630      	mov	r0, r6
 8002fca:	4639      	mov	r1, r7
 8002fcc:	beab      	bkpt	0x00ab
 8002fce:	4606      	mov	r6, r0
 8002fd0:	602e      	str	r6, [r5, #0]
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	682b      	ldr	r3, [r5, #0]
 8002fd6:	6066      	str	r6, [r4, #4]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	bf02      	ittt	eq
 8002fdc:	4b0d      	ldreq	r3, [pc, #52]	@ (8003014 <initialise_monitor_handles+0xbc>)
 8002fde:	681b      	ldreq	r3, [r3, #0]
 8002fe0:	602b      	streq	r3, [r5, #0]
 8002fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fe6:	6023      	str	r3, [r4, #0]
 8002fe8:	f7ff ffaa 	bl	8002f40 <_has_ext_stdout_stderr>
 8002fec:	b130      	cbz	r0, 8002ffc <initialise_monitor_handles+0xa4>
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <initialise_monitor_handles+0xbc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002ff6:	682b      	ldr	r3, [r5, #0]
 8002ff8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002ffc:	b005      	add	sp, #20
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	0800476e 	.word	0x0800476e
 8003008:	200001c4 	.word	0x200001c4
 800300c:	200001c8 	.word	0x200001c8
 8003010:	200001bc 	.word	0x200001bc
 8003014:	200001c0 	.word	0x200001c0

08003018 <_isatty>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	f7ff fd7f 	bl	8002b1c <findslot>
 800301e:	2409      	movs	r4, #9
 8003020:	4605      	mov	r5, r0
 8003022:	b920      	cbnz	r0, 800302e <_isatty+0x16>
 8003024:	f000 fa6e 	bl	8003504 <__errno>
 8003028:	6004      	str	r4, [r0, #0]
 800302a:	2000      	movs	r0, #0
 800302c:	bd70      	pop	{r4, r5, r6, pc}
 800302e:	4620      	mov	r0, r4
 8003030:	4629      	mov	r1, r5
 8003032:	beab      	bkpt	0x00ab
 8003034:	4604      	mov	r4, r0
 8003036:	2c01      	cmp	r4, #1
 8003038:	4620      	mov	r0, r4
 800303a:	d0f7      	beq.n	800302c <_isatty+0x14>
 800303c:	f000 fa62 	bl	8003504 <__errno>
 8003040:	2513      	movs	r5, #19
 8003042:	4604      	mov	r4, r0
 8003044:	2600      	movs	r6, #0
 8003046:	4628      	mov	r0, r5
 8003048:	4631      	mov	r1, r6
 800304a:	beab      	bkpt	0x00ab
 800304c:	4605      	mov	r5, r0
 800304e:	6025      	str	r5, [r4, #0]
 8003050:	e7eb      	b.n	800302a <_isatty+0x12>
	...

08003054 <__sflush_r>:
 8003054:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	0716      	lsls	r6, r2, #28
 800305c:	4605      	mov	r5, r0
 800305e:	460c      	mov	r4, r1
 8003060:	d454      	bmi.n	800310c <__sflush_r+0xb8>
 8003062:	684b      	ldr	r3, [r1, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	dc02      	bgt.n	800306e <__sflush_r+0x1a>
 8003068:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	dd48      	ble.n	8003100 <__sflush_r+0xac>
 800306e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003070:	2e00      	cmp	r6, #0
 8003072:	d045      	beq.n	8003100 <__sflush_r+0xac>
 8003074:	2300      	movs	r3, #0
 8003076:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800307a:	682f      	ldr	r7, [r5, #0]
 800307c:	6a21      	ldr	r1, [r4, #32]
 800307e:	602b      	str	r3, [r5, #0]
 8003080:	d030      	beq.n	80030e4 <__sflush_r+0x90>
 8003082:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	0759      	lsls	r1, r3, #29
 8003088:	d505      	bpl.n	8003096 <__sflush_r+0x42>
 800308a:	6863      	ldr	r3, [r4, #4]
 800308c:	1ad2      	subs	r2, r2, r3
 800308e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003090:	b10b      	cbz	r3, 8003096 <__sflush_r+0x42>
 8003092:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003094:	1ad2      	subs	r2, r2, r3
 8003096:	2300      	movs	r3, #0
 8003098:	4628      	mov	r0, r5
 800309a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800309c:	6a21      	ldr	r1, [r4, #32]
 800309e:	47b0      	blx	r6
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	d106      	bne.n	80030b4 <__sflush_r+0x60>
 80030a6:	6829      	ldr	r1, [r5, #0]
 80030a8:	291d      	cmp	r1, #29
 80030aa:	d82b      	bhi.n	8003104 <__sflush_r+0xb0>
 80030ac:	4a28      	ldr	r2, [pc, #160]	@ (8003150 <__sflush_r+0xfc>)
 80030ae:	40ca      	lsrs	r2, r1
 80030b0:	07d6      	lsls	r6, r2, #31
 80030b2:	d527      	bpl.n	8003104 <__sflush_r+0xb0>
 80030b4:	2200      	movs	r2, #0
 80030b6:	6062      	str	r2, [r4, #4]
 80030b8:	6922      	ldr	r2, [r4, #16]
 80030ba:	04d9      	lsls	r1, r3, #19
 80030bc:	6022      	str	r2, [r4, #0]
 80030be:	d504      	bpl.n	80030ca <__sflush_r+0x76>
 80030c0:	1c42      	adds	r2, r0, #1
 80030c2:	d101      	bne.n	80030c8 <__sflush_r+0x74>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b903      	cbnz	r3, 80030ca <__sflush_r+0x76>
 80030c8:	6560      	str	r0, [r4, #84]	@ 0x54
 80030ca:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030cc:	602f      	str	r7, [r5, #0]
 80030ce:	b1b9      	cbz	r1, 8003100 <__sflush_r+0xac>
 80030d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030d4:	4299      	cmp	r1, r3
 80030d6:	d002      	beq.n	80030de <__sflush_r+0x8a>
 80030d8:	4628      	mov	r0, r5
 80030da:	f000 fa41 	bl	8003560 <_free_r>
 80030de:	2300      	movs	r3, #0
 80030e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80030e2:	e00d      	b.n	8003100 <__sflush_r+0xac>
 80030e4:	2301      	movs	r3, #1
 80030e6:	4628      	mov	r0, r5
 80030e8:	47b0      	blx	r6
 80030ea:	4602      	mov	r2, r0
 80030ec:	1c50      	adds	r0, r2, #1
 80030ee:	d1c9      	bne.n	8003084 <__sflush_r+0x30>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c6      	beq.n	8003084 <__sflush_r+0x30>
 80030f6:	2b1d      	cmp	r3, #29
 80030f8:	d001      	beq.n	80030fe <__sflush_r+0xaa>
 80030fa:	2b16      	cmp	r3, #22
 80030fc:	d11d      	bne.n	800313a <__sflush_r+0xe6>
 80030fe:	602f      	str	r7, [r5, #0]
 8003100:	2000      	movs	r0, #0
 8003102:	e021      	b.n	8003148 <__sflush_r+0xf4>
 8003104:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003108:	b21b      	sxth	r3, r3
 800310a:	e01a      	b.n	8003142 <__sflush_r+0xee>
 800310c:	690f      	ldr	r7, [r1, #16]
 800310e:	2f00      	cmp	r7, #0
 8003110:	d0f6      	beq.n	8003100 <__sflush_r+0xac>
 8003112:	0793      	lsls	r3, r2, #30
 8003114:	bf18      	it	ne
 8003116:	2300      	movne	r3, #0
 8003118:	680e      	ldr	r6, [r1, #0]
 800311a:	bf08      	it	eq
 800311c:	694b      	ldreq	r3, [r1, #20]
 800311e:	1bf6      	subs	r6, r6, r7
 8003120:	600f      	str	r7, [r1, #0]
 8003122:	608b      	str	r3, [r1, #8]
 8003124:	2e00      	cmp	r6, #0
 8003126:	ddeb      	ble.n	8003100 <__sflush_r+0xac>
 8003128:	4633      	mov	r3, r6
 800312a:	463a      	mov	r2, r7
 800312c:	4628      	mov	r0, r5
 800312e:	6a21      	ldr	r1, [r4, #32]
 8003130:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003134:	47e0      	blx	ip
 8003136:	2800      	cmp	r0, #0
 8003138:	dc07      	bgt.n	800314a <__sflush_r+0xf6>
 800313a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800313e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003142:	f04f 30ff 	mov.w	r0, #4294967295
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800314a:	4407      	add	r7, r0
 800314c:	1a36      	subs	r6, r6, r0
 800314e:	e7e9      	b.n	8003124 <__sflush_r+0xd0>
 8003150:	20400001 	.word	0x20400001

08003154 <_fflush_r>:
 8003154:	b538      	push	{r3, r4, r5, lr}
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	4605      	mov	r5, r0
 800315a:	460c      	mov	r4, r1
 800315c:	b913      	cbnz	r3, 8003164 <_fflush_r+0x10>
 800315e:	2500      	movs	r5, #0
 8003160:	4628      	mov	r0, r5
 8003162:	bd38      	pop	{r3, r4, r5, pc}
 8003164:	b118      	cbz	r0, 800316e <_fflush_r+0x1a>
 8003166:	6a03      	ldr	r3, [r0, #32]
 8003168:	b90b      	cbnz	r3, 800316e <_fflush_r+0x1a>
 800316a:	f000 f8bb 	bl	80032e4 <__sinit>
 800316e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f3      	beq.n	800315e <_fflush_r+0xa>
 8003176:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003178:	07d0      	lsls	r0, r2, #31
 800317a:	d404      	bmi.n	8003186 <_fflush_r+0x32>
 800317c:	0599      	lsls	r1, r3, #22
 800317e:	d402      	bmi.n	8003186 <_fflush_r+0x32>
 8003180:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003182:	f000 f9ea 	bl	800355a <__retarget_lock_acquire_recursive>
 8003186:	4628      	mov	r0, r5
 8003188:	4621      	mov	r1, r4
 800318a:	f7ff ff63 	bl	8003054 <__sflush_r>
 800318e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003190:	4605      	mov	r5, r0
 8003192:	07da      	lsls	r2, r3, #31
 8003194:	d4e4      	bmi.n	8003160 <_fflush_r+0xc>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	059b      	lsls	r3, r3, #22
 800319a:	d4e1      	bmi.n	8003160 <_fflush_r+0xc>
 800319c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800319e:	f000 f9dd 	bl	800355c <__retarget_lock_release_recursive>
 80031a2:	e7dd      	b.n	8003160 <_fflush_r+0xc>

080031a4 <fflush>:
 80031a4:	4601      	mov	r1, r0
 80031a6:	b920      	cbnz	r0, 80031b2 <fflush+0xe>
 80031a8:	4a04      	ldr	r2, [pc, #16]	@ (80031bc <fflush+0x18>)
 80031aa:	4905      	ldr	r1, [pc, #20]	@ (80031c0 <fflush+0x1c>)
 80031ac:	4805      	ldr	r0, [pc, #20]	@ (80031c4 <fflush+0x20>)
 80031ae:	f000 b8b1 	b.w	8003314 <_fwalk_sglue>
 80031b2:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <fflush+0x24>)
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	f7ff bfcd 	b.w	8003154 <_fflush_r>
 80031ba:	bf00      	nop
 80031bc:	2000003c 	.word	0x2000003c
 80031c0:	08003155 	.word	0x08003155
 80031c4:	2000004c 	.word	0x2000004c
 80031c8:	20000048 	.word	0x20000048

080031cc <std>:
 80031cc:	2300      	movs	r3, #0
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
 80031d2:	e9c0 3300 	strd	r3, r3, [r0]
 80031d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031da:	6083      	str	r3, [r0, #8]
 80031dc:	8181      	strh	r1, [r0, #12]
 80031de:	6643      	str	r3, [r0, #100]	@ 0x64
 80031e0:	81c2      	strh	r2, [r0, #14]
 80031e2:	6183      	str	r3, [r0, #24]
 80031e4:	4619      	mov	r1, r3
 80031e6:	2208      	movs	r2, #8
 80031e8:	305c      	adds	r0, #92	@ 0x5c
 80031ea:	f000 f93c 	bl	8003466 <memset>
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <std+0x58>)
 80031f0:	6224      	str	r4, [r4, #32]
 80031f2:	6263      	str	r3, [r4, #36]	@ 0x24
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <std+0x5c>)
 80031f6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031f8:	4b0c      	ldr	r3, [pc, #48]	@ (800322c <std+0x60>)
 80031fa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <std+0x64>)
 80031fe:	6323      	str	r3, [r4, #48]	@ 0x30
 8003200:	4b0c      	ldr	r3, [pc, #48]	@ (8003234 <std+0x68>)
 8003202:	429c      	cmp	r4, r3
 8003204:	d006      	beq.n	8003214 <std+0x48>
 8003206:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800320a:	4294      	cmp	r4, r2
 800320c:	d002      	beq.n	8003214 <std+0x48>
 800320e:	33d0      	adds	r3, #208	@ 0xd0
 8003210:	429c      	cmp	r4, r3
 8003212:	d105      	bne.n	8003220 <std+0x54>
 8003214:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800321c:	f000 b99c 	b.w	8003558 <__retarget_lock_init_recursive>
 8003220:	bd10      	pop	{r4, pc}
 8003222:	bf00      	nop
 8003224:	080033e1 	.word	0x080033e1
 8003228:	08003403 	.word	0x08003403
 800322c:	0800343b 	.word	0x0800343b
 8003230:	0800345f 	.word	0x0800345f
 8003234:	20000268 	.word	0x20000268

08003238 <stdio_exit_handler>:
 8003238:	4a02      	ldr	r2, [pc, #8]	@ (8003244 <stdio_exit_handler+0xc>)
 800323a:	4903      	ldr	r1, [pc, #12]	@ (8003248 <stdio_exit_handler+0x10>)
 800323c:	4803      	ldr	r0, [pc, #12]	@ (800324c <stdio_exit_handler+0x14>)
 800323e:	f000 b869 	b.w	8003314 <_fwalk_sglue>
 8003242:	bf00      	nop
 8003244:	2000003c 	.word	0x2000003c
 8003248:	08003155 	.word	0x08003155
 800324c:	2000004c 	.word	0x2000004c

08003250 <cleanup_stdio>:
 8003250:	6841      	ldr	r1, [r0, #4]
 8003252:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <cleanup_stdio+0x34>)
 8003254:	b510      	push	{r4, lr}
 8003256:	4299      	cmp	r1, r3
 8003258:	4604      	mov	r4, r0
 800325a:	d001      	beq.n	8003260 <cleanup_stdio+0x10>
 800325c:	f7ff ff7a 	bl	8003154 <_fflush_r>
 8003260:	68a1      	ldr	r1, [r4, #8]
 8003262:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <cleanup_stdio+0x38>)
 8003264:	4299      	cmp	r1, r3
 8003266:	d002      	beq.n	800326e <cleanup_stdio+0x1e>
 8003268:	4620      	mov	r0, r4
 800326a:	f7ff ff73 	bl	8003154 <_fflush_r>
 800326e:	68e1      	ldr	r1, [r4, #12]
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <cleanup_stdio+0x3c>)
 8003272:	4299      	cmp	r1, r3
 8003274:	d004      	beq.n	8003280 <cleanup_stdio+0x30>
 8003276:	4620      	mov	r0, r4
 8003278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800327c:	f7ff bf6a 	b.w	8003154 <_fflush_r>
 8003280:	bd10      	pop	{r4, pc}
 8003282:	bf00      	nop
 8003284:	20000268 	.word	0x20000268
 8003288:	200002d0 	.word	0x200002d0
 800328c:	20000338 	.word	0x20000338

08003290 <global_stdio_init.part.0>:
 8003290:	b510      	push	{r4, lr}
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <global_stdio_init.part.0+0x30>)
 8003294:	4c0b      	ldr	r4, [pc, #44]	@ (80032c4 <global_stdio_init.part.0+0x34>)
 8003296:	4a0c      	ldr	r2, [pc, #48]	@ (80032c8 <global_stdio_init.part.0+0x38>)
 8003298:	4620      	mov	r0, r4
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	2104      	movs	r1, #4
 800329e:	2200      	movs	r2, #0
 80032a0:	f7ff ff94 	bl	80031cc <std>
 80032a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80032a8:	2201      	movs	r2, #1
 80032aa:	2109      	movs	r1, #9
 80032ac:	f7ff ff8e 	bl	80031cc <std>
 80032b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80032b4:	2202      	movs	r2, #2
 80032b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ba:	2112      	movs	r1, #18
 80032bc:	f7ff bf86 	b.w	80031cc <std>
 80032c0:	200003a0 	.word	0x200003a0
 80032c4:	20000268 	.word	0x20000268
 80032c8:	08003239 	.word	0x08003239

080032cc <__sfp_lock_acquire>:
 80032cc:	4801      	ldr	r0, [pc, #4]	@ (80032d4 <__sfp_lock_acquire+0x8>)
 80032ce:	f000 b944 	b.w	800355a <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	200003a9 	.word	0x200003a9

080032d8 <__sfp_lock_release>:
 80032d8:	4801      	ldr	r0, [pc, #4]	@ (80032e0 <__sfp_lock_release+0x8>)
 80032da:	f000 b93f 	b.w	800355c <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	200003a9 	.word	0x200003a9

080032e4 <__sinit>:
 80032e4:	b510      	push	{r4, lr}
 80032e6:	4604      	mov	r4, r0
 80032e8:	f7ff fff0 	bl	80032cc <__sfp_lock_acquire>
 80032ec:	6a23      	ldr	r3, [r4, #32]
 80032ee:	b11b      	cbz	r3, 80032f8 <__sinit+0x14>
 80032f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f4:	f7ff bff0 	b.w	80032d8 <__sfp_lock_release>
 80032f8:	4b04      	ldr	r3, [pc, #16]	@ (800330c <__sinit+0x28>)
 80032fa:	6223      	str	r3, [r4, #32]
 80032fc:	4b04      	ldr	r3, [pc, #16]	@ (8003310 <__sinit+0x2c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f5      	bne.n	80032f0 <__sinit+0xc>
 8003304:	f7ff ffc4 	bl	8003290 <global_stdio_init.part.0>
 8003308:	e7f2      	b.n	80032f0 <__sinit+0xc>
 800330a:	bf00      	nop
 800330c:	08003251 	.word	0x08003251
 8003310:	200003a0 	.word	0x200003a0

08003314 <_fwalk_sglue>:
 8003314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003318:	4607      	mov	r7, r0
 800331a:	4688      	mov	r8, r1
 800331c:	4614      	mov	r4, r2
 800331e:	2600      	movs	r6, #0
 8003320:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003324:	f1b9 0901 	subs.w	r9, r9, #1
 8003328:	d505      	bpl.n	8003336 <_fwalk_sglue+0x22>
 800332a:	6824      	ldr	r4, [r4, #0]
 800332c:	2c00      	cmp	r4, #0
 800332e:	d1f7      	bne.n	8003320 <_fwalk_sglue+0xc>
 8003330:	4630      	mov	r0, r6
 8003332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003336:	89ab      	ldrh	r3, [r5, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d907      	bls.n	800334c <_fwalk_sglue+0x38>
 800333c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003340:	3301      	adds	r3, #1
 8003342:	d003      	beq.n	800334c <_fwalk_sglue+0x38>
 8003344:	4629      	mov	r1, r5
 8003346:	4638      	mov	r0, r7
 8003348:	47c0      	blx	r8
 800334a:	4306      	orrs	r6, r0
 800334c:	3568      	adds	r5, #104	@ 0x68
 800334e:	e7e9      	b.n	8003324 <_fwalk_sglue+0x10>

08003350 <iprintf>:
 8003350:	b40f      	push	{r0, r1, r2, r3}
 8003352:	b507      	push	{r0, r1, r2, lr}
 8003354:	4906      	ldr	r1, [pc, #24]	@ (8003370 <iprintf+0x20>)
 8003356:	ab04      	add	r3, sp, #16
 8003358:	6808      	ldr	r0, [r1, #0]
 800335a:	f853 2b04 	ldr.w	r2, [r3], #4
 800335e:	6881      	ldr	r1, [r0, #8]
 8003360:	9301      	str	r3, [sp, #4]
 8003362:	f000 fb73 	bl	8003a4c <_vfiprintf_r>
 8003366:	b003      	add	sp, #12
 8003368:	f85d eb04 	ldr.w	lr, [sp], #4
 800336c:	b004      	add	sp, #16
 800336e:	4770      	bx	lr
 8003370:	20000048 	.word	0x20000048

08003374 <sniprintf>:
 8003374:	b40c      	push	{r2, r3}
 8003376:	b530      	push	{r4, r5, lr}
 8003378:	4b18      	ldr	r3, [pc, #96]	@ (80033dc <sniprintf+0x68>)
 800337a:	1e0c      	subs	r4, r1, #0
 800337c:	681d      	ldr	r5, [r3, #0]
 800337e:	b09d      	sub	sp, #116	@ 0x74
 8003380:	da08      	bge.n	8003394 <sniprintf+0x20>
 8003382:	238b      	movs	r3, #139	@ 0x8b
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	b01d      	add	sp, #116	@ 0x74
 800338c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003390:	b002      	add	sp, #8
 8003392:	4770      	bx	lr
 8003394:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003398:	f8ad 3014 	strh.w	r3, [sp, #20]
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80033a2:	bf0c      	ite	eq
 80033a4:	4623      	moveq	r3, r4
 80033a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80033aa:	9304      	str	r3, [sp, #16]
 80033ac:	9307      	str	r3, [sp, #28]
 80033ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033b2:	9002      	str	r0, [sp, #8]
 80033b4:	9006      	str	r0, [sp, #24]
 80033b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80033ba:	4628      	mov	r0, r5
 80033bc:	ab21      	add	r3, sp, #132	@ 0x84
 80033be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80033c0:	a902      	add	r1, sp, #8
 80033c2:	9301      	str	r3, [sp, #4]
 80033c4:	f000 fa1e 	bl	8003804 <_svfiprintf_r>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	bfbc      	itt	lt
 80033cc:	238b      	movlt	r3, #139	@ 0x8b
 80033ce:	602b      	strlt	r3, [r5, #0]
 80033d0:	2c00      	cmp	r4, #0
 80033d2:	d0da      	beq.n	800338a <sniprintf+0x16>
 80033d4:	2200      	movs	r2, #0
 80033d6:	9b02      	ldr	r3, [sp, #8]
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e7d6      	b.n	800338a <sniprintf+0x16>
 80033dc:	20000048 	.word	0x20000048

080033e0 <__sread>:
 80033e0:	b510      	push	{r4, lr}
 80033e2:	460c      	mov	r4, r1
 80033e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e8:	f000 f868 	bl	80034bc <_read_r>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	bfab      	itete	ge
 80033f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033f2:	89a3      	ldrhlt	r3, [r4, #12]
 80033f4:	181b      	addge	r3, r3, r0
 80033f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033fa:	bfac      	ite	ge
 80033fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033fe:	81a3      	strhlt	r3, [r4, #12]
 8003400:	bd10      	pop	{r4, pc}

08003402 <__swrite>:
 8003402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003406:	461f      	mov	r7, r3
 8003408:	898b      	ldrh	r3, [r1, #12]
 800340a:	4605      	mov	r5, r0
 800340c:	05db      	lsls	r3, r3, #23
 800340e:	460c      	mov	r4, r1
 8003410:	4616      	mov	r6, r2
 8003412:	d505      	bpl.n	8003420 <__swrite+0x1e>
 8003414:	2302      	movs	r3, #2
 8003416:	2200      	movs	r2, #0
 8003418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341c:	f000 f83c 	bl	8003498 <_lseek_r>
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	4632      	mov	r2, r6
 8003424:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	4628      	mov	r0, r5
 800342c:	463b      	mov	r3, r7
 800342e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003436:	f000 b853 	b.w	80034e0 <_write_r>

0800343a <__sseek>:
 800343a:	b510      	push	{r4, lr}
 800343c:	460c      	mov	r4, r1
 800343e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003442:	f000 f829 	bl	8003498 <_lseek_r>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	89a3      	ldrh	r3, [r4, #12]
 800344a:	bf15      	itete	ne
 800344c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800344e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003452:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003456:	81a3      	strheq	r3, [r4, #12]
 8003458:	bf18      	it	ne
 800345a:	81a3      	strhne	r3, [r4, #12]
 800345c:	bd10      	pop	{r4, pc}

0800345e <__sclose>:
 800345e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003462:	f000 b809 	b.w	8003478 <_close_r>

08003466 <memset>:
 8003466:	4603      	mov	r3, r0
 8003468:	4402      	add	r2, r0
 800346a:	4293      	cmp	r3, r2
 800346c:	d100      	bne.n	8003470 <memset+0xa>
 800346e:	4770      	bx	lr
 8003470:	f803 1b01 	strb.w	r1, [r3], #1
 8003474:	e7f9      	b.n	800346a <memset+0x4>
	...

08003478 <_close_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	2300      	movs	r3, #0
 800347c:	4d05      	ldr	r5, [pc, #20]	@ (8003494 <_close_r+0x1c>)
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	602b      	str	r3, [r5, #0]
 8003484:	f7ff fc1c 	bl	8002cc0 <_close>
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d102      	bne.n	8003492 <_close_r+0x1a>
 800348c:	682b      	ldr	r3, [r5, #0]
 800348e:	b103      	cbz	r3, 8003492 <_close_r+0x1a>
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	bd38      	pop	{r3, r4, r5, pc}
 8003494:	200003a4 	.word	0x200003a4

08003498 <_lseek_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	4604      	mov	r4, r0
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	2200      	movs	r2, #0
 80034a2:	4d05      	ldr	r5, [pc, #20]	@ (80034b8 <_lseek_r+0x20>)
 80034a4:	602a      	str	r2, [r5, #0]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f7ff fbcb 	bl	8002c42 <_lseek>
 80034ac:	1c43      	adds	r3, r0, #1
 80034ae:	d102      	bne.n	80034b6 <_lseek_r+0x1e>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	b103      	cbz	r3, 80034b6 <_lseek_r+0x1e>
 80034b4:	6023      	str	r3, [r4, #0]
 80034b6:	bd38      	pop	{r3, r4, r5, pc}
 80034b8:	200003a4 	.word	0x200003a4

080034bc <_read_r>:
 80034bc:	b538      	push	{r3, r4, r5, lr}
 80034be:	4604      	mov	r4, r0
 80034c0:	4608      	mov	r0, r1
 80034c2:	4611      	mov	r1, r2
 80034c4:	2200      	movs	r2, #0
 80034c6:	4d05      	ldr	r5, [pc, #20]	@ (80034dc <_read_r+0x20>)
 80034c8:	602a      	str	r2, [r5, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7ff fb63 	bl	8002b96 <_read>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d102      	bne.n	80034da <_read_r+0x1e>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	b103      	cbz	r3, 80034da <_read_r+0x1e>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	200003a4 	.word	0x200003a4

080034e0 <_write_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	4604      	mov	r4, r0
 80034e4:	4608      	mov	r0, r1
 80034e6:	4611      	mov	r1, r2
 80034e8:	2200      	movs	r2, #0
 80034ea:	4d05      	ldr	r5, [pc, #20]	@ (8003500 <_write_r+0x20>)
 80034ec:	602a      	str	r2, [r5, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f7ff fbb9 	bl	8002c66 <_write>
 80034f4:	1c43      	adds	r3, r0, #1
 80034f6:	d102      	bne.n	80034fe <_write_r+0x1e>
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	b103      	cbz	r3, 80034fe <_write_r+0x1e>
 80034fc:	6023      	str	r3, [r4, #0]
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	200003a4 	.word	0x200003a4

08003504 <__errno>:
 8003504:	4b01      	ldr	r3, [pc, #4]	@ (800350c <__errno+0x8>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	20000048 	.word	0x20000048

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2600      	movs	r6, #0
 8003514:	4d0c      	ldr	r5, [pc, #48]	@ (8003548 <__libc_init_array+0x38>)
 8003516:	4c0d      	ldr	r4, [pc, #52]	@ (800354c <__libc_init_array+0x3c>)
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	f000 fed0 	bl	80042c4 <_init>
 8003524:	2600      	movs	r6, #0
 8003526:	4d0a      	ldr	r5, [pc, #40]	@ (8003550 <__libc_init_array+0x40>)
 8003528:	4c0a      	ldr	r4, [pc, #40]	@ (8003554 <__libc_init_array+0x44>)
 800352a:	1b64      	subs	r4, r4, r5
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	f855 3b04 	ldr.w	r3, [r5], #4
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	080047b0 	.word	0x080047b0
 800354c:	080047b0 	.word	0x080047b0
 8003550:	080047b0 	.word	0x080047b0
 8003554:	080047b4 	.word	0x080047b4

08003558 <__retarget_lock_init_recursive>:
 8003558:	4770      	bx	lr

0800355a <__retarget_lock_acquire_recursive>:
 800355a:	4770      	bx	lr

0800355c <__retarget_lock_release_recursive>:
 800355c:	4770      	bx	lr
	...

08003560 <_free_r>:
 8003560:	b538      	push	{r3, r4, r5, lr}
 8003562:	4605      	mov	r5, r0
 8003564:	2900      	cmp	r1, #0
 8003566:	d040      	beq.n	80035ea <_free_r+0x8a>
 8003568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800356c:	1f0c      	subs	r4, r1, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	bfb8      	it	lt
 8003572:	18e4      	addlt	r4, r4, r3
 8003574:	f000 f8de 	bl	8003734 <__malloc_lock>
 8003578:	4a1c      	ldr	r2, [pc, #112]	@ (80035ec <_free_r+0x8c>)
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	b933      	cbnz	r3, 800358c <_free_r+0x2c>
 800357e:	6063      	str	r3, [r4, #4]
 8003580:	6014      	str	r4, [r2, #0]
 8003582:	4628      	mov	r0, r5
 8003584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003588:	f000 b8da 	b.w	8003740 <__malloc_unlock>
 800358c:	42a3      	cmp	r3, r4
 800358e:	d908      	bls.n	80035a2 <_free_r+0x42>
 8003590:	6820      	ldr	r0, [r4, #0]
 8003592:	1821      	adds	r1, r4, r0
 8003594:	428b      	cmp	r3, r1
 8003596:	bf01      	itttt	eq
 8003598:	6819      	ldreq	r1, [r3, #0]
 800359a:	685b      	ldreq	r3, [r3, #4]
 800359c:	1809      	addeq	r1, r1, r0
 800359e:	6021      	streq	r1, [r4, #0]
 80035a0:	e7ed      	b.n	800357e <_free_r+0x1e>
 80035a2:	461a      	mov	r2, r3
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	b10b      	cbz	r3, 80035ac <_free_r+0x4c>
 80035a8:	42a3      	cmp	r3, r4
 80035aa:	d9fa      	bls.n	80035a2 <_free_r+0x42>
 80035ac:	6811      	ldr	r1, [r2, #0]
 80035ae:	1850      	adds	r0, r2, r1
 80035b0:	42a0      	cmp	r0, r4
 80035b2:	d10b      	bne.n	80035cc <_free_r+0x6c>
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	4401      	add	r1, r0
 80035b8:	1850      	adds	r0, r2, r1
 80035ba:	4283      	cmp	r3, r0
 80035bc:	6011      	str	r1, [r2, #0]
 80035be:	d1e0      	bne.n	8003582 <_free_r+0x22>
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4408      	add	r0, r1
 80035c6:	6010      	str	r0, [r2, #0]
 80035c8:	6053      	str	r3, [r2, #4]
 80035ca:	e7da      	b.n	8003582 <_free_r+0x22>
 80035cc:	d902      	bls.n	80035d4 <_free_r+0x74>
 80035ce:	230c      	movs	r3, #12
 80035d0:	602b      	str	r3, [r5, #0]
 80035d2:	e7d6      	b.n	8003582 <_free_r+0x22>
 80035d4:	6820      	ldr	r0, [r4, #0]
 80035d6:	1821      	adds	r1, r4, r0
 80035d8:	428b      	cmp	r3, r1
 80035da:	bf01      	itttt	eq
 80035dc:	6819      	ldreq	r1, [r3, #0]
 80035de:	685b      	ldreq	r3, [r3, #4]
 80035e0:	1809      	addeq	r1, r1, r0
 80035e2:	6021      	streq	r1, [r4, #0]
 80035e4:	6063      	str	r3, [r4, #4]
 80035e6:	6054      	str	r4, [r2, #4]
 80035e8:	e7cb      	b.n	8003582 <_free_r+0x22>
 80035ea:	bd38      	pop	{r3, r4, r5, pc}
 80035ec:	200003b0 	.word	0x200003b0

080035f0 <sbrk_aligned>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003630 <sbrk_aligned+0x40>)
 80035f4:	460c      	mov	r4, r1
 80035f6:	6831      	ldr	r1, [r6, #0]
 80035f8:	4605      	mov	r5, r0
 80035fa:	b911      	cbnz	r1, 8003602 <sbrk_aligned+0x12>
 80035fc:	f000 fd7c 	bl	80040f8 <_sbrk_r>
 8003600:	6030      	str	r0, [r6, #0]
 8003602:	4621      	mov	r1, r4
 8003604:	4628      	mov	r0, r5
 8003606:	f000 fd77 	bl	80040f8 <_sbrk_r>
 800360a:	1c43      	adds	r3, r0, #1
 800360c:	d103      	bne.n	8003616 <sbrk_aligned+0x26>
 800360e:	f04f 34ff 	mov.w	r4, #4294967295
 8003612:	4620      	mov	r0, r4
 8003614:	bd70      	pop	{r4, r5, r6, pc}
 8003616:	1cc4      	adds	r4, r0, #3
 8003618:	f024 0403 	bic.w	r4, r4, #3
 800361c:	42a0      	cmp	r0, r4
 800361e:	d0f8      	beq.n	8003612 <sbrk_aligned+0x22>
 8003620:	1a21      	subs	r1, r4, r0
 8003622:	4628      	mov	r0, r5
 8003624:	f000 fd68 	bl	80040f8 <_sbrk_r>
 8003628:	3001      	adds	r0, #1
 800362a:	d1f2      	bne.n	8003612 <sbrk_aligned+0x22>
 800362c:	e7ef      	b.n	800360e <sbrk_aligned+0x1e>
 800362e:	bf00      	nop
 8003630:	200003ac 	.word	0x200003ac

08003634 <_malloc_r>:
 8003634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003638:	1ccd      	adds	r5, r1, #3
 800363a:	f025 0503 	bic.w	r5, r5, #3
 800363e:	3508      	adds	r5, #8
 8003640:	2d0c      	cmp	r5, #12
 8003642:	bf38      	it	cc
 8003644:	250c      	movcc	r5, #12
 8003646:	2d00      	cmp	r5, #0
 8003648:	4606      	mov	r6, r0
 800364a:	db01      	blt.n	8003650 <_malloc_r+0x1c>
 800364c:	42a9      	cmp	r1, r5
 800364e:	d904      	bls.n	800365a <_malloc_r+0x26>
 8003650:	230c      	movs	r3, #12
 8003652:	6033      	str	r3, [r6, #0]
 8003654:	2000      	movs	r0, #0
 8003656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800365a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003730 <_malloc_r+0xfc>
 800365e:	f000 f869 	bl	8003734 <__malloc_lock>
 8003662:	f8d8 3000 	ldr.w	r3, [r8]
 8003666:	461c      	mov	r4, r3
 8003668:	bb44      	cbnz	r4, 80036bc <_malloc_r+0x88>
 800366a:	4629      	mov	r1, r5
 800366c:	4630      	mov	r0, r6
 800366e:	f7ff ffbf 	bl	80035f0 <sbrk_aligned>
 8003672:	1c43      	adds	r3, r0, #1
 8003674:	4604      	mov	r4, r0
 8003676:	d158      	bne.n	800372a <_malloc_r+0xf6>
 8003678:	f8d8 4000 	ldr.w	r4, [r8]
 800367c:	4627      	mov	r7, r4
 800367e:	2f00      	cmp	r7, #0
 8003680:	d143      	bne.n	800370a <_malloc_r+0xd6>
 8003682:	2c00      	cmp	r4, #0
 8003684:	d04b      	beq.n	800371e <_malloc_r+0xea>
 8003686:	6823      	ldr	r3, [r4, #0]
 8003688:	4639      	mov	r1, r7
 800368a:	4630      	mov	r0, r6
 800368c:	eb04 0903 	add.w	r9, r4, r3
 8003690:	f000 fd32 	bl	80040f8 <_sbrk_r>
 8003694:	4581      	cmp	r9, r0
 8003696:	d142      	bne.n	800371e <_malloc_r+0xea>
 8003698:	6821      	ldr	r1, [r4, #0]
 800369a:	4630      	mov	r0, r6
 800369c:	1a6d      	subs	r5, r5, r1
 800369e:	4629      	mov	r1, r5
 80036a0:	f7ff ffa6 	bl	80035f0 <sbrk_aligned>
 80036a4:	3001      	adds	r0, #1
 80036a6:	d03a      	beq.n	800371e <_malloc_r+0xea>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	442b      	add	r3, r5
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	f8d8 3000 	ldr.w	r3, [r8]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	bb62      	cbnz	r2, 8003710 <_malloc_r+0xdc>
 80036b6:	f8c8 7000 	str.w	r7, [r8]
 80036ba:	e00f      	b.n	80036dc <_malloc_r+0xa8>
 80036bc:	6822      	ldr	r2, [r4, #0]
 80036be:	1b52      	subs	r2, r2, r5
 80036c0:	d420      	bmi.n	8003704 <_malloc_r+0xd0>
 80036c2:	2a0b      	cmp	r2, #11
 80036c4:	d917      	bls.n	80036f6 <_malloc_r+0xc2>
 80036c6:	1961      	adds	r1, r4, r5
 80036c8:	42a3      	cmp	r3, r4
 80036ca:	6025      	str	r5, [r4, #0]
 80036cc:	bf18      	it	ne
 80036ce:	6059      	strne	r1, [r3, #4]
 80036d0:	6863      	ldr	r3, [r4, #4]
 80036d2:	bf08      	it	eq
 80036d4:	f8c8 1000 	streq.w	r1, [r8]
 80036d8:	5162      	str	r2, [r4, r5]
 80036da:	604b      	str	r3, [r1, #4]
 80036dc:	4630      	mov	r0, r6
 80036de:	f000 f82f 	bl	8003740 <__malloc_unlock>
 80036e2:	f104 000b 	add.w	r0, r4, #11
 80036e6:	1d23      	adds	r3, r4, #4
 80036e8:	f020 0007 	bic.w	r0, r0, #7
 80036ec:	1ac2      	subs	r2, r0, r3
 80036ee:	bf1c      	itt	ne
 80036f0:	1a1b      	subne	r3, r3, r0
 80036f2:	50a3      	strne	r3, [r4, r2]
 80036f4:	e7af      	b.n	8003656 <_malloc_r+0x22>
 80036f6:	6862      	ldr	r2, [r4, #4]
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	bf0c      	ite	eq
 80036fc:	f8c8 2000 	streq.w	r2, [r8]
 8003700:	605a      	strne	r2, [r3, #4]
 8003702:	e7eb      	b.n	80036dc <_malloc_r+0xa8>
 8003704:	4623      	mov	r3, r4
 8003706:	6864      	ldr	r4, [r4, #4]
 8003708:	e7ae      	b.n	8003668 <_malloc_r+0x34>
 800370a:	463c      	mov	r4, r7
 800370c:	687f      	ldr	r7, [r7, #4]
 800370e:	e7b6      	b.n	800367e <_malloc_r+0x4a>
 8003710:	461a      	mov	r2, r3
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	42a3      	cmp	r3, r4
 8003716:	d1fb      	bne.n	8003710 <_malloc_r+0xdc>
 8003718:	2300      	movs	r3, #0
 800371a:	6053      	str	r3, [r2, #4]
 800371c:	e7de      	b.n	80036dc <_malloc_r+0xa8>
 800371e:	230c      	movs	r3, #12
 8003720:	4630      	mov	r0, r6
 8003722:	6033      	str	r3, [r6, #0]
 8003724:	f000 f80c 	bl	8003740 <__malloc_unlock>
 8003728:	e794      	b.n	8003654 <_malloc_r+0x20>
 800372a:	6005      	str	r5, [r0, #0]
 800372c:	e7d6      	b.n	80036dc <_malloc_r+0xa8>
 800372e:	bf00      	nop
 8003730:	200003b0 	.word	0x200003b0

08003734 <__malloc_lock>:
 8003734:	4801      	ldr	r0, [pc, #4]	@ (800373c <__malloc_lock+0x8>)
 8003736:	f7ff bf10 	b.w	800355a <__retarget_lock_acquire_recursive>
 800373a:	bf00      	nop
 800373c:	200003a8 	.word	0x200003a8

08003740 <__malloc_unlock>:
 8003740:	4801      	ldr	r0, [pc, #4]	@ (8003748 <__malloc_unlock+0x8>)
 8003742:	f7ff bf0b 	b.w	800355c <__retarget_lock_release_recursive>
 8003746:	bf00      	nop
 8003748:	200003a8 	.word	0x200003a8

0800374c <__ssputs_r>:
 800374c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003750:	461f      	mov	r7, r3
 8003752:	688e      	ldr	r6, [r1, #8]
 8003754:	4682      	mov	sl, r0
 8003756:	42be      	cmp	r6, r7
 8003758:	460c      	mov	r4, r1
 800375a:	4690      	mov	r8, r2
 800375c:	680b      	ldr	r3, [r1, #0]
 800375e:	d82d      	bhi.n	80037bc <__ssputs_r+0x70>
 8003760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003768:	d026      	beq.n	80037b8 <__ssputs_r+0x6c>
 800376a:	6965      	ldr	r5, [r4, #20]
 800376c:	6909      	ldr	r1, [r1, #16]
 800376e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003772:	eba3 0901 	sub.w	r9, r3, r1
 8003776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800377a:	1c7b      	adds	r3, r7, #1
 800377c:	444b      	add	r3, r9
 800377e:	106d      	asrs	r5, r5, #1
 8003780:	429d      	cmp	r5, r3
 8003782:	bf38      	it	cc
 8003784:	461d      	movcc	r5, r3
 8003786:	0553      	lsls	r3, r2, #21
 8003788:	d527      	bpl.n	80037da <__ssputs_r+0x8e>
 800378a:	4629      	mov	r1, r5
 800378c:	f7ff ff52 	bl	8003634 <_malloc_r>
 8003790:	4606      	mov	r6, r0
 8003792:	b360      	cbz	r0, 80037ee <__ssputs_r+0xa2>
 8003794:	464a      	mov	r2, r9
 8003796:	6921      	ldr	r1, [r4, #16]
 8003798:	f000 fccc 	bl	8004134 <memcpy>
 800379c:	89a3      	ldrh	r3, [r4, #12]
 800379e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80037a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a6:	81a3      	strh	r3, [r4, #12]
 80037a8:	6126      	str	r6, [r4, #16]
 80037aa:	444e      	add	r6, r9
 80037ac:	6026      	str	r6, [r4, #0]
 80037ae:	463e      	mov	r6, r7
 80037b0:	6165      	str	r5, [r4, #20]
 80037b2:	eba5 0509 	sub.w	r5, r5, r9
 80037b6:	60a5      	str	r5, [r4, #8]
 80037b8:	42be      	cmp	r6, r7
 80037ba:	d900      	bls.n	80037be <__ssputs_r+0x72>
 80037bc:	463e      	mov	r6, r7
 80037be:	4632      	mov	r2, r6
 80037c0:	4641      	mov	r1, r8
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	f000 fc7e 	bl	80040c4 <memmove>
 80037c8:	2000      	movs	r0, #0
 80037ca:	68a3      	ldr	r3, [r4, #8]
 80037cc:	1b9b      	subs	r3, r3, r6
 80037ce:	60a3      	str	r3, [r4, #8]
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	4433      	add	r3, r6
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037da:	462a      	mov	r2, r5
 80037dc:	f000 fcb8 	bl	8004150 <_realloc_r>
 80037e0:	4606      	mov	r6, r0
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d1e0      	bne.n	80037a8 <__ssputs_r+0x5c>
 80037e6:	4650      	mov	r0, sl
 80037e8:	6921      	ldr	r1, [r4, #16]
 80037ea:	f7ff feb9 	bl	8003560 <_free_r>
 80037ee:	230c      	movs	r3, #12
 80037f0:	f8ca 3000 	str.w	r3, [sl]
 80037f4:	89a3      	ldrh	r3, [r4, #12]
 80037f6:	f04f 30ff 	mov.w	r0, #4294967295
 80037fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037fe:	81a3      	strh	r3, [r4, #12]
 8003800:	e7e9      	b.n	80037d6 <__ssputs_r+0x8a>
	...

08003804 <_svfiprintf_r>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	4698      	mov	r8, r3
 800380a:	898b      	ldrh	r3, [r1, #12]
 800380c:	4607      	mov	r7, r0
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	460d      	mov	r5, r1
 8003812:	4614      	mov	r4, r2
 8003814:	b09d      	sub	sp, #116	@ 0x74
 8003816:	d510      	bpl.n	800383a <_svfiprintf_r+0x36>
 8003818:	690b      	ldr	r3, [r1, #16]
 800381a:	b973      	cbnz	r3, 800383a <_svfiprintf_r+0x36>
 800381c:	2140      	movs	r1, #64	@ 0x40
 800381e:	f7ff ff09 	bl	8003634 <_malloc_r>
 8003822:	6028      	str	r0, [r5, #0]
 8003824:	6128      	str	r0, [r5, #16]
 8003826:	b930      	cbnz	r0, 8003836 <_svfiprintf_r+0x32>
 8003828:	230c      	movs	r3, #12
 800382a:	603b      	str	r3, [r7, #0]
 800382c:	f04f 30ff 	mov.w	r0, #4294967295
 8003830:	b01d      	add	sp, #116	@ 0x74
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	2340      	movs	r3, #64	@ 0x40
 8003838:	616b      	str	r3, [r5, #20]
 800383a:	2300      	movs	r3, #0
 800383c:	9309      	str	r3, [sp, #36]	@ 0x24
 800383e:	2320      	movs	r3, #32
 8003840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003844:	2330      	movs	r3, #48	@ 0x30
 8003846:	f04f 0901 	mov.w	r9, #1
 800384a:	f8cd 800c 	str.w	r8, [sp, #12]
 800384e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039e8 <_svfiprintf_r+0x1e4>
 8003852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003856:	4623      	mov	r3, r4
 8003858:	469a      	mov	sl, r3
 800385a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800385e:	b10a      	cbz	r2, 8003864 <_svfiprintf_r+0x60>
 8003860:	2a25      	cmp	r2, #37	@ 0x25
 8003862:	d1f9      	bne.n	8003858 <_svfiprintf_r+0x54>
 8003864:	ebba 0b04 	subs.w	fp, sl, r4
 8003868:	d00b      	beq.n	8003882 <_svfiprintf_r+0x7e>
 800386a:	465b      	mov	r3, fp
 800386c:	4622      	mov	r2, r4
 800386e:	4629      	mov	r1, r5
 8003870:	4638      	mov	r0, r7
 8003872:	f7ff ff6b 	bl	800374c <__ssputs_r>
 8003876:	3001      	adds	r0, #1
 8003878:	f000 80a7 	beq.w	80039ca <_svfiprintf_r+0x1c6>
 800387c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800387e:	445a      	add	r2, fp
 8003880:	9209      	str	r2, [sp, #36]	@ 0x24
 8003882:	f89a 3000 	ldrb.w	r3, [sl]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 809f 	beq.w	80039ca <_svfiprintf_r+0x1c6>
 800388c:	2300      	movs	r3, #0
 800388e:	f04f 32ff 	mov.w	r2, #4294967295
 8003892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003896:	f10a 0a01 	add.w	sl, sl, #1
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	9307      	str	r3, [sp, #28]
 800389e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80038a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80038a4:	4654      	mov	r4, sl
 80038a6:	2205      	movs	r2, #5
 80038a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ac:	484e      	ldr	r0, [pc, #312]	@ (80039e8 <_svfiprintf_r+0x1e4>)
 80038ae:	f000 fc33 	bl	8004118 <memchr>
 80038b2:	9a04      	ldr	r2, [sp, #16]
 80038b4:	b9d8      	cbnz	r0, 80038ee <_svfiprintf_r+0xea>
 80038b6:	06d0      	lsls	r0, r2, #27
 80038b8:	bf44      	itt	mi
 80038ba:	2320      	movmi	r3, #32
 80038bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038c0:	0711      	lsls	r1, r2, #28
 80038c2:	bf44      	itt	mi
 80038c4:	232b      	movmi	r3, #43	@ 0x2b
 80038c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ca:	f89a 3000 	ldrb.w	r3, [sl]
 80038ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80038d0:	d015      	beq.n	80038fe <_svfiprintf_r+0xfa>
 80038d2:	4654      	mov	r4, sl
 80038d4:	2000      	movs	r0, #0
 80038d6:	f04f 0c0a 	mov.w	ip, #10
 80038da:	9a07      	ldr	r2, [sp, #28]
 80038dc:	4621      	mov	r1, r4
 80038de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038e2:	3b30      	subs	r3, #48	@ 0x30
 80038e4:	2b09      	cmp	r3, #9
 80038e6:	d94b      	bls.n	8003980 <_svfiprintf_r+0x17c>
 80038e8:	b1b0      	cbz	r0, 8003918 <_svfiprintf_r+0x114>
 80038ea:	9207      	str	r2, [sp, #28]
 80038ec:	e014      	b.n	8003918 <_svfiprintf_r+0x114>
 80038ee:	eba0 0308 	sub.w	r3, r0, r8
 80038f2:	fa09 f303 	lsl.w	r3, r9, r3
 80038f6:	4313      	orrs	r3, r2
 80038f8:	46a2      	mov	sl, r4
 80038fa:	9304      	str	r3, [sp, #16]
 80038fc:	e7d2      	b.n	80038a4 <_svfiprintf_r+0xa0>
 80038fe:	9b03      	ldr	r3, [sp, #12]
 8003900:	1d19      	adds	r1, r3, #4
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	9103      	str	r1, [sp, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfbb      	ittet	lt
 800390a:	425b      	neglt	r3, r3
 800390c:	f042 0202 	orrlt.w	r2, r2, #2
 8003910:	9307      	strge	r3, [sp, #28]
 8003912:	9307      	strlt	r3, [sp, #28]
 8003914:	bfb8      	it	lt
 8003916:	9204      	strlt	r2, [sp, #16]
 8003918:	7823      	ldrb	r3, [r4, #0]
 800391a:	2b2e      	cmp	r3, #46	@ 0x2e
 800391c:	d10a      	bne.n	8003934 <_svfiprintf_r+0x130>
 800391e:	7863      	ldrb	r3, [r4, #1]
 8003920:	2b2a      	cmp	r3, #42	@ 0x2a
 8003922:	d132      	bne.n	800398a <_svfiprintf_r+0x186>
 8003924:	9b03      	ldr	r3, [sp, #12]
 8003926:	3402      	adds	r4, #2
 8003928:	1d1a      	adds	r2, r3, #4
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	9203      	str	r2, [sp, #12]
 800392e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003932:	9305      	str	r3, [sp, #20]
 8003934:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039ec <_svfiprintf_r+0x1e8>
 8003938:	2203      	movs	r2, #3
 800393a:	4650      	mov	r0, sl
 800393c:	7821      	ldrb	r1, [r4, #0]
 800393e:	f000 fbeb 	bl	8004118 <memchr>
 8003942:	b138      	cbz	r0, 8003954 <_svfiprintf_r+0x150>
 8003944:	2240      	movs	r2, #64	@ 0x40
 8003946:	9b04      	ldr	r3, [sp, #16]
 8003948:	eba0 000a 	sub.w	r0, r0, sl
 800394c:	4082      	lsls	r2, r0
 800394e:	4313      	orrs	r3, r2
 8003950:	3401      	adds	r4, #1
 8003952:	9304      	str	r3, [sp, #16]
 8003954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003958:	2206      	movs	r2, #6
 800395a:	4825      	ldr	r0, [pc, #148]	@ (80039f0 <_svfiprintf_r+0x1ec>)
 800395c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003960:	f000 fbda 	bl	8004118 <memchr>
 8003964:	2800      	cmp	r0, #0
 8003966:	d036      	beq.n	80039d6 <_svfiprintf_r+0x1d2>
 8003968:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <_svfiprintf_r+0x1f0>)
 800396a:	bb1b      	cbnz	r3, 80039b4 <_svfiprintf_r+0x1b0>
 800396c:	9b03      	ldr	r3, [sp, #12]
 800396e:	3307      	adds	r3, #7
 8003970:	f023 0307 	bic.w	r3, r3, #7
 8003974:	3308      	adds	r3, #8
 8003976:	9303      	str	r3, [sp, #12]
 8003978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800397a:	4433      	add	r3, r6
 800397c:	9309      	str	r3, [sp, #36]	@ 0x24
 800397e:	e76a      	b.n	8003856 <_svfiprintf_r+0x52>
 8003980:	460c      	mov	r4, r1
 8003982:	2001      	movs	r0, #1
 8003984:	fb0c 3202 	mla	r2, ip, r2, r3
 8003988:	e7a8      	b.n	80038dc <_svfiprintf_r+0xd8>
 800398a:	2300      	movs	r3, #0
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	4619      	mov	r1, r3
 8003992:	3401      	adds	r4, #1
 8003994:	9305      	str	r3, [sp, #20]
 8003996:	4620      	mov	r0, r4
 8003998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800399c:	3a30      	subs	r2, #48	@ 0x30
 800399e:	2a09      	cmp	r2, #9
 80039a0:	d903      	bls.n	80039aa <_svfiprintf_r+0x1a6>
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0c6      	beq.n	8003934 <_svfiprintf_r+0x130>
 80039a6:	9105      	str	r1, [sp, #20]
 80039a8:	e7c4      	b.n	8003934 <_svfiprintf_r+0x130>
 80039aa:	4604      	mov	r4, r0
 80039ac:	2301      	movs	r3, #1
 80039ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80039b2:	e7f0      	b.n	8003996 <_svfiprintf_r+0x192>
 80039b4:	ab03      	add	r3, sp, #12
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	462a      	mov	r2, r5
 80039ba:	4638      	mov	r0, r7
 80039bc:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <_svfiprintf_r+0x1f4>)
 80039be:	a904      	add	r1, sp, #16
 80039c0:	f3af 8000 	nop.w
 80039c4:	1c42      	adds	r2, r0, #1
 80039c6:	4606      	mov	r6, r0
 80039c8:	d1d6      	bne.n	8003978 <_svfiprintf_r+0x174>
 80039ca:	89ab      	ldrh	r3, [r5, #12]
 80039cc:	065b      	lsls	r3, r3, #25
 80039ce:	f53f af2d 	bmi.w	800382c <_svfiprintf_r+0x28>
 80039d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039d4:	e72c      	b.n	8003830 <_svfiprintf_r+0x2c>
 80039d6:	ab03      	add	r3, sp, #12
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	462a      	mov	r2, r5
 80039dc:	4638      	mov	r0, r7
 80039de:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <_svfiprintf_r+0x1f4>)
 80039e0:	a904      	add	r1, sp, #16
 80039e2:	f000 f9bd 	bl	8003d60 <_printf_i>
 80039e6:	e7ed      	b.n	80039c4 <_svfiprintf_r+0x1c0>
 80039e8:	08004772 	.word	0x08004772
 80039ec:	08004778 	.word	0x08004778
 80039f0:	0800477c 	.word	0x0800477c
 80039f4:	00000000 	.word	0x00000000
 80039f8:	0800374d 	.word	0x0800374d

080039fc <__sfputc_r>:
 80039fc:	6893      	ldr	r3, [r2, #8]
 80039fe:	b410      	push	{r4}
 8003a00:	3b01      	subs	r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	6093      	str	r3, [r2, #8]
 8003a06:	da07      	bge.n	8003a18 <__sfputc_r+0x1c>
 8003a08:	6994      	ldr	r4, [r2, #24]
 8003a0a:	42a3      	cmp	r3, r4
 8003a0c:	db01      	blt.n	8003a12 <__sfputc_r+0x16>
 8003a0e:	290a      	cmp	r1, #10
 8003a10:	d102      	bne.n	8003a18 <__sfputc_r+0x1c>
 8003a12:	bc10      	pop	{r4}
 8003a14:	f000 bac2 	b.w	8003f9c <__swbuf_r>
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	1c58      	adds	r0, r3, #1
 8003a1c:	6010      	str	r0, [r2, #0]
 8003a1e:	7019      	strb	r1, [r3, #0]
 8003a20:	4608      	mov	r0, r1
 8003a22:	bc10      	pop	{r4}
 8003a24:	4770      	bx	lr

08003a26 <__sfputs_r>:
 8003a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a28:	4606      	mov	r6, r0
 8003a2a:	460f      	mov	r7, r1
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	18d5      	adds	r5, r2, r3
 8003a30:	42ac      	cmp	r4, r5
 8003a32:	d101      	bne.n	8003a38 <__sfputs_r+0x12>
 8003a34:	2000      	movs	r0, #0
 8003a36:	e007      	b.n	8003a48 <__sfputs_r+0x22>
 8003a38:	463a      	mov	r2, r7
 8003a3a:	4630      	mov	r0, r6
 8003a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a40:	f7ff ffdc 	bl	80039fc <__sfputc_r>
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	d1f3      	bne.n	8003a30 <__sfputs_r+0xa>
 8003a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a4c <_vfiprintf_r>:
 8003a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a50:	460d      	mov	r5, r1
 8003a52:	4614      	mov	r4, r2
 8003a54:	4698      	mov	r8, r3
 8003a56:	4606      	mov	r6, r0
 8003a58:	b09d      	sub	sp, #116	@ 0x74
 8003a5a:	b118      	cbz	r0, 8003a64 <_vfiprintf_r+0x18>
 8003a5c:	6a03      	ldr	r3, [r0, #32]
 8003a5e:	b90b      	cbnz	r3, 8003a64 <_vfiprintf_r+0x18>
 8003a60:	f7ff fc40 	bl	80032e4 <__sinit>
 8003a64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a66:	07d9      	lsls	r1, r3, #31
 8003a68:	d405      	bmi.n	8003a76 <_vfiprintf_r+0x2a>
 8003a6a:	89ab      	ldrh	r3, [r5, #12]
 8003a6c:	059a      	lsls	r2, r3, #22
 8003a6e:	d402      	bmi.n	8003a76 <_vfiprintf_r+0x2a>
 8003a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a72:	f7ff fd72 	bl	800355a <__retarget_lock_acquire_recursive>
 8003a76:	89ab      	ldrh	r3, [r5, #12]
 8003a78:	071b      	lsls	r3, r3, #28
 8003a7a:	d501      	bpl.n	8003a80 <_vfiprintf_r+0x34>
 8003a7c:	692b      	ldr	r3, [r5, #16]
 8003a7e:	b99b      	cbnz	r3, 8003aa8 <_vfiprintf_r+0x5c>
 8003a80:	4629      	mov	r1, r5
 8003a82:	4630      	mov	r0, r6
 8003a84:	f000 fac8 	bl	8004018 <__swsetup_r>
 8003a88:	b170      	cbz	r0, 8003aa8 <_vfiprintf_r+0x5c>
 8003a8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a8c:	07dc      	lsls	r4, r3, #31
 8003a8e:	d504      	bpl.n	8003a9a <_vfiprintf_r+0x4e>
 8003a90:	f04f 30ff 	mov.w	r0, #4294967295
 8003a94:	b01d      	add	sp, #116	@ 0x74
 8003a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9a:	89ab      	ldrh	r3, [r5, #12]
 8003a9c:	0598      	lsls	r0, r3, #22
 8003a9e:	d4f7      	bmi.n	8003a90 <_vfiprintf_r+0x44>
 8003aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003aa2:	f7ff fd5b 	bl	800355c <__retarget_lock_release_recursive>
 8003aa6:	e7f3      	b.n	8003a90 <_vfiprintf_r+0x44>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aac:	2320      	movs	r3, #32
 8003aae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ab2:	2330      	movs	r3, #48	@ 0x30
 8003ab4:	f04f 0901 	mov.w	r9, #1
 8003ab8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003abc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003c68 <_vfiprintf_r+0x21c>
 8003ac0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ac4:	4623      	mov	r3, r4
 8003ac6:	469a      	mov	sl, r3
 8003ac8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003acc:	b10a      	cbz	r2, 8003ad2 <_vfiprintf_r+0x86>
 8003ace:	2a25      	cmp	r2, #37	@ 0x25
 8003ad0:	d1f9      	bne.n	8003ac6 <_vfiprintf_r+0x7a>
 8003ad2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ad6:	d00b      	beq.n	8003af0 <_vfiprintf_r+0xa4>
 8003ad8:	465b      	mov	r3, fp
 8003ada:	4622      	mov	r2, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f7ff ffa1 	bl	8003a26 <__sfputs_r>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	f000 80a7 	beq.w	8003c38 <_vfiprintf_r+0x1ec>
 8003aea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aec:	445a      	add	r2, fp
 8003aee:	9209      	str	r2, [sp, #36]	@ 0x24
 8003af0:	f89a 3000 	ldrb.w	r3, [sl]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 809f 	beq.w	8003c38 <_vfiprintf_r+0x1ec>
 8003afa:	2300      	movs	r3, #0
 8003afc:	f04f 32ff 	mov.w	r2, #4294967295
 8003b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b04:	f10a 0a01 	add.w	sl, sl, #1
 8003b08:	9304      	str	r3, [sp, #16]
 8003b0a:	9307      	str	r3, [sp, #28]
 8003b0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b10:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b12:	4654      	mov	r4, sl
 8003b14:	2205      	movs	r2, #5
 8003b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b1a:	4853      	ldr	r0, [pc, #332]	@ (8003c68 <_vfiprintf_r+0x21c>)
 8003b1c:	f000 fafc 	bl	8004118 <memchr>
 8003b20:	9a04      	ldr	r2, [sp, #16]
 8003b22:	b9d8      	cbnz	r0, 8003b5c <_vfiprintf_r+0x110>
 8003b24:	06d1      	lsls	r1, r2, #27
 8003b26:	bf44      	itt	mi
 8003b28:	2320      	movmi	r3, #32
 8003b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b2e:	0713      	lsls	r3, r2, #28
 8003b30:	bf44      	itt	mi
 8003b32:	232b      	movmi	r3, #43	@ 0x2b
 8003b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b38:	f89a 3000 	ldrb.w	r3, [sl]
 8003b3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b3e:	d015      	beq.n	8003b6c <_vfiprintf_r+0x120>
 8003b40:	4654      	mov	r4, sl
 8003b42:	2000      	movs	r0, #0
 8003b44:	f04f 0c0a 	mov.w	ip, #10
 8003b48:	9a07      	ldr	r2, [sp, #28]
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b50:	3b30      	subs	r3, #48	@ 0x30
 8003b52:	2b09      	cmp	r3, #9
 8003b54:	d94b      	bls.n	8003bee <_vfiprintf_r+0x1a2>
 8003b56:	b1b0      	cbz	r0, 8003b86 <_vfiprintf_r+0x13a>
 8003b58:	9207      	str	r2, [sp, #28]
 8003b5a:	e014      	b.n	8003b86 <_vfiprintf_r+0x13a>
 8003b5c:	eba0 0308 	sub.w	r3, r0, r8
 8003b60:	fa09 f303 	lsl.w	r3, r9, r3
 8003b64:	4313      	orrs	r3, r2
 8003b66:	46a2      	mov	sl, r4
 8003b68:	9304      	str	r3, [sp, #16]
 8003b6a:	e7d2      	b.n	8003b12 <_vfiprintf_r+0xc6>
 8003b6c:	9b03      	ldr	r3, [sp, #12]
 8003b6e:	1d19      	adds	r1, r3, #4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	9103      	str	r1, [sp, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	bfbb      	ittet	lt
 8003b78:	425b      	neglt	r3, r3
 8003b7a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b7e:	9307      	strge	r3, [sp, #28]
 8003b80:	9307      	strlt	r3, [sp, #28]
 8003b82:	bfb8      	it	lt
 8003b84:	9204      	strlt	r2, [sp, #16]
 8003b86:	7823      	ldrb	r3, [r4, #0]
 8003b88:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b8a:	d10a      	bne.n	8003ba2 <_vfiprintf_r+0x156>
 8003b8c:	7863      	ldrb	r3, [r4, #1]
 8003b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b90:	d132      	bne.n	8003bf8 <_vfiprintf_r+0x1ac>
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	3402      	adds	r4, #2
 8003b96:	1d1a      	adds	r2, r3, #4
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	9203      	str	r2, [sp, #12]
 8003b9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ba0:	9305      	str	r3, [sp, #20]
 8003ba2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003c6c <_vfiprintf_r+0x220>
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	4650      	mov	r0, sl
 8003baa:	7821      	ldrb	r1, [r4, #0]
 8003bac:	f000 fab4 	bl	8004118 <memchr>
 8003bb0:	b138      	cbz	r0, 8003bc2 <_vfiprintf_r+0x176>
 8003bb2:	2240      	movs	r2, #64	@ 0x40
 8003bb4:	9b04      	ldr	r3, [sp, #16]
 8003bb6:	eba0 000a 	sub.w	r0, r0, sl
 8003bba:	4082      	lsls	r2, r0
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	3401      	adds	r4, #1
 8003bc0:	9304      	str	r3, [sp, #16]
 8003bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc6:	2206      	movs	r2, #6
 8003bc8:	4829      	ldr	r0, [pc, #164]	@ (8003c70 <_vfiprintf_r+0x224>)
 8003bca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bce:	f000 faa3 	bl	8004118 <memchr>
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d03f      	beq.n	8003c56 <_vfiprintf_r+0x20a>
 8003bd6:	4b27      	ldr	r3, [pc, #156]	@ (8003c74 <_vfiprintf_r+0x228>)
 8003bd8:	bb1b      	cbnz	r3, 8003c22 <_vfiprintf_r+0x1d6>
 8003bda:	9b03      	ldr	r3, [sp, #12]
 8003bdc:	3307      	adds	r3, #7
 8003bde:	f023 0307 	bic.w	r3, r3, #7
 8003be2:	3308      	adds	r3, #8
 8003be4:	9303      	str	r3, [sp, #12]
 8003be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003be8:	443b      	add	r3, r7
 8003bea:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bec:	e76a      	b.n	8003ac4 <_vfiprintf_r+0x78>
 8003bee:	460c      	mov	r4, r1
 8003bf0:	2001      	movs	r0, #1
 8003bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bf6:	e7a8      	b.n	8003b4a <_vfiprintf_r+0xfe>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f04f 0c0a 	mov.w	ip, #10
 8003bfe:	4619      	mov	r1, r3
 8003c00:	3401      	adds	r4, #1
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	4620      	mov	r0, r4
 8003c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c0a:	3a30      	subs	r2, #48	@ 0x30
 8003c0c:	2a09      	cmp	r2, #9
 8003c0e:	d903      	bls.n	8003c18 <_vfiprintf_r+0x1cc>
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0c6      	beq.n	8003ba2 <_vfiprintf_r+0x156>
 8003c14:	9105      	str	r1, [sp, #20]
 8003c16:	e7c4      	b.n	8003ba2 <_vfiprintf_r+0x156>
 8003c18:	4604      	mov	r4, r0
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c20:	e7f0      	b.n	8003c04 <_vfiprintf_r+0x1b8>
 8003c22:	ab03      	add	r3, sp, #12
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	462a      	mov	r2, r5
 8003c28:	4630      	mov	r0, r6
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <_vfiprintf_r+0x22c>)
 8003c2c:	a904      	add	r1, sp, #16
 8003c2e:	f3af 8000 	nop.w
 8003c32:	4607      	mov	r7, r0
 8003c34:	1c78      	adds	r0, r7, #1
 8003c36:	d1d6      	bne.n	8003be6 <_vfiprintf_r+0x19a>
 8003c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c3a:	07d9      	lsls	r1, r3, #31
 8003c3c:	d405      	bmi.n	8003c4a <_vfiprintf_r+0x1fe>
 8003c3e:	89ab      	ldrh	r3, [r5, #12]
 8003c40:	059a      	lsls	r2, r3, #22
 8003c42:	d402      	bmi.n	8003c4a <_vfiprintf_r+0x1fe>
 8003c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c46:	f7ff fc89 	bl	800355c <__retarget_lock_release_recursive>
 8003c4a:	89ab      	ldrh	r3, [r5, #12]
 8003c4c:	065b      	lsls	r3, r3, #25
 8003c4e:	f53f af1f 	bmi.w	8003a90 <_vfiprintf_r+0x44>
 8003c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c54:	e71e      	b.n	8003a94 <_vfiprintf_r+0x48>
 8003c56:	ab03      	add	r3, sp, #12
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <_vfiprintf_r+0x22c>)
 8003c60:	a904      	add	r1, sp, #16
 8003c62:	f000 f87d 	bl	8003d60 <_printf_i>
 8003c66:	e7e4      	b.n	8003c32 <_vfiprintf_r+0x1e6>
 8003c68:	08004772 	.word	0x08004772
 8003c6c:	08004778 	.word	0x08004778
 8003c70:	0800477c 	.word	0x0800477c
 8003c74:	00000000 	.word	0x00000000
 8003c78:	08003a27 	.word	0x08003a27

08003c7c <_printf_common>:
 8003c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c80:	4616      	mov	r6, r2
 8003c82:	4698      	mov	r8, r3
 8003c84:	688a      	ldr	r2, [r1, #8]
 8003c86:	690b      	ldr	r3, [r1, #16]
 8003c88:	4607      	mov	r7, r0
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	bfb8      	it	lt
 8003c8e:	4613      	movlt	r3, r2
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c96:	460c      	mov	r4, r1
 8003c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c9c:	b10a      	cbz	r2, 8003ca2 <_printf_common+0x26>
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	6033      	str	r3, [r6, #0]
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	0699      	lsls	r1, r3, #26
 8003ca6:	bf42      	ittt	mi
 8003ca8:	6833      	ldrmi	r3, [r6, #0]
 8003caa:	3302      	addmi	r3, #2
 8003cac:	6033      	strmi	r3, [r6, #0]
 8003cae:	6825      	ldr	r5, [r4, #0]
 8003cb0:	f015 0506 	ands.w	r5, r5, #6
 8003cb4:	d106      	bne.n	8003cc4 <_printf_common+0x48>
 8003cb6:	f104 0a19 	add.w	sl, r4, #25
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	6832      	ldr	r2, [r6, #0]
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	42ab      	cmp	r3, r5
 8003cc2:	dc2b      	bgt.n	8003d1c <_printf_common+0xa0>
 8003cc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cc8:	6822      	ldr	r2, [r4, #0]
 8003cca:	3b00      	subs	r3, #0
 8003ccc:	bf18      	it	ne
 8003cce:	2301      	movne	r3, #1
 8003cd0:	0692      	lsls	r2, r2, #26
 8003cd2:	d430      	bmi.n	8003d36 <_printf_common+0xba>
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	4638      	mov	r0, r7
 8003cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cdc:	47c8      	blx	r9
 8003cde:	3001      	adds	r0, #1
 8003ce0:	d023      	beq.n	8003d2a <_printf_common+0xae>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	6922      	ldr	r2, [r4, #16]
 8003ce6:	f003 0306 	and.w	r3, r3, #6
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	bf14      	ite	ne
 8003cee:	2500      	movne	r5, #0
 8003cf0:	6833      	ldreq	r3, [r6, #0]
 8003cf2:	f04f 0600 	mov.w	r6, #0
 8003cf6:	bf08      	it	eq
 8003cf8:	68e5      	ldreq	r5, [r4, #12]
 8003cfa:	f104 041a 	add.w	r4, r4, #26
 8003cfe:	bf08      	it	eq
 8003d00:	1aed      	subeq	r5, r5, r3
 8003d02:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d06:	bf08      	it	eq
 8003d08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	bfc4      	itt	gt
 8003d10:	1a9b      	subgt	r3, r3, r2
 8003d12:	18ed      	addgt	r5, r5, r3
 8003d14:	42b5      	cmp	r5, r6
 8003d16:	d11a      	bne.n	8003d4e <_printf_common+0xd2>
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e008      	b.n	8003d2e <_printf_common+0xb2>
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	4652      	mov	r2, sl
 8003d20:	4641      	mov	r1, r8
 8003d22:	4638      	mov	r0, r7
 8003d24:	47c8      	blx	r9
 8003d26:	3001      	adds	r0, #1
 8003d28:	d103      	bne.n	8003d32 <_printf_common+0xb6>
 8003d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d32:	3501      	adds	r5, #1
 8003d34:	e7c1      	b.n	8003cba <_printf_common+0x3e>
 8003d36:	2030      	movs	r0, #48	@ 0x30
 8003d38:	18e1      	adds	r1, r4, r3
 8003d3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d44:	4422      	add	r2, r4
 8003d46:	3302      	adds	r3, #2
 8003d48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d4c:	e7c2      	b.n	8003cd4 <_printf_common+0x58>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	4622      	mov	r2, r4
 8003d52:	4641      	mov	r1, r8
 8003d54:	4638      	mov	r0, r7
 8003d56:	47c8      	blx	r9
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d0e6      	beq.n	8003d2a <_printf_common+0xae>
 8003d5c:	3601      	adds	r6, #1
 8003d5e:	e7d9      	b.n	8003d14 <_printf_common+0x98>

08003d60 <_printf_i>:
 8003d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d64:	7e0f      	ldrb	r7, [r1, #24]
 8003d66:	4691      	mov	r9, r2
 8003d68:	2f78      	cmp	r7, #120	@ 0x78
 8003d6a:	4680      	mov	r8, r0
 8003d6c:	460c      	mov	r4, r1
 8003d6e:	469a      	mov	sl, r3
 8003d70:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d76:	d807      	bhi.n	8003d88 <_printf_i+0x28>
 8003d78:	2f62      	cmp	r7, #98	@ 0x62
 8003d7a:	d80a      	bhi.n	8003d92 <_printf_i+0x32>
 8003d7c:	2f00      	cmp	r7, #0
 8003d7e:	f000 80d1 	beq.w	8003f24 <_printf_i+0x1c4>
 8003d82:	2f58      	cmp	r7, #88	@ 0x58
 8003d84:	f000 80b8 	beq.w	8003ef8 <_printf_i+0x198>
 8003d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d90:	e03a      	b.n	8003e08 <_printf_i+0xa8>
 8003d92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d96:	2b15      	cmp	r3, #21
 8003d98:	d8f6      	bhi.n	8003d88 <_printf_i+0x28>
 8003d9a:	a101      	add	r1, pc, #4	@ (adr r1, 8003da0 <_printf_i+0x40>)
 8003d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003da0:	08003df9 	.word	0x08003df9
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003d89 	.word	0x08003d89
 8003dac:	08003d89 	.word	0x08003d89
 8003db0:	08003d89 	.word	0x08003d89
 8003db4:	08003d89 	.word	0x08003d89
 8003db8:	08003e0d 	.word	0x08003e0d
 8003dbc:	08003d89 	.word	0x08003d89
 8003dc0:	08003d89 	.word	0x08003d89
 8003dc4:	08003d89 	.word	0x08003d89
 8003dc8:	08003d89 	.word	0x08003d89
 8003dcc:	08003f0b 	.word	0x08003f0b
 8003dd0:	08003e37 	.word	0x08003e37
 8003dd4:	08003ec5 	.word	0x08003ec5
 8003dd8:	08003d89 	.word	0x08003d89
 8003ddc:	08003d89 	.word	0x08003d89
 8003de0:	08003f2d 	.word	0x08003f2d
 8003de4:	08003d89 	.word	0x08003d89
 8003de8:	08003e37 	.word	0x08003e37
 8003dec:	08003d89 	.word	0x08003d89
 8003df0:	08003d89 	.word	0x08003d89
 8003df4:	08003ecd 	.word	0x08003ecd
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6032      	str	r2, [r6, #0]
 8003e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e09c      	b.n	8003f46 <_printf_i+0x1e6>
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	1d19      	adds	r1, r3, #4
 8003e12:	6031      	str	r1, [r6, #0]
 8003e14:	0606      	lsls	r6, r0, #24
 8003e16:	d501      	bpl.n	8003e1c <_printf_i+0xbc>
 8003e18:	681d      	ldr	r5, [r3, #0]
 8003e1a:	e003      	b.n	8003e24 <_printf_i+0xc4>
 8003e1c:	0645      	lsls	r5, r0, #25
 8003e1e:	d5fb      	bpl.n	8003e18 <_printf_i+0xb8>
 8003e20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e24:	2d00      	cmp	r5, #0
 8003e26:	da03      	bge.n	8003e30 <_printf_i+0xd0>
 8003e28:	232d      	movs	r3, #45	@ 0x2d
 8003e2a:	426d      	negs	r5, r5
 8003e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e30:	230a      	movs	r3, #10
 8003e32:	4858      	ldr	r0, [pc, #352]	@ (8003f94 <_printf_i+0x234>)
 8003e34:	e011      	b.n	8003e5a <_printf_i+0xfa>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	0608      	lsls	r0, r1, #24
 8003e3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e40:	d402      	bmi.n	8003e48 <_printf_i+0xe8>
 8003e42:	0649      	lsls	r1, r1, #25
 8003e44:	bf48      	it	mi
 8003e46:	b2ad      	uxthmi	r5, r5
 8003e48:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e4a:	6033      	str	r3, [r6, #0]
 8003e4c:	bf14      	ite	ne
 8003e4e:	230a      	movne	r3, #10
 8003e50:	2308      	moveq	r3, #8
 8003e52:	4850      	ldr	r0, [pc, #320]	@ (8003f94 <_printf_i+0x234>)
 8003e54:	2100      	movs	r1, #0
 8003e56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e5a:	6866      	ldr	r6, [r4, #4]
 8003e5c:	2e00      	cmp	r6, #0
 8003e5e:	60a6      	str	r6, [r4, #8]
 8003e60:	db05      	blt.n	8003e6e <_printf_i+0x10e>
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	432e      	orrs	r6, r5
 8003e66:	f021 0104 	bic.w	r1, r1, #4
 8003e6a:	6021      	str	r1, [r4, #0]
 8003e6c:	d04b      	beq.n	8003f06 <_printf_i+0x1a6>
 8003e6e:	4616      	mov	r6, r2
 8003e70:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e74:	fb03 5711 	mls	r7, r3, r1, r5
 8003e78:	5dc7      	ldrb	r7, [r0, r7]
 8003e7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e7e:	462f      	mov	r7, r5
 8003e80:	42bb      	cmp	r3, r7
 8003e82:	460d      	mov	r5, r1
 8003e84:	d9f4      	bls.n	8003e70 <_printf_i+0x110>
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d10b      	bne.n	8003ea2 <_printf_i+0x142>
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	07df      	lsls	r7, r3, #31
 8003e8e:	d508      	bpl.n	8003ea2 <_printf_i+0x142>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	6861      	ldr	r1, [r4, #4]
 8003e94:	4299      	cmp	r1, r3
 8003e96:	bfde      	ittt	le
 8003e98:	2330      	movle	r3, #48	@ 0x30
 8003e9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ea2:	1b92      	subs	r2, r2, r6
 8003ea4:	6122      	str	r2, [r4, #16]
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	4640      	mov	r0, r8
 8003eac:	f8cd a000 	str.w	sl, [sp]
 8003eb0:	aa03      	add	r2, sp, #12
 8003eb2:	f7ff fee3 	bl	8003c7c <_printf_common>
 8003eb6:	3001      	adds	r0, #1
 8003eb8:	d14a      	bne.n	8003f50 <_printf_i+0x1f0>
 8003eba:	f04f 30ff 	mov.w	r0, #4294967295
 8003ebe:	b004      	add	sp, #16
 8003ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f043 0320 	orr.w	r3, r3, #32
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2778      	movs	r7, #120	@ 0x78
 8003ece:	4832      	ldr	r0, [pc, #200]	@ (8003f98 <_printf_i+0x238>)
 8003ed0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	6831      	ldr	r1, [r6, #0]
 8003ed8:	061f      	lsls	r7, r3, #24
 8003eda:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ede:	d402      	bmi.n	8003ee6 <_printf_i+0x186>
 8003ee0:	065f      	lsls	r7, r3, #25
 8003ee2:	bf48      	it	mi
 8003ee4:	b2ad      	uxthmi	r5, r5
 8003ee6:	6031      	str	r1, [r6, #0]
 8003ee8:	07d9      	lsls	r1, r3, #31
 8003eea:	bf44      	itt	mi
 8003eec:	f043 0320 	orrmi.w	r3, r3, #32
 8003ef0:	6023      	strmi	r3, [r4, #0]
 8003ef2:	b11d      	cbz	r5, 8003efc <_printf_i+0x19c>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	e7ad      	b.n	8003e54 <_printf_i+0xf4>
 8003ef8:	4826      	ldr	r0, [pc, #152]	@ (8003f94 <_printf_i+0x234>)
 8003efa:	e7e9      	b.n	8003ed0 <_printf_i+0x170>
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f023 0320 	bic.w	r3, r3, #32
 8003f02:	6023      	str	r3, [r4, #0]
 8003f04:	e7f6      	b.n	8003ef4 <_printf_i+0x194>
 8003f06:	4616      	mov	r6, r2
 8003f08:	e7bd      	b.n	8003e86 <_printf_i+0x126>
 8003f0a:	6833      	ldr	r3, [r6, #0]
 8003f0c:	6825      	ldr	r5, [r4, #0]
 8003f0e:	1d18      	adds	r0, r3, #4
 8003f10:	6961      	ldr	r1, [r4, #20]
 8003f12:	6030      	str	r0, [r6, #0]
 8003f14:	062e      	lsls	r6, r5, #24
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	d501      	bpl.n	8003f1e <_printf_i+0x1be>
 8003f1a:	6019      	str	r1, [r3, #0]
 8003f1c:	e002      	b.n	8003f24 <_printf_i+0x1c4>
 8003f1e:	0668      	lsls	r0, r5, #25
 8003f20:	d5fb      	bpl.n	8003f1a <_printf_i+0x1ba>
 8003f22:	8019      	strh	r1, [r3, #0]
 8003f24:	2300      	movs	r3, #0
 8003f26:	4616      	mov	r6, r2
 8003f28:	6123      	str	r3, [r4, #16]
 8003f2a:	e7bc      	b.n	8003ea6 <_printf_i+0x146>
 8003f2c:	6833      	ldr	r3, [r6, #0]
 8003f2e:	2100      	movs	r1, #0
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	6032      	str	r2, [r6, #0]
 8003f34:	681e      	ldr	r6, [r3, #0]
 8003f36:	6862      	ldr	r2, [r4, #4]
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f000 f8ed 	bl	8004118 <memchr>
 8003f3e:	b108      	cbz	r0, 8003f44 <_printf_i+0x1e4>
 8003f40:	1b80      	subs	r0, r0, r6
 8003f42:	6060      	str	r0, [r4, #4]
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	6123      	str	r3, [r4, #16]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f4e:	e7aa      	b.n	8003ea6 <_printf_i+0x146>
 8003f50:	4632      	mov	r2, r6
 8003f52:	4649      	mov	r1, r9
 8003f54:	4640      	mov	r0, r8
 8003f56:	6923      	ldr	r3, [r4, #16]
 8003f58:	47d0      	blx	sl
 8003f5a:	3001      	adds	r0, #1
 8003f5c:	d0ad      	beq.n	8003eba <_printf_i+0x15a>
 8003f5e:	6823      	ldr	r3, [r4, #0]
 8003f60:	079b      	lsls	r3, r3, #30
 8003f62:	d413      	bmi.n	8003f8c <_printf_i+0x22c>
 8003f64:	68e0      	ldr	r0, [r4, #12]
 8003f66:	9b03      	ldr	r3, [sp, #12]
 8003f68:	4298      	cmp	r0, r3
 8003f6a:	bfb8      	it	lt
 8003f6c:	4618      	movlt	r0, r3
 8003f6e:	e7a6      	b.n	8003ebe <_printf_i+0x15e>
 8003f70:	2301      	movs	r3, #1
 8003f72:	4632      	mov	r2, r6
 8003f74:	4649      	mov	r1, r9
 8003f76:	4640      	mov	r0, r8
 8003f78:	47d0      	blx	sl
 8003f7a:	3001      	adds	r0, #1
 8003f7c:	d09d      	beq.n	8003eba <_printf_i+0x15a>
 8003f7e:	3501      	adds	r5, #1
 8003f80:	68e3      	ldr	r3, [r4, #12]
 8003f82:	9903      	ldr	r1, [sp, #12]
 8003f84:	1a5b      	subs	r3, r3, r1
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dcf2      	bgt.n	8003f70 <_printf_i+0x210>
 8003f8a:	e7eb      	b.n	8003f64 <_printf_i+0x204>
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	f104 0619 	add.w	r6, r4, #25
 8003f92:	e7f5      	b.n	8003f80 <_printf_i+0x220>
 8003f94:	08004783 	.word	0x08004783
 8003f98:	08004794 	.word	0x08004794

08003f9c <__swbuf_r>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b118      	cbz	r0, 8003fae <__swbuf_r+0x12>
 8003fa6:	6a03      	ldr	r3, [r0, #32]
 8003fa8:	b90b      	cbnz	r3, 8003fae <__swbuf_r+0x12>
 8003faa:	f7ff f99b 	bl	80032e4 <__sinit>
 8003fae:	69a3      	ldr	r3, [r4, #24]
 8003fb0:	60a3      	str	r3, [r4, #8]
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	071a      	lsls	r2, r3, #28
 8003fb6:	d501      	bpl.n	8003fbc <__swbuf_r+0x20>
 8003fb8:	6923      	ldr	r3, [r4, #16]
 8003fba:	b943      	cbnz	r3, 8003fce <__swbuf_r+0x32>
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f82a 	bl	8004018 <__swsetup_r>
 8003fc4:	b118      	cbz	r0, 8003fce <__swbuf_r+0x32>
 8003fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8003fca:	4638      	mov	r0, r7
 8003fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	6922      	ldr	r2, [r4, #16]
 8003fd2:	b2f6      	uxtb	r6, r6
 8003fd4:	1a98      	subs	r0, r3, r2
 8003fd6:	6963      	ldr	r3, [r4, #20]
 8003fd8:	4637      	mov	r7, r6
 8003fda:	4283      	cmp	r3, r0
 8003fdc:	dc05      	bgt.n	8003fea <__swbuf_r+0x4e>
 8003fde:	4621      	mov	r1, r4
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff f8b7 	bl	8003154 <_fflush_r>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	d1ed      	bne.n	8003fc6 <__swbuf_r+0x2a>
 8003fea:	68a3      	ldr	r3, [r4, #8]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	60a3      	str	r3, [r4, #8]
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	6022      	str	r2, [r4, #0]
 8003ff6:	701e      	strb	r6, [r3, #0]
 8003ff8:	6962      	ldr	r2, [r4, #20]
 8003ffa:	1c43      	adds	r3, r0, #1
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d004      	beq.n	800400a <__swbuf_r+0x6e>
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	07db      	lsls	r3, r3, #31
 8004004:	d5e1      	bpl.n	8003fca <__swbuf_r+0x2e>
 8004006:	2e0a      	cmp	r6, #10
 8004008:	d1df      	bne.n	8003fca <__swbuf_r+0x2e>
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	f7ff f8a1 	bl	8003154 <_fflush_r>
 8004012:	2800      	cmp	r0, #0
 8004014:	d0d9      	beq.n	8003fca <__swbuf_r+0x2e>
 8004016:	e7d6      	b.n	8003fc6 <__swbuf_r+0x2a>

08004018 <__swsetup_r>:
 8004018:	b538      	push	{r3, r4, r5, lr}
 800401a:	4b29      	ldr	r3, [pc, #164]	@ (80040c0 <__swsetup_r+0xa8>)
 800401c:	4605      	mov	r5, r0
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	460c      	mov	r4, r1
 8004022:	b118      	cbz	r0, 800402c <__swsetup_r+0x14>
 8004024:	6a03      	ldr	r3, [r0, #32]
 8004026:	b90b      	cbnz	r3, 800402c <__swsetup_r+0x14>
 8004028:	f7ff f95c 	bl	80032e4 <__sinit>
 800402c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004030:	0719      	lsls	r1, r3, #28
 8004032:	d422      	bmi.n	800407a <__swsetup_r+0x62>
 8004034:	06da      	lsls	r2, r3, #27
 8004036:	d407      	bmi.n	8004048 <__swsetup_r+0x30>
 8004038:	2209      	movs	r2, #9
 800403a:	602a      	str	r2, [r5, #0]
 800403c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	e033      	b.n	80040b0 <__swsetup_r+0x98>
 8004048:	0758      	lsls	r0, r3, #29
 800404a:	d512      	bpl.n	8004072 <__swsetup_r+0x5a>
 800404c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800404e:	b141      	cbz	r1, 8004062 <__swsetup_r+0x4a>
 8004050:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004054:	4299      	cmp	r1, r3
 8004056:	d002      	beq.n	800405e <__swsetup_r+0x46>
 8004058:	4628      	mov	r0, r5
 800405a:	f7ff fa81 	bl	8003560 <_free_r>
 800405e:	2300      	movs	r3, #0
 8004060:	6363      	str	r3, [r4, #52]	@ 0x34
 8004062:	89a3      	ldrh	r3, [r4, #12]
 8004064:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	2300      	movs	r3, #0
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	89a3      	ldrh	r3, [r4, #12]
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	6923      	ldr	r3, [r4, #16]
 800407c:	b94b      	cbnz	r3, 8004092 <__swsetup_r+0x7a>
 800407e:	89a3      	ldrh	r3, [r4, #12]
 8004080:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004088:	d003      	beq.n	8004092 <__swsetup_r+0x7a>
 800408a:	4621      	mov	r1, r4
 800408c:	4628      	mov	r0, r5
 800408e:	f000 f8b2 	bl	80041f6 <__smakebuf_r>
 8004092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004096:	f013 0201 	ands.w	r2, r3, #1
 800409a:	d00a      	beq.n	80040b2 <__swsetup_r+0x9a>
 800409c:	2200      	movs	r2, #0
 800409e:	60a2      	str	r2, [r4, #8]
 80040a0:	6962      	ldr	r2, [r4, #20]
 80040a2:	4252      	negs	r2, r2
 80040a4:	61a2      	str	r2, [r4, #24]
 80040a6:	6922      	ldr	r2, [r4, #16]
 80040a8:	b942      	cbnz	r2, 80040bc <__swsetup_r+0xa4>
 80040aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80040ae:	d1c5      	bne.n	800403c <__swsetup_r+0x24>
 80040b0:	bd38      	pop	{r3, r4, r5, pc}
 80040b2:	0799      	lsls	r1, r3, #30
 80040b4:	bf58      	it	pl
 80040b6:	6962      	ldrpl	r2, [r4, #20]
 80040b8:	60a2      	str	r2, [r4, #8]
 80040ba:	e7f4      	b.n	80040a6 <__swsetup_r+0x8e>
 80040bc:	2000      	movs	r0, #0
 80040be:	e7f7      	b.n	80040b0 <__swsetup_r+0x98>
 80040c0:	20000048 	.word	0x20000048

080040c4 <memmove>:
 80040c4:	4288      	cmp	r0, r1
 80040c6:	b510      	push	{r4, lr}
 80040c8:	eb01 0402 	add.w	r4, r1, r2
 80040cc:	d902      	bls.n	80040d4 <memmove+0x10>
 80040ce:	4284      	cmp	r4, r0
 80040d0:	4623      	mov	r3, r4
 80040d2:	d807      	bhi.n	80040e4 <memmove+0x20>
 80040d4:	1e43      	subs	r3, r0, #1
 80040d6:	42a1      	cmp	r1, r4
 80040d8:	d008      	beq.n	80040ec <memmove+0x28>
 80040da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040e2:	e7f8      	b.n	80040d6 <memmove+0x12>
 80040e4:	4601      	mov	r1, r0
 80040e6:	4402      	add	r2, r0
 80040e8:	428a      	cmp	r2, r1
 80040ea:	d100      	bne.n	80040ee <memmove+0x2a>
 80040ec:	bd10      	pop	{r4, pc}
 80040ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040f6:	e7f7      	b.n	80040e8 <memmove+0x24>

080040f8 <_sbrk_r>:
 80040f8:	b538      	push	{r3, r4, r5, lr}
 80040fa:	2300      	movs	r3, #0
 80040fc:	4d05      	ldr	r5, [pc, #20]	@ (8004114 <_sbrk_r+0x1c>)
 80040fe:	4604      	mov	r4, r0
 8004100:	4608      	mov	r0, r1
 8004102:	602b      	str	r3, [r5, #0]
 8004104:	f7fc f9e8 	bl	80004d8 <_sbrk>
 8004108:	1c43      	adds	r3, r0, #1
 800410a:	d102      	bne.n	8004112 <_sbrk_r+0x1a>
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	b103      	cbz	r3, 8004112 <_sbrk_r+0x1a>
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	bd38      	pop	{r3, r4, r5, pc}
 8004114:	200003a4 	.word	0x200003a4

08004118 <memchr>:
 8004118:	4603      	mov	r3, r0
 800411a:	b510      	push	{r4, lr}
 800411c:	b2c9      	uxtb	r1, r1
 800411e:	4402      	add	r2, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	4618      	mov	r0, r3
 8004124:	d101      	bne.n	800412a <memchr+0x12>
 8004126:	2000      	movs	r0, #0
 8004128:	e003      	b.n	8004132 <memchr+0x1a>
 800412a:	7804      	ldrb	r4, [r0, #0]
 800412c:	3301      	adds	r3, #1
 800412e:	428c      	cmp	r4, r1
 8004130:	d1f6      	bne.n	8004120 <memchr+0x8>
 8004132:	bd10      	pop	{r4, pc}

08004134 <memcpy>:
 8004134:	440a      	add	r2, r1
 8004136:	4291      	cmp	r1, r2
 8004138:	f100 33ff 	add.w	r3, r0, #4294967295
 800413c:	d100      	bne.n	8004140 <memcpy+0xc>
 800413e:	4770      	bx	lr
 8004140:	b510      	push	{r4, lr}
 8004142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004146:	4291      	cmp	r1, r2
 8004148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800414c:	d1f9      	bne.n	8004142 <memcpy+0xe>
 800414e:	bd10      	pop	{r4, pc}

08004150 <_realloc_r>:
 8004150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004154:	4607      	mov	r7, r0
 8004156:	4614      	mov	r4, r2
 8004158:	460d      	mov	r5, r1
 800415a:	b921      	cbnz	r1, 8004166 <_realloc_r+0x16>
 800415c:	4611      	mov	r1, r2
 800415e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004162:	f7ff ba67 	b.w	8003634 <_malloc_r>
 8004166:	b92a      	cbnz	r2, 8004174 <_realloc_r+0x24>
 8004168:	f7ff f9fa 	bl	8003560 <_free_r>
 800416c:	4625      	mov	r5, r4
 800416e:	4628      	mov	r0, r5
 8004170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004174:	f000 f89e 	bl	80042b4 <_malloc_usable_size_r>
 8004178:	4284      	cmp	r4, r0
 800417a:	4606      	mov	r6, r0
 800417c:	d802      	bhi.n	8004184 <_realloc_r+0x34>
 800417e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004182:	d8f4      	bhi.n	800416e <_realloc_r+0x1e>
 8004184:	4621      	mov	r1, r4
 8004186:	4638      	mov	r0, r7
 8004188:	f7ff fa54 	bl	8003634 <_malloc_r>
 800418c:	4680      	mov	r8, r0
 800418e:	b908      	cbnz	r0, 8004194 <_realloc_r+0x44>
 8004190:	4645      	mov	r5, r8
 8004192:	e7ec      	b.n	800416e <_realloc_r+0x1e>
 8004194:	42b4      	cmp	r4, r6
 8004196:	4622      	mov	r2, r4
 8004198:	4629      	mov	r1, r5
 800419a:	bf28      	it	cs
 800419c:	4632      	movcs	r2, r6
 800419e:	f7ff ffc9 	bl	8004134 <memcpy>
 80041a2:	4629      	mov	r1, r5
 80041a4:	4638      	mov	r0, r7
 80041a6:	f7ff f9db 	bl	8003560 <_free_r>
 80041aa:	e7f1      	b.n	8004190 <_realloc_r+0x40>

080041ac <__swhatbuf_r>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	460c      	mov	r4, r1
 80041b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b4:	4615      	mov	r5, r2
 80041b6:	2900      	cmp	r1, #0
 80041b8:	461e      	mov	r6, r3
 80041ba:	b096      	sub	sp, #88	@ 0x58
 80041bc:	da0c      	bge.n	80041d8 <__swhatbuf_r+0x2c>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	2100      	movs	r1, #0
 80041c2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80041c6:	bf14      	ite	ne
 80041c8:	2340      	movne	r3, #64	@ 0x40
 80041ca:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80041ce:	2000      	movs	r0, #0
 80041d0:	6031      	str	r1, [r6, #0]
 80041d2:	602b      	str	r3, [r5, #0]
 80041d4:	b016      	add	sp, #88	@ 0x58
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	466a      	mov	r2, sp
 80041da:	f000 f849 	bl	8004270 <_fstat_r>
 80041de:	2800      	cmp	r0, #0
 80041e0:	dbed      	blt.n	80041be <__swhatbuf_r+0x12>
 80041e2:	9901      	ldr	r1, [sp, #4]
 80041e4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80041e8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041ec:	4259      	negs	r1, r3
 80041ee:	4159      	adcs	r1, r3
 80041f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041f4:	e7eb      	b.n	80041ce <__swhatbuf_r+0x22>

080041f6 <__smakebuf_r>:
 80041f6:	898b      	ldrh	r3, [r1, #12]
 80041f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041fa:	079d      	lsls	r5, r3, #30
 80041fc:	4606      	mov	r6, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	d507      	bpl.n	8004212 <__smakebuf_r+0x1c>
 8004202:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	6123      	str	r3, [r4, #16]
 800420a:	2301      	movs	r3, #1
 800420c:	6163      	str	r3, [r4, #20]
 800420e:	b003      	add	sp, #12
 8004210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004212:	466a      	mov	r2, sp
 8004214:	ab01      	add	r3, sp, #4
 8004216:	f7ff ffc9 	bl	80041ac <__swhatbuf_r>
 800421a:	9f00      	ldr	r7, [sp, #0]
 800421c:	4605      	mov	r5, r0
 800421e:	4639      	mov	r1, r7
 8004220:	4630      	mov	r0, r6
 8004222:	f7ff fa07 	bl	8003634 <_malloc_r>
 8004226:	b948      	cbnz	r0, 800423c <__smakebuf_r+0x46>
 8004228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800422c:	059a      	lsls	r2, r3, #22
 800422e:	d4ee      	bmi.n	800420e <__smakebuf_r+0x18>
 8004230:	f023 0303 	bic.w	r3, r3, #3
 8004234:	f043 0302 	orr.w	r3, r3, #2
 8004238:	81a3      	strh	r3, [r4, #12]
 800423a:	e7e2      	b.n	8004202 <__smakebuf_r+0xc>
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	9b01      	ldr	r3, [sp, #4]
 800424a:	6020      	str	r0, [r4, #0]
 800424c:	b15b      	cbz	r3, 8004266 <__smakebuf_r+0x70>
 800424e:	4630      	mov	r0, r6
 8004250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004254:	f000 f81e 	bl	8004294 <_isatty_r>
 8004258:	b128      	cbz	r0, 8004266 <__smakebuf_r+0x70>
 800425a:	89a3      	ldrh	r3, [r4, #12]
 800425c:	f023 0303 	bic.w	r3, r3, #3
 8004260:	f043 0301 	orr.w	r3, r3, #1
 8004264:	81a3      	strh	r3, [r4, #12]
 8004266:	89a3      	ldrh	r3, [r4, #12]
 8004268:	431d      	orrs	r5, r3
 800426a:	81a5      	strh	r5, [r4, #12]
 800426c:	e7cf      	b.n	800420e <__smakebuf_r+0x18>
	...

08004270 <_fstat_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	2300      	movs	r3, #0
 8004274:	4d06      	ldr	r5, [pc, #24]	@ (8004290 <_fstat_r+0x20>)
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	f7fe fd66 	bl	8002d4e <_fstat>
 8004282:	1c43      	adds	r3, r0, #1
 8004284:	d102      	bne.n	800428c <_fstat_r+0x1c>
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	b103      	cbz	r3, 800428c <_fstat_r+0x1c>
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	bd38      	pop	{r3, r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	200003a4 	.word	0x200003a4

08004294 <_isatty_r>:
 8004294:	b538      	push	{r3, r4, r5, lr}
 8004296:	2300      	movs	r3, #0
 8004298:	4d05      	ldr	r5, [pc, #20]	@ (80042b0 <_isatty_r+0x1c>)
 800429a:	4604      	mov	r4, r0
 800429c:	4608      	mov	r0, r1
 800429e:	602b      	str	r3, [r5, #0]
 80042a0:	f7fe feba 	bl	8003018 <_isatty>
 80042a4:	1c43      	adds	r3, r0, #1
 80042a6:	d102      	bne.n	80042ae <_isatty_r+0x1a>
 80042a8:	682b      	ldr	r3, [r5, #0]
 80042aa:	b103      	cbz	r3, 80042ae <_isatty_r+0x1a>
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	bd38      	pop	{r3, r4, r5, pc}
 80042b0:	200003a4 	.word	0x200003a4

080042b4 <_malloc_usable_size_r>:
 80042b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042b8:	1f18      	subs	r0, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bfbc      	itt	lt
 80042be:	580b      	ldrlt	r3, [r1, r0]
 80042c0:	18c0      	addlt	r0, r0, r3
 80042c2:	4770      	bx	lr

080042c4 <_init>:
 80042c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c6:	bf00      	nop
 80042c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ca:	bc08      	pop	{r3}
 80042cc:	469e      	mov	lr, r3
 80042ce:	4770      	bx	lr

080042d0 <_fini>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	bf00      	nop
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr
